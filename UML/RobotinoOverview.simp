<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<sim-project version="6.85" multi-file="no">
  <meta>
    <name>Robotino</name>
    <authors> </authors>
    <description />
  </meta>
  <management>
    <persons>
      <person id="Pa5fd30480c484e73a79c16645dbe273a">
        <first-name />
        <last-name />
        <role />
        <e-mail />
        <phone-number />
        <description />
        <color>#00000000</color>
      </person>
    </persons>
    <tasks />
    <requirements />
    <issues />
    <to-dos />
  </management>
  <glossary />
  <types>
    <type-sets>
      <type-set file="UmlTypes.xml" />
    </type-sets>
    <custom-types>
      <type id="ProtobufClient" tid="" name="ProtobufClient" description="" nullable="false" />
      <type id="Handler" tid="" name="Handler" description="" nullable="false" />
      <type id="ProtobufBroadcastPeer" tid="" name="ProtobufBroadcastPeer" description="" nullable="false" />
      <type id="int" tid="" name="int" description="" nullable="false" />
      <type id="boolean" tid="" name="boolean" description="" nullable="false" />
      <type id="UserFrame" tid="" name="UserFrame" description="" nullable="false" />
      <type id="int[]" tid="" name="int[]" description="" nullable="false" />
      <type id="String[]" tid="" name="String[]" description="" nullable="false" />
      <type id="ByteBuffer" tid="" name="ByteBuffer" description="" nullable="false" />
      <type id="GeneratedMessage" tid="" name="GeneratedMessage" description="" nullable="false" />
      <type id="NanoSecondsTimestampProvider" tid="" name="NanoSecondsTimestampProvider" description="" nullable="false" />
      <type id="ProtobufMessage" tid="" name="ProtobufMessage" description="" nullable="false" />
      <type id="FileIO" tid="" name="FileIO" description="" nullable="false" />
      <type id="File" tid="" name="File" description="" nullable="false" />
      <type id="ComView" tid="" name="ComView" description="" nullable="false" />
      <type id="InterfacePanel" tid="" name="InterfacePanel" description="" nullable="false" />
      <type id="JTextArea" tid="" name="JTextArea" description="" nullable="false" />
      <type id="JScrollPane" tid="" name="JScrollPane" description="" nullable="false" />
      <type id="JLabel" tid="" name="JLabel" description="" nullable="false" />
      <type id="JButton" tid="" name="JButton" description="" nullable="false" />
      <type id="MouseEvent" tid="" name="MouseEvent" description="" nullable="false" />
      <type id="ChangeEvent" tid="" name="ChangeEvent" description="" nullable="false" />
      <type id="Observable" tid="" name="Observable" description="" nullable="false" />
      <type id="JFrame" tid="" name="JFrame" description="" nullable="false" />
      <type id="Container" tid="" name="Container" description="" nullable="false" />
      <type id="RefboxPanel" tid="" name="RefboxPanel" description="" nullable="false" />
      <type id="ActionEvent" tid="" name="ActionEvent" description="" nullable="false" />
      <type id="RefboxFrame" tid="" name="RefboxFrame" description="" nullable="false" />
      <type id="JMenuBar" tid="" name="JMenuBar" description="" nullable="false" />
      <type id="JMenu" tid="" name="JMenu" description="" nullable="false" />
      <type id="JMenuItem" tid="" name="JMenuItem" description="" nullable="false" />
      <type id="UDPServer" tid="" name="UDPServer" description="" nullable="false" />
      <type id="DatagramSocket" tid="" name="DatagramSocket" description="" nullable="false" />
      <type id="byte" tid="" name="byte" description="" nullable="false" />
      <type id="byte[]" tid="" name="byte[]" description="" nullable="false" />
      <type id="Cell" tid="" name="Cell" description="" nullable="false" />
      <type id="Cell[][]" tid="" name="Cell[][]" description="" nullable="false" />
      <type id="Robo" tid="" name="Robo" description="" nullable="false" />
      <type id="double" tid="" name="double" description="" nullable="false" />
      <type id="FieldCommander" tid="" name="FieldCommander" description="" nullable="false" />
      <type id="LaserControlledBreaking" tid="" name="LaserControlledBreaking" description="" nullable="false" />
      <type id="JobController" tid="" name="JobController" description="" nullable="false" />
      <type id="List" tid="" name="List" description="" nullable="false" />
      <type id="DeliveryGate" tid="" name="DeliveryGate" description="" nullable="false" />
      <type id="Drive" tid="" name="Drive" description="" nullable="false" />
      <type id="StateMachine" tid="" name="StateMachine" description="" nullable="false" />
      <type id="Observer" tid="" name="Observer" description="" nullable="false" />
      <type id="List&lt;Order&gt;" tid="" name="List&lt;Order&gt;" description="" nullable="false" />
      <type id="GameState" tid="" name="GameState" description="" nullable="false" />
      <type id="List&lt;Machine&gt;" tid="" name="List&lt;Machine&gt;" description="" nullable="false" />
      <type id="Communication" tid="" name="Communication" description="" nullable="false" />
      <type id="If_DataWriter" tid="" name="If_DataWriter" description="" nullable="false" />
      <type id="If_DataReader" tid="" name="If_DataReader" description="" nullable="false" />
      <type id="Socket" tid="" name="Socket" description="" nullable="false" />
      <type id="OutputStream" tid="" name="OutputStream" description="" nullable="false" />
      <type id="InputStream" tid="" name="InputStream" description="" nullable="false" />
      <type id="NewMeasurementListener" tid="" name="NewMeasurementListener" description="" nullable="false" />
      <type id="ArrayList&lt;DataSegment&gt;" tid="" name="ArrayList&lt;DataSegment&gt;" description="" nullable="false" />
      <type id="DataSegment" tid="" name="DataSegment" description="" nullable="false" />
      <type id="char[]" tid="" name="char[]" description="" nullable="false" />
      <type id="long" tid="" name="long" description="" nullable="false" />
      <type id="char" tid="" name="char" description="" nullable="false" />
      <type id="Class:di757239640974862321" tid="" name="Laser" description="" nullable="false" class-ref="di757239640974862321" />
      <type id="TiM55x" tid="" name="TiM55x" description="" nullable="false" />
      <type id="DataMask" tid="" name="DataMask" description="" nullable="false" />
      <type id="BasicInterpreter" tid="" name="BasicInterpreter" description="" nullable="false" />
      <type id="Graphics" tid="" name="Graphics" description="" nullable="false" />
    </custom-types>
  </types>
  <filters />
  <items>
    <item id="di812191163506172310" cid="C001" type="class" name="ComRefbox" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="Pa5fd30480c484e73a79c16645dbe273a" creation-date="02/18/2014 15:12:19">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a98b0a01020c8449e99f1ea5c7f1778cb724" name="client" type="ProtobufClient" type-id="ProtobufClient" visibility="public" abstract="false" virtual="false" />
        <attribute id="ae795416a6c844adba1c1eb9cfe2611d9729" name="handler" type="Handler" type-id="Handler" visibility="public" abstract="false" virtual="false" />
        <attribute id="ad3c1d64608be4714b79c024e2889a217729" name="peer" type="ProtobufBroadcastPeer" type-id="ProtobufBroadcastPeer" visibility="public" abstract="false" virtual="false" />
        <attribute id="a3d14f8be1439412f8ccc85f20b82c93e729" name="gamePoints" type="int" type-id="int" visibility="public" abstract="false" virtual="false" />
        <attribute id="a0686942815a4414ba5d82bebdd22f9ab730" name="gamePhase" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" />
        <attribute id="a51f22e3d7adb47e8af6732c399ae274e730" name="gameState" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" />
        <attribute id="a0fcc104259b84bbf9bb4952b7a326ccd730" name="hasTime" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" />
        <attribute id="aaed14c7c5e444404bbe83770522ac001730" name="gameTime" type="int" type-id="int" visibility="public" abstract="false" virtual="false" />
      </attributes>
      <operations>
        <operation id="o1cd76aee2727430a80fe7a622da88c06730" name="ComRefbox" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="ip" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="portIn" type="int" type-id="int" default-value="" />
            <parameter id="" name="portOut" type="int" type-id="int" default-value="" />
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="frame" type="UserFrame" type-id="UserFrame" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        // --------------------------- Verbinden mit Refbox per UDP ----------------------------
        peer = new ProtobufBroadcastPeer(ip, portIn, portOut);

        try{
            peer.start();} catch (IOException e){
            e.printStackTrace();}
        handler = new Handler(frame, peer);
        peer.register_handler(handler);}

    /**
     * ?? event ??? ??? ??? refbox --&gt; controller Client-Server
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o681db810b7ea459ba3ebae8cf71739c9732" name="addAttentionMessage" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        peer.&lt;AttentionMessage&gt;add_message(AttentionMessage.class);}

    /**
     * ok periodisch 1sec ??? refbox --&gt; all P2P &amp; C-S
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o83ff22b7e27f41efb95de2ec8abb7c9e732" name="addBeaconSignal" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        client.&lt;BeaconSignal&gt;add_message(BeaconSignal.class);}

    //?? periodisch? EVENT! ??? refbox --&gt; any       P2P &amp; C-S</source-code>
          </source-codes>
        </operation>
        <operation id="o5ef872c3bbe54d1f9872782adbca7546732" name="addVersionInfo" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        peer.&lt;VersionInfo&gt;add_message(VersionInfo.class);}

    /**
     * ?? periodisch 1sec ??? refbox --&gt; robots PeerToPeer
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oe4a1276785b441f9818b8f8adce99414732" name="addExplorationInfo" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        peer.&lt;ExplorationInfo&gt;add_message(ExplorationInfo.class);}

    //ok periodisch 1sec ??? refbox --&gt; all          P2P &amp; C-S
    /**
     * Hört auf die Nachricht "GameState" werte: - Aktueller Punktestand -
     * Aktuelle Spielzeit (EXPLORATION: 0-180, PRODUCTION: 0-900) - Aktueller
     * Spiel Phase (PRE_GAME, EXPLORATION, PRODUCTION, POST_GAME) - Aktueller
     * Spiel Status (WAIT_STRT, RUNNING, PAUSED) - Ob noch Spielzeit vorhanden
     * ist.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o61ee1935969c49ccbb6fcbc1539df385732" name="addGameStateMessage" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        peer.&lt;GameState&gt;add_message(GameState.class);}

    /**
     * ok periodisch 0.25sec ??? refbox --&gt; all P2P &amp; C-S
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o0658d3980a8d4cf4b08c18be4d400de4732" name="addMachineInfo" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        peer.&lt;MachineInfo&gt;add_message(MachineInfo.class);}

    /**
     * ?? ??? 5sec ??? refbox --&gt; any P2P &amp; C-S
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o382850659db4487d98a9b271cb77cf78732" name="addOrderInfo" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        peer.&lt;OrderInfo&gt;add_message(OrderInfo.class);}

    /**
     * ok periodisch 1sec ok refbox --&gt; controller Client-Server
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oa3d8e8b133454cda9558d494e931c05b732" name="addPuckInfo" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        peer.&lt;PuckInfo&gt;add_message(PuckInfo.class);}

    /**
     * ok periodisch 1sec ??? refbox --&gt; controller Client-Server
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oab8635df5e2b4d13a82d55d4436a771d732" name="addRobotInfo" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        peer.&lt;RobotInfo&gt;add_message(RobotInfo.class);}

    /**
     *
     * @return Gibt den aktuellen Spiel Status zurück (WAIT_STRT, RUNNING,
     * PAUSED).
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o4007e6361f26454e8212ca59ee541332732" name="getState" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return handler.getState();}

    /**
     *
     * @return Gibt die aktuelle Spiel Phase zurück (PRE_GAME, EXPLORATION,
     * PRODUCTION, POST_GAME).
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o006d921f5bf7460097e2bc9e56bb91aa732" name="getPhase" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return handler.getPhase();}

    /**
     *
     * @return Git an ob noch Spielzeit vorhanden ist.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="od58f798e04014263a8987529ba677623732" name="getHasTime" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return handler.getHasTime();}

    /**
     *
     * @return Gibt die aktuelle Spielzeit zurück (EXPLORATION: 0-180,
     * PRODUCTION: 0-900).
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oc7e0079a6b5a496f890511388b426fda732" name="getTime" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return handler.getTime();}

    /**
     *
     * @return Gibt den Aktuellen Punktestand zurück.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oc95ca6ae618145328c05ef71d07f0303732" name="getPoints" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return handler.getPoints();}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di505570449272344495" cid="C002" type="class" name="Handler" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="Pa5fd30480c484e73a79c16645dbe273a" creation-date="02/18/2014 15:12:19">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a7213c3730a2642eb9ca5f56472d13518764" name="counter" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="ab8929301638d4cc4aa82e74dfb229912764" name="gamePoints" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" />
        <attribute id="afbf672b5e92a43a5a79068d889a2c138764" name="gamePhase" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" />
        <attribute id="aeeca38b37d8d429b84b896cb83c36630764" name="gameState" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" />
        <attribute id="a20bcbf7401984962b4aedd9587d814b7764" name="hasTime" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" />
        <attribute id="a83cf419a21b545ddba5506d0e922a4b7764" name="gameTime" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" />
        <attribute id="a6c57db4f49694990a4a15c04806ddda9764" name="mTyp" type="int[]" type-id="int[]" visibility="public" abstract="false" virtual="false" />
        <attribute id="ab8143bbb4ba2427a9030a2fcfb523d10764" name="peer" type="ProtobufBroadcastPeer" type-id="ProtobufBroadcastPeer" visibility="package" abstract="false" virtual="false" />
        <attribute id="a8ae375289877427eb43afe46947e2d13764" name="lampM1" type="int[]" type-id="int[]" visibility="public" abstract="false" virtual="false" />
        <attribute id="a86c3dcb4bfcd45209aff57a4d4fe4d3e764" name="lampM2" type="int[]" type-id="int[]" visibility="public" abstract="false" virtual="false" />
        <attribute id="a7da8273396c44001a4055f0950c3e8b8764" name="lampM3" type="int[]" type-id="int[]" visibility="public" abstract="false" virtual="false" />
        <attribute id="a9189d38024904c2ab98409e800e5948f764" name="lampM4" type="int[]" type-id="int[]" visibility="public" abstract="false" virtual="false" />
        <attribute id="aeaf5a128a2504efd9c678dfb75f95d16764" name="lampM5" type="int[]" type-id="int[]" visibility="public" abstract="false" virtual="false" />
        <attribute id="a9b2f683dd07c43a38c9e208c4606cbc8764" name="lampM6" type="int[]" type-id="int[]" visibility="public" abstract="false" virtual="false" />
        <attribute id="a2ee0667819874e06980a3a3cb400df27764" name="lampM7" type="int[]" type-id="int[]" visibility="public" abstract="false" virtual="false" />
        <attribute id="ad09c8bd7633644b6b4ef7dff097298c1764" name="lampM8" type="int[]" type-id="int[]" visibility="public" abstract="false" virtual="false" />
        <attribute id="ae7f410a7d64d4191b9014ca0ab42c801764" name="lampM9" type="int[]" type-id="int[]" visibility="public" abstract="false" virtual="false" />
        <attribute id="a2ec2c7b6b7b64777b3a9952926b7a7f5764" name="lampM10" type="int[]" type-id="int[]" visibility="public" abstract="false" virtual="false" />
        <attribute id="a08837a7add0249cd8ba952f8a8f0974b764" name="Mtyp" type="String[]" type-id="String[]" visibility="public" abstract="false" virtual="false" />
        <attribute id="aa8ddd62b7aeb4d9ea3e14f3fbffb9c81764" name="machinetyp" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" />
      </attributes>
      <operations>
        <operation id="o7ca9c3597cc24c84be166d56fb704760764" name="Handler" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="frame" type="UserFrame" type-id="UserFrame" default-value="" />
            <parameter id="" name="peer" type="ProtobufBroadcastPeer" type-id="ProtobufBroadcastPeer" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{

        this.peer = peer;
        this.addObserver(frame.panel);
        this.frame = frame;
        counter = 0;
        frame.panel.printLog("Der Server wurde gestartet !!!");}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o0612452ac3594511968356d69ec0caa2764" name="handle_message" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="in_msg" type="ByteBuffer" type-id="ByteBuffer" default-value="" />
            <parameter id="" name="msg" type="GeneratedMessage" type-id="GeneratedMessage" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        NanoSecondsTimestampProvider nstp = new NanoSecondsTimestampProvider();

        long ms = System.currentTimeMillis();
        long ns = nstp.currentNanoSecondsTimestamp();

        int sec = (int) (ms / 1000);
        long nsec = ns - (ms * 1000000L);

        TimeProtos.Time t = TimeProtos.Time.newBuilder().setSec(sec).setNsec(nsec).build();
        BeaconSignal bs = BeaconSignal.newBuilder().setTime(t).setSeq(1).setPeerName(Main.name).setNumber(0).setTeamName("Solidus").build();
        
        ProtobufMessage udpOut = new ProtobufMessage(2000, 1, bs);
        peer.enqueue(udpOut);
        //sendMachine("M1", "T4");
// -------------------------- Puck Info ----------------------------------------

        if (msg instanceof PuckInfo){


            byte[ array = new byte[in_msg.capacity();
            in_msg.rewind();
            in_msg.get(array);

            PuckInfoProtos.PuckInfo info;

            try{
                info = PuckInfoProtos.PuckInfo.parseFrom(array);
                int count = info.getPucksCount();
                System.out.println("Number of pucks: " + count);
                List&lt;PuckInfoProtos.Puck&gt; pucks = info.getPucksList();
                for (int i = 0; i &lt; pucks.size(); i++){
                    PuckInfoProtos.Puck puck = pucks.get(i);
                    int id = puck.getId();
                    System.out.println("  puck ID: " + id);}}
            catch (InvalidProtocolBufferException e){
                e.printStackTrace();}}

// -------------------------------- Order Info ---------------------------------


        if (msg instanceof OrderInfo){


            byte[ array = new byte[in_msg.capacity();
            in_msg.rewind();
            in_msg.get(array);
            
            OrderInfoProtos.OrderInfo info;
            try{
                info = OrderInfoProtos.OrderInfo.parseFrom(array);
                
                List&lt;Order&gt; list = info.getOrdersList();
                int length = list.size();
                
                for (int i = 0; i &lt; length; i++){
                    System.out.println("Order " + (i+1) + ": " + list.get(i));}}
            catch (InvalidProtocolBufferException ex){
                Logger.getLogger(Handler.class.getName()).log(Level.SEVERE, null, ex);}}

//------------------------------------------------------------------------------------------------
// -------------------------------------   Game State   ------------------------------------------
//------------------------------------------------------------------------------------------------
// Gibt die Aktuelle Spielphase, Spielstatus, Spielzeit, die Punkte und ob noch Zeit vorhanden ist.

        if (msg instanceof GameState){


            byte[ array = new byte[in_msg.capacity();
            in_msg.rewind();
            in_msg.get(array);

            GameStateProtos.GameState info;

            try{
                info = GameStateProtos.GameState.parseFrom(array);
                int points = info.getPoints();
                Phase phase = info.getPhase();
                State state = info.getState();
                TimeProtos.Time time = info.getGameTime();

                hasTime = info.hasGameTime() + "";


                setChanged();
                notifyObservers(send);


                gamePoints = points + "";
                gamePhase = phase.name();
                gameState = state.name();
                gameTime = time.getSec() + "";}
            catch (InvalidProtocolBufferException e){
                e.printStackTrace();}}

// -------------------------------- Machine Info ---------------------------------
                
         if (msg instanceof MachineInfo){
             System.out.println("MACHINE INFO");
            
                byte[ array = new byte[in_msg.capacity();
                in_msg.rewind();
                in_msg.get(array);
                               
                MachineInfoProtos.MachineInfo info;
            try{                
                
                
                info = MachineInfoProtos.MachineInfo.parseFrom(array);
                List&lt;Machine&gt; list = info.getMachinesList();
                
                int length = list.size();
                Mtyp = new String[length;
               
                
                for ( int i = 0; i &lt; length; i++){
                    Machine m = list.get(i);
                    
                   String name =  m.getName();
                   String typ =  m.getType();
                   Pose2D pose = m.getPose();
                   
                   PuckState out = m.getOutput();
                   //PuckState in = m.getInputs(i);
                   
                   Mtyp[i = typ;
                    System.out.println("Maschine " + name + " ist Maschinentyp " +Mtyp[i);
                    
                    if (Mtyp.equals("T5")){
                        machinetyp = Mtyp[i;}}}
            catch (InvalidProtocolBufferException ex){
                Logger.getLogger(Handler.class.getName()).log(Level.SEVERE, null, ex);}
                
               
            /*    
               try
            { 
             
                
                int count = info.getMachinesCount();
                System.out.println("Anzahl Mashcinen: " + count);
                List&lt;MachineInfoProtos.Machine&gt; machines = info.getMachinesList();
                                      
             
                MachineInfoProtos.Machine machine = machines.get(0);
            
                int inputsCount = machine.getInputsCount();
                List&lt;LightSpec&gt; lightlist = machine.getLightsList();
                
                
            }
            catch (InvalidProtocolBufferException ex)
            {
                Logger.getLogger(Handler.class.getName()).log(Level.SEVERE, null, ex);
            }
        */}
         
        
// -----------------------------------------------------------------------------------
// -------------------------------- Exploration Info ---------------------------------
// -----------------------------------------------------------------------------------

        if (msg instanceof ExplorationInfo){
            

            byte[ array = new byte[in_msg.capacity();
            in_msg.rewind();
            in_msg.get(array);

            ExplorationInfoProtos.ExplorationInfo info;


            try{
                info = ExplorationInfoProtos.ExplorationInfo.parseFrom(array);

                List&lt;ExplorationSignal&gt; slist = info.getSignalsList();
                ExplorationSignal m1 = slist.get(0);
                ExplorationSignal m2 = slist.get(1);
                ExplorationSignal m3 = slist.get(2);
                ExplorationSignal m4 = slist.get(3);
                ExplorationSignal m5 = slist.get(4);

// -------------------  Maschinen - Typ 1 --------------------------------------

                String m1typ = m1.getType();
                LightSpec m1l1 = m1.getLights(0);
                LightSpec m1l2 = m1.getLights(1);
                LightSpec m1l3 = m1.getLights(2);

                LightState m1l1state = m1l1.getState();
                LightState m1l2state = m1l2.getState();
                LightState m1l3state = m1l3.getState();

                int lampred1 = m1l1state.getNumber();
                int lampornge1 = m1l2state.getNumber();
                int lampgreen1 = m1l3state.getNumber();


// -------------------  Maschinen - Typ 2 --------------------------------------

                String m2typ = m2.getType();
                LightSpec m2l1 = m2.getLights(0);
                LightSpec m2l2 = m2.getLights(1);
                LightSpec m2l3 = m2.getLights(2);

                LightState m2l1state = m2l1.getState();
                LightState m2l2state = m2l2.getState();
                LightState m2l3state = m2l3.getState();

                int lampred2 = m2l1state.getNumber();
                int lampornge2 = m2l2state.getNumber();
                int lampgreen2 = m2l3state.getNumber();



// -------------------  Maschinen - Typ 3 --------------------------------------

                String m3typ = m3.getType();
                LightSpec m3l1 = m3.getLights(0);
                LightSpec m3l2 = m3.getLights(1);
                LightSpec m3l3 = m3.getLights(2);

                LightState m3l1state = m3l1.getState();
                LightState m3l2state = m3l2.getState();
                LightState m3l3state = m3l3.getState();

                int lampred3 = m3l1state.getNumber();
                int lampornge3 = m3l2state.getNumber();
                int lampgreen3 = m3l3state.getNumber();


// -------------------  Maschinen - Typ 4 --------------------------------------

                String m4typ = m4.getType();
                LightSpec m4l1 = m4.getLights(0);
                LightSpec m4l2 = m4.getLights(1);
                LightSpec m4l3 = m4.getLights(2);

                LightState m4l1state = m4l1.getState();
                LightState m4l2state = m4l2.getState();
                LightState m4l3state = m4l3.getState();

                int lampred4 = m4l1state.getNumber();
                int lampornge4 = m4l2state.getNumber();
                int lampgreen4 = m4l3state.getNumber();

// -------------------  Maschinen - Typ 5 --------------------------------------

                String m5typ = m5.getType();
                LightSpec m5l1 = m5.getLights(0);
                LightSpec m5l2 = m5.getLights(1);
                LightSpec m5l3 = m5.getLights(2);

                LightState m5l1state = m5l1.getState();
                LightState m5l2state = m5l2.getState();
                LightState m5l3state = m5l3.getState();

                int lampred5 = m5l1state.getNumber();
                int lampornge5 = m5l2state.getNumber();
                int lampgreen5 = m5l3state.getNumber();

// ------------------ Array[15] füllen: Station 1 - 3 platz 0 - 2... -------------
                mTyp = new int[15;
                mTyp[0 = lampred1;
                mTyp[1 = lampornge1;
                mTyp[2 = lampgreen1;
                mTyp[3 = lampred2;
                mTyp[4 = lampornge2;
                mTyp[5 = lampgreen2;
                mTyp[6 = lampred3;
                mTyp[7 = lampornge3;
                mTyp[8 = lampgreen3;
                mTyp[9 = lampred4;
                mTyp[10 = lampornge4;
                mTyp[11 = lampgreen4;
                mTyp[12 = lampred5;
                mTyp[13 = lampornge5;
                mTyp[14 = lampgreen5;

                int i;
                int m = 1;
                /*
                for (i = 0; i &lt; 15; i = i + 3)
                {
                    frame.panel.printLog("Machinetyp " + m + " =&gt; RED: " + mTyp[i] + " ORANGE: " + mTyp[i + 1] + " GREEN: " + mTyp[i + 2]);
                    m++;
                }
                */}
            catch (InvalidProtocolBufferException e){
                e.printStackTrace();}}

// -------------------------------- Beacon Signal ---------------------------------

        if (msg instanceof BeaconSignal){

            byte[ array = new byte[in_msg.capacity();
            in_msg.rewind();
            in_msg.get(array);}

// -------------------------------- Version Info ---------------------------------
       
        
 // ---------------------------- MachineReportt ---------------------------------

                   
        /*
        MachineReportProtos.MachineReportEntry mi = MachineReportProtos.MachineReportEntry.newBuilder().setName("???").setType("???").build();
        
        MachineReport mr = MachineReport.newBuilder().setMachines(1, mi).build();

        ProtobufMessage machineinfo = new ProtobufMessage(2000, 60, mr);
        peer.equals(machineinfo);

*/

// -----------------------------------------------------------------------------
        frame.panel.printLog("Step -------------------------&gt; " + counter + " &lt;-------------------------");
        counter++;

        send[0 = gamePoints;
        send[1 = gamePhase;
        send[2 = gameState;
        send[3 = gameTime;
        send[4 = hasTime;




        setChanged();
        notifyObservers(send);}
    
    
   

    /**
     *
     * @return Gibt den aktuellen Spiel Status zurück (WAIT_STRT, RUNNING,
     * PAUSED).
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o08732ae8bacc40af826f26dc9b6bc623765" name="getState" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return gameState;}

    /**
     *
     * @return Gibt die aktuelle Spiel Phase zurück (PRE_GAME, EXPLORATION,
     * PRODUCTION, POST_GAME).
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o66381adcdab84028944c554c0c97e41b765" name="getPhase" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return gamePhase;}

    /**
     *
     * @return Git an ob noch Spielzeit vorhanden ist.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oc2f5248f71fe4fba81bdd89ee1dad3f3765" name="getHasTime" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return hasTime;}

    /**
     *
     * @return Gibt die aktuelle Spielzeit zurück (EXPLORATION: 0-180,
     * PRODUCTION: 0-900).
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o35192a88c8274a3b8902a310f9ceedee765" name="getTime" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return gameTime;}

    /**
     *
     * @return Gibt den Aktuellen Punktestand zurück.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o8ee38b6f1a6f48c286ab749f984d95c6765" name="getPoints" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return gamePoints;}

    /**
     *
     * @return Gibt die von edr Refbox zugewisenen Lichter der 5 Maschinentypen
     * zurück: array[15] array[0] - array[2] Maschinentyp 1: [0] = Rote Lampe,
     * [1] = Orange Lampe, [2] = Grüne Lampe...
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oc37def5b08a84991a7d54e214387481a765" name="getMachineTyp" type="int[]" type-id="int[]" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return mTyp;}</source-code>
          </source-codes>
        </operation>
        <operation id="ob515953627654a27b047580fe0f97f6a765" name="sendMachine" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        try{
            Thread.sleep(500);}
        catch (InterruptedException ex){
            Logger.getLogger(Handler.class.getName()).log(Level.SEVERE, null, ex);}
        
        String type = "";
        
        switch (name){
            case "M1":
                if (lampM1[0 == mTyp[0 &amp;&amp; lampM1[1 == mTyp[1 &amp;&amp; lampM1[2 == mTyp[2 ){
                    type = "T1";}
                
                if (lampM1[0 == mTyp[3 &amp;&amp; lampM1[1 == mTyp[4 &amp;&amp; lampM1[2 == mTyp[5 ){
                    type = "T2";}
                
                if (lampM1[0 == mTyp[6 &amp;&amp; lampM1[1 == mTyp[7 &amp;&amp; lampM1[2 == mTyp[8 ){
                    type = "T3";}
                
                if (lampM1[0 == mTyp[9 &amp;&amp; lampM1[1 == mTyp[10 &amp;&amp; lampM1[2 == mTyp[11 ){
                    type = "T4";}
                
                if (lampM1[0 == mTyp[12 &amp;&amp; lampM1[1 == mTyp[13 &amp;&amp; lampM1[2 == mTyp[14 ){
                    type = "T5";}
                break;
                
            case "M2":
                if (lampM2[0 == mTyp[0 &amp;&amp; lampM2[1 == mTyp[1 &amp;&amp; lampM2[2 == mTyp[2 ){
                    type = "T1";}
                
                if (lampM2[0 == mTyp[3 &amp;&amp; lampM2[1 == mTyp[4 &amp;&amp; lampM2[2 == mTyp[5 ){
                    type = "T2";}
                
                if (lampM2[0 == mTyp[6 &amp;&amp; lampM2[1 == mTyp[7 &amp;&amp; lampM2[2 == mTyp[8 ){
                    type = "T3";}
                
                if (lampM2[0 == mTyp[9 &amp;&amp; lampM2[1 == mTyp[10 &amp;&amp; lampM2[2 == mTyp[11 ){
                    type = "T4";}
                
                if (lampM2[0 == mTyp[12 &amp;&amp; lampM2[1 == mTyp[13 &amp;&amp; lampM2[2 == mTyp[14 ){
                    type = "T5";}
                break;
                
            case "M3":
                 if (lampM3[0 == mTyp[0 &amp;&amp; lampM3[1 == mTyp[1 &amp;&amp; lampM3[2 == mTyp[2 ){
                    type = "T1";}
                
                if (lampM3[0 == mTyp[3 &amp;&amp; lampM3[1 == mTyp[4 &amp;&amp; lampM3[2 == mTyp[5 ){
                    type = "T2";}
                
                if (lampM3[0 == mTyp[6 &amp;&amp; lampM3[1 == mTyp[7 &amp;&amp; lampM3[2 == mTyp[8 ){
                    type = "T3";}
                
                if (lampM3[0 == mTyp[9 &amp;&amp; lampM3[1 == mTyp[10 &amp;&amp; lampM3[2 == mTyp[11 ){
                    type = "T4";}
                
                if (lampM3[0 == mTyp[12 &amp;&amp; lampM3[1 == mTyp[13 &amp;&amp; lampM3[2 == mTyp[14 ){
                    type = "T5";}
                break;
                
            case "M4":
                 if (lampM4[0 == mTyp[0 &amp;&amp; lampM4[1 == mTyp[1 &amp;&amp; lampM4[2 == mTyp[2 ){
                    type = "T1";}
                
                if (lampM4[0 == mTyp[3 &amp;&amp; lampM4[1 == mTyp[4 &amp;&amp; lampM4[2 == mTyp[5 ){
                    type = "T2";}
                
                if (lampM4[0 == mTyp[6 &amp;&amp; lampM4[1 == mTyp[7 &amp;&amp; lampM4[2 == mTyp[8 ){
                    type = "T3";}
                
                if (lampM4[0 == mTyp[9 &amp;&amp; lampM4[1 == mTyp[10 &amp;&amp; lampM4[2 == mTyp[11 ){
                    type = "T4";}
                
                if (lampM4[0 == mTyp[12 &amp;&amp; lampM4[1 == mTyp[13 &amp;&amp; lampM4[2 == mTyp[14 ){
                    type = "T5";}
                break;
                
            case "M5":
                 if (lampM5[0 == mTyp[0 &amp;&amp; lampM5[1 == mTyp[1 &amp;&amp; lampM5[2 == mTyp[2 ){
                    type = "T1";}
                
                if (lampM5[0 == mTyp[3 &amp;&amp; lampM5[1 == mTyp[4 &amp;&amp; lampM5[2 == mTyp[5 ){
                    type = "T2";}
                
                if (lampM5[0 == mTyp[6 &amp;&amp; lampM5[1 == mTyp[7 &amp;&amp; lampM5[2 == mTyp[8 ){
                    type = "T3";}
                
                if (lampM5[0 == mTyp[9 &amp;&amp; lampM5[1 == mTyp[10 &amp;&amp; lampM5[2 == mTyp[11 ){
                    type = "T4";}
                
                if (lampM5[0 == mTyp[12 &amp;&amp; lampM5[1 == mTyp[13 &amp;&amp; lampM5[2 == mTyp[14 ){
                    type = "T5";}
                break;
                
            case "M6":
                 if (lampM6[0 == mTyp[0 &amp;&amp; lampM6[1 == mTyp[1 &amp;&amp; lampM6[2 == mTyp[2 ){
                    type = "T1";}
                
                if (lampM6[0 == mTyp[3 &amp;&amp; lampM6[1 == mTyp[4 &amp;&amp; lampM6[2 == mTyp[5 ){
                    type = "T2";}
                
                if (lampM6[0 == mTyp[6 &amp;&amp; lampM6[1 == mTyp[7 &amp;&amp; lampM6[2 == mTyp[8 ){
                    type = "T3";}
                
                if (lampM6[0 == mTyp[9 &amp;&amp; lampM6[1 == mTyp[10 &amp;&amp; lampM6[2 == mTyp[11 ){
                    type = "T4";}
                
                if (lampM6[0 == mTyp[12 &amp;&amp; lampM6[1 == mTyp[13 &amp;&amp; lampM6[2 == mTyp[14 ){
                    type = "T5";}
                break;
                
            case "M7":
                 if (lampM7[0 == mTyp[0 &amp;&amp; lampM7[1 == mTyp[1 &amp;&amp; lampM7[2 == mTyp[2 ){
                    type = "T1";}
                
                if (lampM7[0 == mTyp[3 &amp;&amp; lampM7[1 == mTyp[4 &amp;&amp; lampM7[2 == mTyp[5 ){
                    type = "T2";}
                
                if (lampM7[0 == mTyp[6 &amp;&amp; lampM7[1 == mTyp[7 &amp;&amp; lampM7[2 == mTyp[8 ){
                    type = "T3";}
                
                if (lampM7[0 == mTyp[9 &amp;&amp; lampM7[1 == mTyp[10 &amp;&amp; lampM7[2 == mTyp[11 ){
                    type = "T4";}
                
                if (lampM7[0 == mTyp[12 &amp;&amp; lampM7[1 == mTyp[13 &amp;&amp; lampM7[2 == mTyp[14 ){
                    type = "T5";}
                break;
                
            case "M8":
                 if (lampM8[0 == mTyp[0 &amp;&amp; lampM8[1 == mTyp[1 &amp;&amp; lampM8[2 == mTyp[2 ){
                    type = "T1";}
                
                if (lampM8[0 == mTyp[3 &amp;&amp; lampM8[1 == mTyp[4 &amp;&amp; lampM8[2 == mTyp[5 ){
                    type = "T2";}
                
                if (lampM8[0 == mTyp[6 &amp;&amp; lampM8[1 == mTyp[7 &amp;&amp; lampM8[2 == mTyp[8 ){
                    type = "T3";}
                
                if (lampM8[0 == mTyp[9 &amp;&amp; lampM8[1 == mTyp[10 &amp;&amp; lampM8[2 == mTyp[11 ){
                    type = "T4";}
                
                if (lampM8[0 == mTyp[12 &amp;&amp; lampM8[1 == mTyp[13 &amp;&amp; lampM8[2 == mTyp[14 ){
                    type = "T5";}
                break;
                
            case "M9":
                 if (lampM9[0 == mTyp[0 &amp;&amp; lampM9[1 == mTyp[1 &amp;&amp; lampM9[2 == mTyp[2 ){
                    type = "T1";}
                
                if (lampM9[0 == mTyp[3 &amp;&amp; lampM9[1 == mTyp[4 &amp;&amp; lampM9[2 == mTyp[5 ){
                    type = "T2";}
                
                if (lampM9[0 == mTyp[6 &amp;&amp; lampM9[1 == mTyp[7 &amp;&amp; lampM9[2 == mTyp[8 ){
                    type = "T3";}
                
                if (lampM9[0 == mTyp[9 &amp;&amp; lampM9[1 == mTyp[10 &amp;&amp; lampM9[2 == mTyp[11 ){
                    type = "T4";}
                
                if (lampM9[0 == mTyp[12 &amp;&amp; lampM9[1 == mTyp[13 &amp;&amp; lampM9[2 == mTyp[14 ){
                    type = "T5";}
                break;
                
            case "M10":
                 if (lampM10[0 == mTyp[0 &amp;&amp; lampM10[1 == mTyp[1 &amp;&amp; lampM10[2 == mTyp[2 ){
                    type = "T1";}
                
                if (lampM10[0 == mTyp[3 &amp;&amp; lampM10[1 == mTyp[4 &amp;&amp; lampM10[2 == mTyp[5 ){
                    type = "T2";}
                
                if (lampM10[0 == mTyp[6 &amp;&amp; lampM10[1 == mTyp[7 &amp;&amp; lampM10[2 == mTyp[8 ){
                    type = "T3";}
                
                if (lampM10[0 == mTyp[9 &amp;&amp; lampM10[1 == mTyp[10 &amp;&amp; lampM10[2 == mTyp[11 ){
                    type = "T4";}
                
                if (lampM10[0 == mTyp[12 &amp;&amp; lampM10[1 == mTyp[13 &amp;&amp; lampM10[2 == mTyp[14 ){
                    type = "T5";}
                break;
                
            default:
                return;}
        
        try{
            Thread.sleep(1000);}
        catch (InterruptedException ex){
            Logger.getLogger(Handler.class.getName()).log(Level.SEVERE, null, ex);}
        MachineReportProtos.MachineReportEntry mi = MachineReportProtos.MachineReportEntry.newBuilder().setName(name).setType(type).build();
        MachineReport mr = MachineReport.newBuilder().addMachines(mi).build();
        ProtobufMessage machineReport = new ProtobufMessage(2000, 61, mr);
        peer.enqueue(machineReport);}</source-code>
          </source-codes>
        </operation>
        <operation id="o01a72f3e32c043be8774bc74c0b4754d768" name="requestedMachine" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        
        return machinetyp;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di523063490273256919" cid="C003" type="class" name="Send" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="Pa5fd30480c484e73a79c16645dbe273a" creation-date="02/18/2014 15:12:19">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a92b7fda10b664d53bdc88bea36eb714b773" name="client" type="ProtobufClient" type-id="ProtobufClient" visibility="package" abstract="false" virtual="false" />
        <attribute id="a90392812ebbe4141bcba608fe8cb1610773" name="nstp" type="NanoSecondsTimestampProvider" type-id="NanoSecondsTimestampProvider" visibility="package" abstract="false" virtual="false" />
      </attributes>
      <operations>
        <operation id="o1c9705993c2944f1926705f41ae91fea773" name="Send" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="client" type="ProtobufClient" type-id="ProtobufClient" default-value="" />
            <parameter id="" name="nstp" type="NanoSecondsTimestampProvider" type-id="NanoSecondsTimestampProvider" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{

        this.client = client;
        this.nstp = nstp;}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="of055d8bb5c9b42839891767f3c349e98773" name="run" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        while (true){
            long ms = System.currentTimeMillis();
            long ns = nstp.currentNanoSecondsTimestamp();

            int sec = (int) (ms / 1000);
            long nsec = ns - (ms * 1000000L);

            TimeProtos.Time t = TimeProtos.Time.newBuilder().setSec(sec).setNsec(nsec).build();

// ----------------------------- Team und Gerätename senden --------------------
            BeaconSignalProtos.BeaconSignal bs = BeaconSignalProtos.BeaconSignal.newBuilder().setTime(t).setSeq(1).setPeerName("MrPink").setTeamName("Solidus").build();

            ProtobufMessage msg = new ProtobufMessage(2000, 1, bs);

            client.enqueue(msg);

            client.&lt;PuckInfoProtos.PuckInfo&gt;add_message(PuckInfoProtos.PuckInfo.class);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o7283d04113214de6a5769bf4987afde2773" name="main" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        ProtobufClient client = new ProtobufClient("192.168.1.4", 4444);
        NanoSecondsTimestampProvider nstp = new NanoSecondsTimestampProvider();
        Send send = new Send(client, nstp);
        send.start();}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di776638204509656415" cid="C004" type="class" name="SendMessage" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="Pa5fd30480c484e73a79c16645dbe273a" creation-date="02/18/2014 15:12:19">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a4ffd395a8754466c940687e9eb5a5f7e777" name="beacon" type="ProtobufMessage" type-id="ProtobufMessage" visibility="package" abstract="false" virtual="false" />
        <attribute id="aab4e7e99e71845c9923d73256ae52c55777" name="peer" type="ProtobufBroadcastPeer" type-id="ProtobufBroadcastPeer" visibility="public" abstract="false" virtual="false" />
        <attribute id="a26ccc1a30532452a92892c879e58c93b777" name="ip" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" />
        <attribute id="a42decc8b4bdc4a9085cdd07960e970ed777" name="portIn" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="af0a7d39ec70f443095b491a08f204473777" name="portOut" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
      </attributes>
      <operations>
        <operation id="o074ce2b82b5648418a6eadb81d94f440777" name="SendMessage" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="ip" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="portIn" type="int" type-id="int" default-value="" />
            <parameter id="" name="portOut" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.ip = ip;
        this.portIn = portIn;
        this.portOut = portOut;}</source-code>
          </source-codes>
        </operation>
        <operation id="o144637fdd0484d658d82cb1c80963a92777" name="run" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        while (true){
            try{
              Thread.sleep(1000);}
            catch(Exception e){}
            peer = new ProtobufBroadcastPeer(ip, portIn, portOut);
            NanoSecondsTimestampProvider nstp = new NanoSecondsTimestampProvider();

            long ms = System.currentTimeMillis();
            long ns = nstp.currentNanoSecondsTimestamp();

            int sec = (int) (ms / 1000);
            long nsec = ns - (ms * 1000000L);

            TimeProtos.Time t = TimeProtos.Time.newBuilder().setSec(sec).setNsec(nsec).build();
            BeaconSignalProtos.BeaconSignal bs = BeaconSignalProtos.BeaconSignal.newBuilder().setTime(t).setSeq(1).setNumber(1).setPeerName(MainPack.Main.name).setTeamName("Solidus").build();

            beacon = new ProtobufMessage(2000, 1, bs);            
            try{
                peer.start();} catch (IOException ex){}
            peer.enqueue(beacon);
            peer.stop();}}</source-code>
          </source-codes>
        </operation>
        <operation id="o216fa48c6cfb410ca67d6171ecfb9e00777" name="main" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        //ProtobufClient client = new ProtobufClient("192.168.1.4", 4444);
        //NanoSecondsTimestampProvider nstp = new NanoSecondsTimestampProvider();
        SendMessage send = new SendMessage("192.168.1.4", 4444, 4444);
        send.start();
        //send.stop();}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di291162450766602793" cid="C002" type="class" name="LaserControlledBreaking" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/30/2014 22:45:43">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a4cefef5dc52347b6b4bed1223a93e1ba597" name="hindernisdistanz" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="ae1c0934f5f2c46b2a20e4634e6c6a25c597" name="running" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" default-value="true" />
      </attributes>
      <operations>
        <operation id="o4e461ef1c8c641c79ceaa6faf433fe23597" name="isRun" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return running;}</source-code>
          </source-codes>
        </operation>
        <operation id="o76ddf69c2710425b832a23a68fd52da0597" name="setRun" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="run" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.running = run;}
    static Laser tim;
    private static LaserControlledBreaking instance;</source-code>
          </source-codes>
        </operation>
        <operation id="oe3dcf5f2a89846b2955e40df192004ff597" name="getInstance" type="LaserControlledBreaking" type-id="LaserControlledBreaking" visibility="public" abstract="false" virtual="false" static="true">
          <source-codes>
            <source-code language="Undefined">{
        if (instance == null){
            instance = new LaserControlledBreaking();}
        return instance;}</source-code>
          </source-codes>
        </operation>
        <operation id="ocba5080170444cf491bdcbc509164258597" name="LaserControlledBreaking" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        speedPercent = 100;
        hindernisdistanz = DEFAULT_DISTANCE;
        lastSpeedPercent = DEFAULT_PERCENT;
        tim = Laser.getInstance();}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="of574b160478c4454a119cef9ebc71fd6597" name="run" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        while (true) //(running == true)   //didnt start after resetting{
            try{
                tim.getNewMeasurementData();} catch (IOException ex){
                Logger.getLogger(ComView.class.getName()).log(Level.SEVERE, null, ex);}
            hindernisdistanz = tim.getDistance(0);

            //hindernisdistanz = (int)(Math.random() * 5000); //Simulation des Laserwertes zum Test in main-Methode;
            speedPercent = (int) ((hindernisdistanz - MINDIST) * FACT);

            if (speedPercent &gt; lastSpeedPercent){
                speedPercent = lastSpeedPercent + 10;

                try{
                    Thread.sleep(100);} catch (InterruptedException ex){
                    Logger.getLogger(ComView.class.getName()).log(Level.SEVERE, null, ex);}}

            lastSpeedPercent = speedPercent;}}</source-code>
          </source-codes>
        </operation>
        <operation id="od13536d6efa1477985b9b20f44e53c5d597" name="getBremsfaktor" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        if (running){            
            if (speedPercent &gt; 100){
                speedPercent = 100;} else if (speedPercent &lt; 0){
                speedPercent = 0;}} else{
            speedPercent = 100;}
        return speedPercent;}</source-code>
          </source-codes>
        </operation>
        <operation id="of496b2e2d1134ca69315c4539ec4da07597" name="main" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        LaserControlledBreaking lcb = new LaserControlledBreaking();
        lcb.start();
        int i = 0;
        while (true){

            try{
                sleep(500);} catch (InterruptedException ex){}
            if (i++ &gt; 5){
                lcb.setRun(false);
                System.out.println(lcb.getBremsfaktor() + "/" + lcb.isRun());
                try{
                    sleep(3000);
                    i = 0;} catch (InterruptedException ex){}
                lcb.setRun(true);}
            System.out.println(lcb.getBremsfaktor() + "/" + lcb.isRun());}}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di344620390970239043" cid="C001" type="class" name="Drive" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/30/2014 22:45:43">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="ad0c499cdf12e4da4bfb8368b56727de9573" name="fc" type="FieldCommander" type-id="FieldCommander" visibility="package" abstract="false" virtual="false" />
        <attribute id="a9fee817c8fd749d0ae9b4dced3a202b8579" name="comView" type="ComView" type-id="ComView" visibility="package" abstract="false" virtual="false" />
        <attribute id="a173369276ba64922a68519814469e7eb579" name="lcb" type="LaserControlledBreaking" type-id="LaserControlledBreaking" visibility="package" abstract="false" virtual="false" />
        <attribute id="a2752b3463e4440e69f4f375973f68911579" name="sM" type="StateMachine" type-id="StateMachine" visibility="package" abstract="false" virtual="false" />
        <attribute id="ae2fdd3e4efb44636927173e8b89ee0ff580" name="startPosX" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="aa5a111ebf4654cf5a0b2cffccc2d9015580" name="startPosY" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="a29f4403e22174baca48f6cd8b8b0a98f580" name="startPosPhi" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="ad7e1505dbd7e47ed9de242e02fa7d7b3580" name="tempTargetX" type="int" type-id="int" visibility="package" abstract="false" virtual="false" default-value="0" />
        <attribute id="ac4977f9cb3cd45f9996bd5dbc1fa6fe3581" name="tempTargetY" type="int" type-id="int" visibility="package" abstract="false" virtual="false" default-value="0" />
        <attribute id="a867c5befe97d4abe89562e772b4d996e581" name="tempCellX" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="a76113b0742d0414d8eaada10c8578eb5581" name="tempCellY" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="ac085ac4aa1a14ab4b01e5ef7348b88b0581" name="viewX" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="a459f60464f5041e2be82e5d6008abc97581" name="viewY" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="af53e8f5d1e3e48dd9974c7fb25983d91581" name="viewXrest" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="a9c15d4dc637d441496ae60480ed3580d581" name="viewYrest" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="a1493fd19bbdf45e0999c62d691a22422581" name="endposreached" type="int" type-id="int" visibility="package" abstract="false" virtual="false" default-value="0" />
        <attribute id="a3fde68a9d2464ecd9a3123b8952f408c581" name="endCell" type="Cell" type-id="Cell" visibility="private" abstract="false" virtual="false" />
        <attribute id="a1483d6a242914dee9cb2a0a6420d26c7581" name="startCell" type="Cell" type-id="Cell" visibility="private" abstract="false" virtual="false" />
        <attribute id="a7da7b1f16a224574b8005fa206e3678c581" name="phaseInt" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="a0eb0d5ad134448f381b180b857398d51581" name="state" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" />
        <attribute id="acdc83328304944589b508454c40bc53f581" name="endPosDirLetter" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" />
        <attribute id="a3809f4f8b9e3444c985a05634632d286581" name="turnPhi" type="int" type-id="int" visibility="package" abstract="false" virtual="false" default-value="0" />
        <attribute id="aad4a9ccbf4bc4ddbb41ae1acd5e5790c581" name="obstacleOccured" type="Boolean" type-id="Uml.Boolean" visibility="package" abstract="false" virtual="false" default-value="false" />
        <attribute id="ae2e4198aa68e4e9eb5ef2d72ff0d676b581" name="alternativeRoute" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" default-value="null" />
        <attribute id="ad479618e4571422e8f1e8a9223d98a68581" name="specialdrive" type="Boolean" type-id="Uml.Boolean" visibility="package" abstract="false" virtual="false" default-value="false" />
        <attribute id="ab5297d5151f640e6a4355426217a9eb5581" name="secureTime" type="long" type-id="long" visibility="private" abstract="false" virtual="false" />
        <attribute id="a7e2686f99d06436383461f761af1ce22581" name="secureTime2" type="long" type-id="long" visibility="private" abstract="false" virtual="false" />
        <attribute id="a1370c4cf75c14c75b22b464446cbd828581" name="directionFree" type="boolean" type-id="boolean" visibility="package" abstract="false" virtual="false" default-value="true" />
        <attribute id="a1d12052865134482bed2cedad562b127581" name="beginning" type="boolean" type-id="boolean" visibility="package" abstract="false" virtual="false" default-value="true" />
      </attributes>
      <operations>
        <operation id="odf1b3ac029f34e49be008a96cfd432e2581" name="Drive" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        this.comView = ComView.getInstance();
        this.fc = FieldCommander.getInstance();
        this.lcb = LaserControlledBreaking.getInstance();
        this.sM = StateMachine.getInstance();
        lcb.start();}
    /*
     Pendenzen:
     falls eine endzelle in der selben Achse angelegt ist, jedoch durch maschinen getrennt, so muss diese trotzdem angefahren werden können
     ^ ev verknüpfen mit ausweichen - allerdings nur 1 zelle und nicht 2!
     Übergabe der Zielkoordinaten muss implementiert werden
     korrekturX und korrekturY müsen definiert werden!
     Wenn Soll und IST maximal 10 mm voneinander abweichen nach 20 Sek trotzdem step weiter.
     am Programmende Check 0 senden!
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ofc62641788394da0b1fa235ad16a9e91583" name="run" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined"> throws InterruptedException{
        lcb.setRun(true);
        if (/*beginning == */true){
            endposreached = 0;
            startPosX = this.startCell.getX();
            startPosY = this.startCell.getY();
            endTargetX = this.endCell.getX();
            endTargetY = this.endCell.getY();
            tempTargetX = endCell.getRealX() - startCell.getRealX();
            tempTargetY = endCell.getRealY() - startCell.getRealY();
            tempCellX = endCell.getX() - startCell.getX();
            tempCellY = endCell.getY() - startCell.getY();
            beginning = false;
            /*
             System.out.println(tempTargetX);
             System.out.println(tempTargetY);
             System.out.println(startCell.getX());
             System.out.println(startCell.getY());
             System.out.println(endCell.getX());
             System.out.println(endCell.getY());
             System.out.println("StartX" + startCell.getRealX());
             System.out.println("StartY" + startCell.getRealY());
             System.out.println("EndX" + endCell.getRealX());
             System.out.println("EndY" + endCell.getRealY());
             System.out.println(endCell.getDirLetter());
             */

            if ((startPosX == endTargetX) &amp;&amp; (startPosX % 2 == 0) &amp;&amp; (!(startPosY == endTargetY))){
                alternativeRoute = "Xstraight";}
            if ((startPosY == endTargetY) &amp;&amp; (startPosY % 2 == 0) &amp;&amp; (!(startPosX == endTargetX))){
                alternativeRoute = "Ystraight";}}
        //Ausweichen
        if (alternativeRoute != null) //SONDERCASE/HINDERNIS AUFGETRETEN{
            switch (alternativeRoute){
                case ("Ystraight"):
                    tempTargetX = fieldsize;
                    tempCellX = 1;
                    alternativeRoute = null;
                    break;
                case ("Xstraight"):
                    tempTargetY = fieldsize;
                    tempCellY = 1;
                    alternativeRoute = null;
                    break;
                case ("Y"):
                    tempTargetX = 2 * fieldsize;
                    tempCellX = 2;
                    alternativeRoute = null;
                    break;
                case ("X"):
                    tempTargetY = 2 * fieldsize;
                    tempCellY = 2;
                    alternativeRoute = null;
                    break;
                default:}}

        //-----------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------- Starting in X direction ---------------------------------------------------------------------------------------
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        if ((((startPosY % 2) == 1) || startPosY == 0) &amp;&amp; (startPosX != endTargetX))

        //&lt;editor-fold defaultstate="collapsed" desc="Verfahren in X-Achse"&gt;
        //vergleicht, ob sich der Roboter in einem Gang aufhält, in dem er in X Richtig fahren kann{

            //&lt;editor-fold defaultstate="collapsed" desc="Ausrichtung nach X-Achse"&gt;
            if (startPosX &gt; endTargetX &amp;&amp; !(startPosPhi == 270)){
                sendTurnAngle("S");}
            if (startPosX &lt; endTargetX &amp;&amp; !(startPosPhi == 90)){
                sendTurnAngle("N");}
            //&lt;/editor-fold&gt;
            if (directionFree == true){
                if (((tempTargetX % (2 * fieldsize) == 0) &amp;&amp; (startCell.getX() % 2 == 1)) || ((tempTargetX % (2 * fieldsize) != 0) &amp;&amp; (startCell.getX() % 2 == 0))){
                    //verfahren win X wenn das Zielfeld nicht auf Maschinenhöhe ist
                    sendAndWait(tempTargetX, "X");
                    //v&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;Nicht so ganz - wenn Hinderniss koordinate anders Setzen
                    if (alternativeRoute == null){
                        startPosX = startPosX + tempCellX;} else{
                        if (startPosPhi == 270){
                            runback("S");}
                        if (startPosPhi == 90){
                            runback("N");}}}
                if (((tempTargetX % (2 * fieldsize) != 0) &amp;&amp; (startCell.getX() % 2 == 1)) || ((tempTargetX % (2 * fieldsize) == 0) &amp;&amp; (startCell.getX() % 2 == 0))){
                    //&lt;editor-fold defaultstate="collapsed" desc="Verfahren in X wenn das Zeilfeld auf Maschinenhöhe ist"&gt;
                    if (startPosY == endTargetY||(startPosX==1&amp;&amp;endTargetX==0)){
                        sendAndWait(tempTargetX, "X");
                        if (alternativeRoute == null){
                            startPosX = startPosX + tempCellX;} else{
                            if (startPosPhi == 270){
                                runback("S");}
                            if (startPosPhi == 90){
                                runback("N");}}} else{
                        if (tempTargetX &lt; 0){
                            tempTargetX = tempTargetX * (-1);

                            do{
                                 sM.readAndSendPhase();
                                // Mitgegebene Wete sind(int Check,int X,int Y,int Phi)
                                comView.setKoords((tempTargetX - (fieldsize - 1)), 0, 0);} while (comView.getReady() == 0);
                            if (alternativeRoute == null){
                                startPosX = startPosX + tempCellX - 1; //BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB geht nicht bei beiden Feldseiten!
                                tempTargetX = fieldsize;} else{
                                if (startPosPhi == 270){
                                    runback("S");}
                                if (startPosPhi == 90){
                                    runback("N");}}} else{

                            do{
                                // Mitgegebene Wete sind(int Check,int X,int Y,int Phi)
                                  sM.readAndSendPhase();
                                comView.setKoords((tempTargetX - (fieldsize - 1)), 0, 0);} while (comView.getReady() == 0);
                            if (alternativeRoute == null){
                                startPosX = startPosX + tempCellX - 1;; //BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB} else{
                                if (startPosPhi == 270){
                                    runback("S");}
                                if (startPosPhi == 90){
                                    runback("N");}}}}
                    //&lt;/editor-fold&gt;}} else{
                /*
                 }
                 if (endTargetX % 2 == 0)
                 {
                 //&lt;editor-fold defaultstate="collapsed" desc="Zurückfahren wenn in "Sackgasse""&gt;
                 check = 1;
                 do
                 {
                 turnPhi = 180;
                 comView.setKoords(check, 0, 0, turnPhi);
                 //check = 0;
                 //turn arround
                 } while (comView.getReady() == 0);
                 // Run a Field Back
                 check = 1;
                 do
                 {
                 comView.setKoords(check, korrekturX, 0, 0);
                 //check = 0;
                 } while (comView.getReady() == 0);
                 //&lt;/editor-fold&gt;
                 }
                 */}
            /*Hinderniss aufgetreten__________________________________
             metode um über LCB zu steuern!
             */
            //&lt;/editor-fold&gt;}
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------- Starting in Y direction ---------------------------------------------------------------------------------------
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        if ((startPosX % 2) == 1 &amp;&amp; (startPosY != endTargetY)){

            //&lt;editor-fold defaultstate="collapsed" desc="Ausrichtung nach Y-Achse"&gt;
            if (startPosY &gt; endTargetY &amp;&amp; !(startPosPhi == 0)){
                sendTurnAngle("W");}
            if (startPosY &lt; endTargetY &amp;&amp; !(startPosPhi == 180)){
                sendTurnAngle("E");}
            //&lt;/editor-fold&gt;
            if (directionFree == true){
                if (((tempTargetY % (2 * fieldsize) == 0) &amp;&amp; (startCell.getY() % 2 == 1)) || ((tempTargetY % (2 * fieldsize) != 0) &amp;&amp; (startCell.getY() % 2 == 0))){
                    //verfahren in Y wenn das Zielfeld nicht auf Maschinenhöhe ist
                    sendAndWait(tempTargetY, "Y");
                    if (alternativeRoute == null){
                        startPosY = startPosY + tempCellY;} else{
                        if (startPosPhi == 0){
                            runback("W");}
                        if (startPosPhi == 180){
                            runback("E");}}}
                if (((tempTargetY % (2 * fieldsize) != 0) &amp;&amp; (startCell.getY() % 2 == 1)) || ((tempTargetY % (2 * fieldsize) == 0) &amp;&amp; (startCell.getY() % 2 == 0))){
                    //&lt;editor-fold defaultstate="collapsed" desc="Verfahren in Y wenn das Zeilfeld auf Maschinenhöhe ist"&gt;
                    if (startPosX == endTargetX||(startPosY==1&amp;&amp;endTargetY==0)){
                        sendAndWait(tempTargetY, "Y");
                        if (alternativeRoute == null){
                            startPosY = startPosY + tempCellY;} else{
                            if (startPosPhi == 0){
                                runback("W");}
                            if (startPosPhi == 180){
                                runback("E");}}} else{
                        if (tempTargetY &lt; 0){
                            tempTargetY = tempTargetY * (-1);

                            do{
                                   sM.readAndSendPhase();
                                // Mitgegebene Wete sind(int Check,int X,int Y,int Phi)
                                comView.setKoords((tempTargetY - (fieldsize - 1)), 0, 0);} while (comView.getReady() == 0);
                            if (alternativeRoute == null){
                                startPosY = endTargetY - 1;
                                tempTargetY = fieldsize;} else{
                                if (startPosPhi == 0){
                                    runback("W");}
                                if (startPosPhi == 180){
                                    runback("E");}}

                            do{
                                       sM.readAndSendPhase();
                                // Mitgegebene Wete sind(int Check,int X,int Y,int Phi)
                                comView.setKoords((tempTargetY - (fieldsize - 1)), 0, 0);} while (comView.getReady() == 0);
                            if (alternativeRoute == null){
                               startPosY = startPosY + tempCellY - 1;;} else{
                                /*
                                 RUNBACK
                                 */}}
                        do{
                                // Mitgegebene Wete sind(int Check,int X,int Y,int Phi)
                                   sM.readAndSendPhase();
                                comView.setKoords((tempTargetY - (fieldsize - 1)), 0, 0);} while (comView.getReady() == 0);
                            if (alternativeRoute == null){
                                startPosY = startPosY + tempCellY - 1;//BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB} else{
                                if (startPosPhi == 180){
                                    runback("E");}
                                if (startPosPhi == 0){
                                    runback("W");}}
                        //&lt;/editor-fold&gt;}} else{
                    
//NOT SUPPORTED JET_______________________________________________________________________________________________________________________________________________________________________________________
               /*     if (endTargetX % 2 == 0)
                     {
                     //&lt;editor-fold defaultstate="collapsed" desc="Zurückfahren wenn in "Sackgasse""&gt;
                     check = 1;
                     do
                     {
                     turnPhi = 180;
                     comView.setKoords(check, 0, 0, turnPhi);
                     //check = 0;
                     //turn arround
                     } while (comView.getReady() == 0);
                     // Run a Field Back
                     check = 1;
                     do
                     {
                     comView.setKoords(check, korrekturX, 0, 0);
                     //check = 0;
                     } while (comView.getReady() == 0);
                     
                     }*/
                    //&lt;/editor-fold&gt;}

                // Drehen richtung Maschine}}
        if (endTargetX == startPosX &amp;&amp; endTargetY == startPosY){
            //&lt;editor-fold defaultstate="collapsed" desc="An Zielposition zur Maschine drehen"&gt;
            if (endCell.getDirLetter() != null){
                sendTurnAngle(endCell.getDirLetter());}

            //&lt;/editor-fold&gt;
            endposreached = 1;
            startCell = endCell;
            lcb.setRun(false);
            beginning = true;}
        setStartCell(startPosX, startPosY);}
    //&lt;/editor-fold&gt;
    //--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    //------------------------------------------------------- ENDE DER RUN METODE ----------------------------------------------------------------------------------------------------
    //--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</source-code>
          </source-codes>
        </operation>
        <operation id="of0f54f98576f4951b092d63770264be1586" name="goStart" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="currX" type="int" type-id="int" default-value="" />
            <parameter id="" name="currY" type="int" type-id="int" default-value="" />
            <parameter id="" name="dir" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws InterruptedException{
        lcb.setRun(false);
        sendAndWait(startCell.getRealY() - currY, "Y");
        sendTurnAngle(dir);
        if (startCell.getRealX() - currX &lt; 0){
            sendAndWait(-startCell.getRealX() + currX, "X");} else{
            sendAndWait(startCell.getRealX() - currX, "X");}}</source-code>
          </source-codes>
        </operation>
        <operation id="oe4c3936755dc4192b525db0ab2eb7495586" name="sendAndWait" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="targetposX" type="int" type-id="int" default-value="" />
            <parameter id="" name="travelDir" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws InterruptedException //Sendet Koordinaten ans Roboview und wartet darauf, dass das Roboview sein Ziel erreicht hat{

        int targetfieldX = targetposX;
        if (targetfieldX &lt; 0){
            targetfieldX = (-1) * targetfieldX;}
        do{
            if (obstacleOccured == true){
                switch (travelDir){
                    case "X":
                        viewX = comView.getxAktuell();
                        comView.setKoords(comView.getxAktuell(), 0, 0);
                        alternativeRoute = "X";
                        break;
                    case "Y":
                        viewY = comView.getyAktuell();
                        comView.setKoords(comView.getyAktuell(), 0, 0);
                        alternativeRoute = "Y";
                        break;
                    default:}} else{
                       sM.readAndSendPhase();
                // Mitgegebene Wete sind(int Check,int X,int Y,int Phi)
                comView.setKoords(targetfieldX, 0, 0);}} while (comView.getReady() == 0);
        do{
            comView.setGo(1);} while (comView.getEnde() == 0);
        comView.setGo(0);
    secureTime = System.currentTimeMillis();
            do{
                secureTime2 = System.currentTimeMillis();} while (secureTime2 - secureTime &lt;= 150);}</source-code>
          </source-codes>
        </operation>
        <operation id="o7ba0685469034241b28f681758ba54f7586" name="sendTurnAngle" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="getCase" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws InterruptedException //Metode zum Umrechnen von Absolut in Inkrementalkoordinaten Als Mitgabewert wird ein String mit N/E/S/W Verwendet{
        switch (getCase){
            case "N":
                lcb.setRun(false);

                do{
                    turnPhi = -(0 - startPosPhi + 90);
                    if (turnPhi &lt; - 180){
                        turnPhi = 360 + turnPhi;
                        /*
                         * if (turnPhi &gt;= 360)
                         {
                         turnPhi = turnPhi - 360;
                         }
                         */}

                    // Mitgegebene Wete sind(int Check,int X,int Y,int Phi)
                          sM.readAndSendPhase();
                    comView.setKoords(0, 0, turnPhi);} while (comView.getReady() == 0);
                do{
                    comView.setGo(1);} while (comView.getEnde() == 0);
                comView.setGo(0);
                startPosPhi = 90;
                lcb.setRun(true);
                break;
            case "E":
                lcb.setRun(false);

                do{
                    turnPhi = -(0 - startPosPhi + 180);
                    if (turnPhi &lt; 180){
                        turnPhi = -360 + turnPhi;
                        /*
                         if (turnPhi &gt;= 360)
                         {
                         turnPhi = turnPhi - 360;
                         }
                         * */}

                       sM.readAndSendPhase();
                    // Mitgegebene Wete sind(int Check,int X,int Y,int Phi)
                    comView.setKoords(0, 0, turnPhi);} while (comView.getReady() == 0);
                do{
                    comView.setGo(1);} while (comView.getEnde() == 0);
                comView.setGo(0);
                startPosPhi = 180;
                lcb.setRun(true);
                break;
            case "S":
                lcb.setRun(false);

                do{
                    turnPhi = -(0 - startPosPhi + 270);
                    if (turnPhi &lt; 180){
                        turnPhi = -360 + turnPhi;
                        /*
                         if (turnPhi &gt;= -360)
                         {
                         turnPhi = turnPhi - 360;
                         }
                         */}

                             sM.readAndSendPhase();
                    // Mitgegebene Wete sind(int Check,int X,int Y,int Phi)
                    comView.setKoords(0, 0, turnPhi);} while (comView.getReady() == 0);
                do{
                    comView.setGo(1);} while (comView.getEnde() == 0);
                comView.setGo(0);
                startPosPhi = 270;
                lcb.setRun(true);
                break;
            case "W":
                lcb.setRun(false);

                do{
                    turnPhi = -(0 - startPosPhi);
                    if (turnPhi &lt; 180){
                        turnPhi = -360 + turnPhi;
                        /*if (turnPhi &gt;= 360)
                         {
                         turnPhi = turnPhi - 360;
                         }*/}
                                 sM.readAndSendPhase();
                    // Mitgegebene Wete sind(int Check,int X,int Y,int Phi)
                    comView.setKoords(0, 0, turnPhi);} while (comView.getReady() == 0);
                do{
                    comView.setGo(1);} while (comView.getEnde() == 0);
                comView.setGo(0);
                startPosPhi = 0;
                lcb.setRun(true);
                break;
            default:
                lcb.setRun(false);

                do{
                    turnPhi = (0 - startPosPhi + 270);
                    if (turnPhi &lt; - 180){
                        turnPhi = 360 + turnPhi;
                        if (turnPhi &gt;= 360){
                            turnPhi = turnPhi - 360;}}

                    // Mitgegebene Wete sind(int Check,int X,int Y,int Phi)
                              sM.readAndSendPhase();
                    comView.setKoords(0, 0, turnPhi);} while (comView.getReady() == 0);
                do{
                    comView.setGo(1);} while (comView.getEnde() == 0);
                comView.setGo(0);
                startPosPhi = 270;
                lcb.setRun(true);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o3b66ca3de2cc4cf887bfcb7dde72c929586" name="runback" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="facingdir" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws InterruptedException{

        viewXrest = viewX;
        viewYrest = viewY;
        viewX = viewX % fieldsize;
        viewY = viewY % fieldsize;
        if (startPosX % 2 == 0){
            if ((viewXrest - viewX) % (2 * fieldsize) == 0){
                viewX = viewX + fieldsize;}}
        if (startPosX % 2 == 1){
            if ((viewXrest - viewX) % (2 * fieldsize) &gt; 0){
                viewX = viewX + fieldsize;}}
        if (startPosY % 2 == 1){
            if ((viewYrest - viewY) % (2 * fieldsize) == 0){
                viewY = viewY + fieldsize;}}
        if (startPosY % 2 == 0){
            if ((viewYrest - viewY) % (2 * fieldsize) &gt; 0){
                viewY = viewY + fieldsize;}}
        switch (facingdir){
            case ("N"):
                sendTurnAngle("S");
                sendAndWait(viewX, "X");
                sendTurnAngle("N");
                alternativeRoute = "X";
                startPosX=startPosX-((int)(viewXrest-viewX)/fieldsize);
                break;
            case ("E"):
                sendTurnAngle("W");
                sendAndWait(viewY, "Y");
                sendTurnAngle("E");
                alternativeRoute = "Y";
                startPosY=startPosY-((int)(viewYrest-viewY)/fieldsize);
                break;
            case ("S"):
                sendTurnAngle("N");
                sendAndWait(viewX, "X");
                sendTurnAngle("S");
                alternativeRoute = "X";
                startPosX=startPosX+((int)(viewXrest-viewX)/fieldsize);
                break;
            case ("W"):
                sendTurnAngle("E");
                sendAndWait(viewY, "Y");
                sendTurnAngle("W");
                alternativeRoute = "Y";
                startPosY=startPosY+((int)(viewYrest-viewY)/fieldsize);
                break;}}

    /*---------------------------------------------------------------------------------------------------------------------------
     ---------------------------------------------------- GET and SET -----------------------------------------------------------
     ----------------------------------------------------------------------------------------------------------------------------
     */
    //&lt;editor-fold defaultstate="collapsed" desc="GET and SET"&gt;</source-code>
          </source-codes>
        </operation>
        <operation id="oe1ca67153c2247f58ec27bf3c59baa22586" name="getEndPosReached" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return endposreached;}</source-code>
          </source-codes>
        </operation>
        <operation id="ob257083241644df0acd2479a462a8da0586" name="getStartPosX" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return startPosX;}</source-code>
          </source-codes>
        </operation>
        <operation id="oaa398cec68bc4d9c84881aa5b94704f6586" name="setStartPosX" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="startPosX" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.startPosX = startPosX;}</source-code>
          </source-codes>
        </operation>
        <operation id="oeb1331c9e1bb49ca842c6d9b58ccd319586" name="getStartPosY" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return startPosY;}</source-code>
          </source-codes>
        </operation>
        <operation id="ob00717e7487d46dea216ad908ebe27b5587" name="setStartPosY" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="startPosY" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.startPosY = startPosY;}</source-code>
          </source-codes>
        </operation>
        <operation id="o4ccf5be58d434be4a045d3cf693a9b39587" name="getStartPosPhi" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return startPosPhi;}</source-code>
          </source-codes>
        </operation>
        <operation id="od4b2470ef66c456b88ebc9eb951aa571587" name="setStartPosPhi" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="startPhi" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.startPosPhi = startPhi;}</source-code>
          </source-codes>
        </operation>
        <operation id="o7eeb283c01e14b329a8567dc60f5cdee587" name="setEndTarget" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="cell" type="Cell" type-id="Cell" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        endCell = cell;}</source-code>
          </source-codes>
        </operation>
        <operation id="o922b5e7415ee44dda78590841c05778d587" name="setStartCell" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="cell" type="Cell" type-id="Cell" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        startCell = cell;}</source-code>
          </source-codes>
        </operation>
        <operation id="o09039cb285d7454daecf08b189fba505587" name="setStartCell" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="x" type="int" type-id="int" default-value="" />
            <parameter id="" name="y" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        startCell = fc.cell[x[y;}</source-code>
          </source-codes>
        </operation>
        <operation id="o1b3bb615df6843f9ba3b8735d065b521587" name="setEndTarget" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="x" type="int" type-id="int" default-value="" />
            <parameter id="" name="y" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        endCell = fc.cell[x[y;}</source-code>
          </source-codes>
        </operation>
        <operation id="ofb333fa2374b4d1abcff37d15c91261d587" name="setEndTarget" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="machine" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        endCell = fc.machineMap.get(machine);}</source-code>
          </source-codes>
        </operation>
        <operation id="o8e3614d47ed549b7b0905defddf40e3b587" name="setEndPosDirLetter" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="dirLetter" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.endPosDirLetter = dirLetter;}</source-code>
          </source-codes>
        </operation>
        <operation id="o65ce9353c2e6403e9193344b6d7e775e587" name="setNewTempTarget" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="x" type="int" type-id="int" default-value="" />
            <parameter id="" name="y" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        tempTargetX = x;
        tempTargetY = y;}</source-code>
          </source-codes>
        </operation>
        <operation id="o03f1754306544a36b05b0c08899720af587" name="wayX" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="oldTarget" type="int" type-id="int" default-value="" />
            <parameter id="" name="newTarget" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        tempTargetX = oldTarget - newTarget;
        return tempTargetX;}</source-code>
          </source-codes>
        </operation>
        <operation id="o493f44f814f44da0b3bab8df1ed544fb587" name="wayY" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="oldTarget" type="int" type-id="int" default-value="" />
            <parameter id="" name="newTarget" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        tempTargetY = newTarget - oldTarget;
        return tempTargetY;}</source-code>
          </source-codes>
        </operation>
        <operation id="o9a7ee662bad04103b3e13cab84e40b8c587" name="setObstacleOccured" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="obstacle" type="Boolean" type-id="Uml.Boolean" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        obstacleOccured = obstacle;}
//&lt;/editor-fold&gt;
    // --------------------------------------------------------------------------------------------------------------------------------------------------
    // ---------------------------------------------------- PSVM zum Testen - einfach auskommentieren im Verbund ----------------------------------------
    // --------------------------------------------------------------------------------------------------------------------------------------------------</source-code>
          </source-codes>
        </operation>
        <operation id="ob6adb73e5c2e4ee9b2a480ed6bedc0f3587" name="main" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws SocketException, IOException, InterruptedException{
        ComView comView = ComView.getInstance();
        comView.start();
        Drive drive = new Drive();
        drive.setStartCell(1, 1);
        drive.setStartPosPhi(180);
       //drive.runback("E");

        drive.setEndTarget(6, 0);
        do{
            drive.run();} while (drive.getEndPosReached() == 0);
         System.out.println("End");
/*
        drive.setEndTarget(5, 5);
        do
        {
            drive.run();

        } while (drive.getEndPosReached() == 0);
       
        /*
         drive.setEndTarget(7, 7);
         do
         {
         drive.run();
         } while (drive.getEndPosReached() == 0);
         */}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di959059739736727012" cid="C007" type="class" name="Foo" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="Pa5fd30480c484e73a79c16645dbe273a" creation-date="02/18/2014 15:12:19">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="ad332eb20a57c436d94285e50dc1a68eb935" name="panel" type="InterfacePanel" type-id="InterfacePanel" visibility="private" abstract="false" virtual="false" />
      </attributes>
      <operations>
        <operation id="oa18c47342ea345b783840fe79c1f1d31935" name="Foo" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="panel" type="InterfacePanel" type-id="InterfacePanel" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        
        this.panel = panel;}
 
        /**
         * Fügt den String dem Textfeld hinzu
         * 
         * @param str
         */</source-code>
          </source-codes>
        </operation>
        <operation id="o2e1f42d09a514ad4856053d96b10de7e935" name="onEvent" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="str" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
            panel.logText.append(str + "\n");
            frame.panel.scrollDown();}}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di319964337368679129" cid="C008" type="class" name="InterfacePanel" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="Pa5fd30480c484e73a79c16645dbe273a" creation-date="02/18/2014 15:12:19">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a7dad25d99a0644948c839bcbea71991b943" name="logText" type="JTextArea" type-id="JTextArea" visibility="public" abstract="false" virtual="false" />
        <attribute id="a7aba475f7ebd4f79be7f78303395882b944" name="scrollPane" type="JScrollPane" type-id="JScrollPane" visibility="package" abstract="false" virtual="false" />
        <attribute id="a6c8241b096464104926acc3306cf90cc944" name="pointText" type="JTextArea" type-id="JTextArea" visibility="package" abstract="false" virtual="false" />
        <attribute id="a7e1252f583d441408668b7f277c6af22944" name="stateText" type="JTextArea" type-id="JTextArea" visibility="package" abstract="false" virtual="false" />
        <attribute id="a229d01bb66bb41f6bfdffb1aaaa112b6944" name="phaseText" type="JTextArea" type-id="JTextArea" visibility="package" abstract="false" virtual="false" />
        <attribute id="aed8dc097a9f442be8bcc2807075c9a38944" name="timeText" type="JTextArea" type-id="JTextArea" visibility="package" abstract="false" virtual="false" />
        <attribute id="ad86fd60775be4d0d87cf5549136708d4944" name="logLabel" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="a9bb43d82ae434709927c49fd7b21d983944" name="pointLabel" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="ac0212f14d96e411e8420e77a9ea49824944" name="stateLabel" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="a6ede0b01bd564cf8933b1cfaff9109f6944" name="phaseLabel" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="a687aea0c716847e08e61dc2d75300ccd944" name="timeLabel" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="a68279dd7290941bbbc4c5e4fec6afaa6944" name="m1Label" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="afe2494b046104bb99e40eb9cfbc73ddc944" name="m2Label" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="acf7d71ba470b4eee865ee406b5509dfa944" name="m3Label" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="a572bbd89ca8346fc9029c88218f74fb5944" name="m4Label" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="a680b1f0c7af74fd0aed27bcea92d2d9a944" name="m5Label" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="a1bbeeabd83374bc58f7bffafb8370cb1944" name="m6Label" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="a14f8e22fdb784a619201397823375e4c944" name="m7Label" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="a61a8c728f46b4e8ba07e7e0ae693498f944" name="m8Label" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="a30532c39f6734e65b6b2e86781291a24944" name="m9Label" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="ab981a4b004bc47929a28be9a1b300bbd944" name="m10Label" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="a60840c5b828245af9cd2e093496077d4944" name="start" type="JButton" type-id="JButton" visibility="package" abstract="false" virtual="false" />
        <attribute id="a42a63800ea0648d883256eb623d63e99944" name="stop" type="JButton" type-id="JButton" visibility="package" abstract="false" virtual="false" />
      </attributes>
      <operations>
        <operation id="o443631aeeea947f09210906c1b51c22d944" name="InterfacePanel" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="x" type="int" type-id="int" default-value="" />
            <parameter id="" name="y" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        
        
        setLayout(null);
        setSize(x, y);
        setLocation(0, 0);
        setBackground(Color.CYAN);
        
        //
        /*
        m1Label = new JLabel("PUNKTE:");
        pointLabel.setSize(100, 45);
        pointLabel.setLocation(120, 0);
        */
        logText = new JTextArea();
        logText.setLineWrap(true);
        logText.setEditable(false);
        logText.setVisible(true);
        
        pointLabel = new JLabel("PUNKTE:");
        pointLabel.setSize(100, 45);
        pointLabel.setLocation(120, 0);
        
        pointText = new JTextArea();
        pointText.setLineWrap(true);
        pointText.setEditable(false);
        pointText.setVisible(true);
        pointText.setSize(100, 25);
        pointText.setLocation(120, 30);
        
        stateLabel = new JLabel("STATE:");
        stateLabel.setSize(100, 45);
        stateLabel.setLocation(10, 0);
        
        stateText = new JTextArea();
        stateText.setLineWrap(true);
        stateText.setEditable(false);
        stateText.setVisible(true);
        stateText.setSize(100, 25);
        stateText.setLocation(10, 30);
        
        phaseLabel = new JLabel("PHASE:");
        phaseLabel.setSize(100, 45);
        phaseLabel.setLocation(10, 50);
        
        phaseText = new JTextArea();
        phaseText.setLineWrap(true);
        phaseText.setEditable(false);
        phaseText.setVisible(true);
        phaseText.setSize(100, 25);
        phaseText.setLocation(10, 80);
        
        timeLabel = new JLabel("PHASE TIME:");
        timeLabel.setSize(100, 45);
        timeLabel.setLocation(10, 100);
        
        timeText = new JTextArea();
        timeText.setLineWrap(true);
        timeText.setEditable(false);
        timeText.setVisible(true);
        timeText.setSize(100, 25);
        timeText.setLocation(10, 130);
        
        start = new JButton();
        start.setText("START");
        start.setSize(100, 50);
        start.setLocation(10, 340);
        start.addMouseListener(this);
        
        stop = new JButton();
        stop.setText("STOP");
        stop.setSize(100, 50);
        stop.setLocation(110, 340);
        stop.addMouseListener(this);
        
        scrollPane = new JScrollPane(logText);
        scrollPane.setSize(370, 350);
        scrollPane.setLocation(400, 50);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
        
        logLabel = new JLabel("LOG:");
        logLabel.setSize(100, 45);
        logLabel.setLocation(400, 10);

        add(stop);
        add(pointLabel);
        add(pointText);
        add(phaseLabel);
        add(stateLabel);
        add(timeLabel);
        add(logLabel);
        add(start);
        add(scrollPane, BorderLayout.CENTER);
        add(stateText);
        add(phaseText);
        add(timeText);
        setVisible(true);}

   /**
    * 
    * @param in
    * Schreibt die mitgegebene Nachricht in das Log-Fenster
    */</source-code>
          </source-codes>
        </operation>
        <operation id="o71d9c775adea44bb8116569af485bff5944" name="printLog" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="in" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
       // Setzt das Log-Panel immer ganz nach unten
        
        
        // Schreibt eine Nachricht in das Log-Fenster
        
        logText.append(in + "\n");
        scrollDown();}</source-code>
          </source-codes>
        </operation>
        <operation id="oce4185d0d0ea49efa5c25b525c212c42944" name="scrollDown" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
   /*
    int max;
   
        max = scrollPane.getVerticalScrollBar().getMaximum();
        scrollPane.getVerticalScrollBar().setValue( max );
        scrollPane.repaint();
        */}
    
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="ob3e701097f1e4b9683cdf4fc9a816149944" name="mouseClicked" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="e" type="MouseEvent" type-id="MouseEvent" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        
        if (e.getButton() == MouseEvent.BUTTON1){
            
            if (e.getClickCount() == 1){
                
                // connect
                if (e.getSource() == start){
                    try{
                        Main.startServer();} catch (SocketException ex){
                        Logger.getLogger(InterfacePanel.class.getName()).log(Level.SEVERE, null, ex);}}
                
                 // disconect
                if (e.getSource() == stop){
                    Main.stopServer();}}}}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o4f4deb2ee33048f6bb7f91f2237cb847944" name="mousePressed" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="e" type="MouseEvent" type-id="MouseEvent" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oee3ec7d9c8ba4ee1b011d71096fd15d0944" name="mouseReleased" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="e" type="MouseEvent" type-id="MouseEvent" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o2a95ae4d3dcc490dbee19992e8010fde944" name="mouseEntered" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="e" type="MouseEvent" type-id="MouseEvent" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o79a3e2da16c34b4cb6af2cbfb9c16ee0944" name="mouseExited" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="e" type="MouseEvent" type-id="MouseEvent" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oa306340b69974dd48b90a77ccad538d0944" name="stateChanged" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="e" type="ChangeEvent" type-id="ChangeEvent" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{}
    
           @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o2f24e8f664ca46d4a4cb3f46fe89f71f944" name="update" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="o" type="Observable" type-id="Observable" default-value="" />
            <parameter id="" name="arg" type="Object" type-id="Uml.Object" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        String[ send = (String[) arg;
        
     String gamePoints = send[0;
     String gamePhase = send[1;
     String gameState = send[2;
     String gameTime = send[3;
     
     
    
    pointText.setText(gamePoints);
    phaseText.setText(gamePhase);
    stateText.setText(gameState);
    timeText.setText(gameTime);}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di402266716103103685" cid="C009" type="class" name="RefboxFrame" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="Pa5fd30480c484e73a79c16645dbe273a" creation-date="02/18/2014 15:12:19">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="ac9c4682ca057420da017867d21e5e1ad948" name="sizeX" type="int" type-id="int" visibility="package" abstract="false" virtual="false" default-value="400" />
        <attribute id="a61e63c49417c4895bd4f806e16284dc3948" name="sizeY" type="int" type-id="int" visibility="package" abstract="false" virtual="false" default-value="400" />
        <attribute id="a3bf5a5d5ea3e4535b475e02eb3496ab6948" name="applikation" type="JFrame" type-id="JFrame" visibility="package" abstract="false" virtual="false" />
        <attribute id="a31e5467c1b3e46da954f04d3a45c5b20948" name="container" type="Container" type-id="Container" visibility="package" abstract="false" virtual="false" />
        <attribute id="a89fb789247bd4b67a050f24b0b917daf948" name="panel" type="RefboxPanel" type-id="RefboxPanel" visibility="public" abstract="false" virtual="false" />
      </attributes>
      <operations>
        <operation id="o0dc69b9be3d0437a99ef0bcd729343ca948" name="RefboxFrame" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="interfacePanel" type="InterfacePanel" type-id="InterfacePanel" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
          applikation = new JFrame("Refbox");
          container = applikation.getContentPane();
          
          panel = new RefboxPanel(sizeX, sizeY, this, interfacePanel);
      
          
          applikation.setSize(sizeX, sizeY);
          applikation.setLocation(100, 100);
          
          applikation.add(panel);
          applikation.setVisible(true);}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o9badeee5257e4e8c9914b7ffaa4d97f7948" name="actionPerformed" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="e" type="ActionEvent" type-id="ActionEvent" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di796306747467666602" cid="C010" type="class" name="RefboxPanel" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="Pa5fd30480c484e73a79c16645dbe273a" creation-date="02/18/2014 15:12:19">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="acd7a9a87ddff45cda755c05c91f2b264955" name="frame" type="RefboxFrame" type-id="RefboxFrame" visibility="package" abstract="false" virtual="false" />
        <attribute id="a6167f895827940d693800639016366d6955" name="interfacePanel" type="InterfacePanel" type-id="InterfacePanel" visibility="package" abstract="false" virtual="false" />
      </attributes>
      <operations>
        <operation id="o2697e5e3da91412dac0cb675e28ab048955" name="JTextField" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">
    JTextField port = new</source-code>
          </source-codes>
        </operation>
        <operation id="ob76a43d964074c1b9dd8ea0afd951532955" name="JTextField" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">
    JTextField roboname = new</source-code>
          </source-codes>
        </operation>
        <operation id="o23f791c5d35147aeabdf4b9fdc114bfd955" name="JTextField" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">
    
    JButton ok = new</source-code>
          </source-codes>
        </operation>
        <operation id="od5cc1a6a97d94a0095560573e615b9a8955" name="JButton" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <source-codes />
        </operation>
        <operation id="oe58c0e712e2942ddb5c1161e32e3b01f955" name="RefboxPanel" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="sizeX" type="int" type-id="int" default-value="" />
            <parameter id="" name="sizeY" type="int" type-id="int" default-value="" />
            <parameter id="" name="frame" type="RefboxFrame" type-id="RefboxFrame" default-value="" />
            <parameter id="" name="interfacePanel" type="InterfacePanel" type-id="InterfacePanel" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.interfacePanel = interfacePanel;
        this.frame = frame;
        
          setLayout(null);
          setLocation(0, 0);
          setSize(sizeX, sizeY);
          setBackground(Color.MAGENTA);
          
          ip.setText(Main.refBoxIp);
          ip.setLocation(200, 100);
          ip.setSize(180, 40);
          
          port.setText(Main.refBoxPortIn + "");
          port.setLocation(200, 150);
          port.setSize(180, 40);
          
          roboname.setText(Main.name);
          roboname.setLocation(200, 200);
          roboname.setSize(180, 40);
          
          portLabel.setSize(100, 45);
          portLabel.setLocation(100, 150);
          
          nameLabel.setSize(100, 45);
          nameLabel.setLocation(100, 200);
          
          ipLabel.setSize(100, 45);
          ipLabel.setLocation(100, 100);
          
          ok.setText("OK");
          ok.setSize(100, 50);
          ok.setLocation(10, 320);
          ok.addMouseListener(this);
          
          add(roboname);
          add(nameLabel);
          add(port);
          add(portLabel);
          add(ipLabel);
          add(ip);
          add(ok);
          setVisible(true);}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oe7b87a1fa3c44b1086378f0579947949955" name="mouseClicked" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="e" type="MouseEvent" type-id="MouseEvent" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        
        if (e.getButton() == MouseEvent.BUTTON1){
            
            if (e.getClickCount() == 1){
                
                // Zulaufventil
                if (e.getSource() == ok){
                    try{
                        Main.setIpRefbox(ip.getText());
                        Main.setNameRobo(roboname.getText());
                        frame.applikation.dispose();
                        interfacePanel.printLog("Refbox-IP wurde auf " + Main.refBoxIp + ":" + Main.refBoxPortIn + " geändert!");}
                    catch (FileNotFoundException ex){
                        Logger.getLogger(RefboxPanel.class.getName()).log(Level.SEVERE, null, ex);}
                    catch (IOException ex){
                        Logger.getLogger(RefboxPanel.class.getName()).log(Level.SEVERE, null, ex);}}}}}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o474b2ba31934484186fe830adfaab441955" name="mousePressed" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="e" type="MouseEvent" type-id="MouseEvent" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o6c439a57d4404a8aa53eb08bc2af0515955" name="mouseReleased" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="e" type="MouseEvent" type-id="MouseEvent" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o731f0743be2c43d3afd6a5af3ed89d4f955" name="mouseEntered" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="e" type="MouseEvent" type-id="MouseEvent" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oac3fff8ca1cc4d3d94eec97a2eafcf2f955" name="mouseExited" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="e" type="MouseEvent" type-id="MouseEvent" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di611586384219961637" cid="C011" type="class" name="UserFrame" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="Pa5fd30480c484e73a79c16645dbe273a" creation-date="02/18/2014 15:12:19">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="ab46409c0846249d596c29007b3d91117961" name="sizeX" type="int" type-id="int" visibility="package" abstract="false" virtual="false" default-value="800" />
        <attribute id="a105e8dc04451408f9d49cf15d43d1489961" name="sizeY" type="int" type-id="int" visibility="package" abstract="false" virtual="false" default-value="500" />
        <attribute id="af03eca8e36f04981b2cd1c15028d5eb0961" name="applikation" type="JFrame" type-id="JFrame" visibility="package" abstract="false" virtual="false" />
        <attribute id="a31ccfee362ff49209e1abcb2c3627ef7961" name="container" type="Container" type-id="Container" visibility="package" abstract="false" virtual="false" />
        <attribute id="a940d41490ab04e66be975c98f55b8b82961" name="menueLeiste" type="JMenuBar" type-id="JMenuBar" visibility="package" abstract="false" virtual="false" />
        <attribute id="a6a76446589cf4646b65ffa726a0a03e9962" name="datei" type="JMenu" type-id="JMenu" visibility="package" abstract="false" virtual="false" />
        <attribute id="a2499dededba34e569dda7dfdf2c0dd7b962" name="optionen" type="JMenu" type-id="JMenu" visibility="package" abstract="false" virtual="false" />
        <attribute id="a20c5f7bdd646439da66737d0b95991a4962" name="beenden" type="JMenuItem" type-id="JMenuItem" visibility="package" abstract="false" virtual="false" />
        <attribute id="ad9df4238d8da414ca0d68f60eedc935c962" name="refbox" type="JMenuItem" type-id="JMenuItem" visibility="package" abstract="false" virtual="false" />
        <attribute id="a19006414b86d4ec2982341bf8b3b8b08962" name="robo" type="JMenuItem" type-id="JMenuItem" visibility="package" abstract="false" virtual="false" />
        <attribute id="a3485cf1359784e3886fd73127bcbde59962" name="opt" type="RefboxFrame" type-id="RefboxFrame" visibility="public" abstract="false" virtual="false" />
        <attribute id="aa3d53d4e5be149b5afa4b1fe66868a03962" name="panel" type="InterfacePanel" type-id="InterfacePanel" visibility="public" abstract="false" virtual="false" />
      </attributes>
      <operations>
        <operation id="o070aa51909064473a18f636043ff67cc962" name="UserFrame" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
          applikation = new JFrame("ServerSolidus");
          container = applikation.getContentPane();
         
          
          // Menüleiste erzeugen
          menueLeiste = new JMenuBar();
          
          // Menüelemente erzeugen
          datei = new JMenu("Datei");
          optionen = new JMenu("Optionen");
          
          // Untermenüelemente erzeugen
          
          
          beenden = new JMenuItem("Beenden");
          beenden.addActionListener(this);
          refbox = new JMenuItem("Refbox");
          refbox.addActionListener(this);
          robo = new JMenuItem("Robotino");
          robo.addActionListener(this);
          
          
          // Menüelemente hinzufügen
          menueLeiste.add(datei);
          menueLeiste.add(optionen);
          
          // Untermenüelemente hinzufügen
          
          datei.add(beenden);
          optionen.add(refbox);
          optionen.add(robo);

          // Textfeld erzeugen
                 
          
          applikation.add(menueLeiste, BorderLayout.NORTH);
          applikation.setSize(sizeX, sizeY);
          applikation.setLocation(100, 100);
          applikation.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
          
          panel = new InterfacePanel(sizeX, sizeY);
          
          
          applikation.add(panel);
          applikation.setVisible(true);}
     
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o67902c07aa624e15a9f910c216bc0a81962" name="actionPerformed" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="object" type="ActionEvent" type-id="ActionEvent" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
          
          
          if (object.getSource() == beenden){
               System.exit(0);}
          if (object.getSource() == refbox){
              opt = new RefboxFrame(panel);}
          if (object.getSource() == robo){}}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di447097674683975487" cid="C012" type="class" name="ComView" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="Pa5fd30480c484e73a79c16645dbe273a" creation-date="02/18/2014 15:12:19">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="afe5f21d6d5ed405a8b33b013fbc9bac8969" name="counter" type="int" type-id="int" visibility="package" abstract="false" virtual="false" default-value="0" />
        <attribute id="aa0d24ed065604cf490663c751d787396969" name="com" type="UDPServer" type-id="UDPServer" visibility="package" abstract="false" virtual="false" />
        <attribute id="ae21873db6e1a4ea48c67695d7ccf2f4d969" name="serverSocket" type="DatagramSocket" type-id="DatagramSocket" visibility="package" abstract="false" virtual="false" />
        <attribute id="a70e944ee87fe4bdea88c7326d5368037969" name="x" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="ac9a70a1bec7547c9abd142d4702341df969" name="y" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="a49a24864b9d1485982ea975dc4aea1f9969" name="phi" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="acd3e3afa2b554fa89449610cbec8d0cd969" name="check" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="a8069218343b14b34b6afc4bb36f8f22d969" name="station" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="a6b6617be255c4a69b2cc7a38c9c6c3cc969" name="go" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="aa9acc20612974f3f9e584d6b7122f56b969" name="ready" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="a68fba4c71dcf468796df66964a977fae969" name="red" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="a52954bd190374a248067fe4824671f18969" name="orange" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="a9e0f21f115974c4fb0483a635a69ce5a969" name="green" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="a96106cabc8b64aebbf3c462759c8d5df969" name="ende" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="aaa2c84bf20af4025a575705f9e3c311a969" name="run" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" default-value="true" />
      </attributes>
      <operations>
        <operation id="o8cdc8e63b30148379675d415b6781d3e969" name="ComView" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined"> throws SocketException{
        // Reverentieren
        com = new UDPServer();
        
        
       // msg = new int[10];

        x = 0;
        y = 0;
        phi = 0;
        check = 0;
        station = 0;
        go = 0;
        
        ready = 0;
        red = 0;
        orange = 0;
        green = 0;
        ende = 0;}
    
     @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o83c79cd061e14f75b4f401cb9d051c72969" name="run" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        while(run == true){
           
            
            try{
                serverSocket = new DatagramSocket(5000);
                int[ sendKoor ={x, y, phi, station, check, go, 0, 0};

                com.sendViewMessage(sendKoor, "127.0.0.1", 5001);
                
                int[  msg = com.getViewMessagr(serverSocket);
                ready = msg[0;
                red  = msg[1;
                orange = msg[2;
                green = msg[3;
                ende = msg[4;
                
                serverSocket.close();}
            
            catch (Exception ex){
                Logger.getLogger(ComView.class.getName()).log(Level.SEVERE, null, ex);}

            
            System.out.println("-+-+-+-+-+-+-+-+-+-+-+-+- " + ++counter + " -+-+-+-+-+-+-+-+-+-+-+-+-");

            try{
                Thread.sleep(100);}
            
            catch (InterruptedException ex){
                Logger.getLogger(ComView.class.getName()).log(Level.SEVERE, null, ex);}}}

 
// ------------------------- setAllKoor ----------------------------------------</source-code>
          </source-codes>
        </operation>
        <operation id="obc3423967fec4b3096d515793b47c745970" name="setAllKoor" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="xyphi" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{ 
       
       String[ koor = xyphi.split(" ");
	
       check = Integer.valueOf( koor[0);
       x =Integer.valueOf( koor[1);
       y =Integer.valueOf( koor[2);
       phi =Integer.valueOf( koor[3);
           
        System.out.println("&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; SET ALL KOORDINAEN &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;");}</source-code>
          </source-codes>
        </operation>
        <operation id="ob25d3511aecb46e79a971af1511f0773970" name="setGo" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="go" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
            this.go = go;}
      
    /**
     * Gibt die zuletzt gelesenen Lampenfarben zurück: rot,orange,grün
     * 0 = aus, 1 = leuchtet, 2 = blinkt
     * @return 
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ob2b98c98985543bda7b8bc89b86b2a2b970" name="getLamp" type="int[]" type-id="int[]" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        int[ lamp ={red,orange,green};
        return lamp;}</source-code>
          </source-codes>
        </operation>
        <operation id="o2cf88b683c57433ca8083f04f68d57bb970" name="getReady" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        System.out.println("&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; GET NOW READY &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;");
        return ready;}</source-code>
          </source-codes>
        </operation>
        <operation id="o0f0473ca3c434361990ffe6e7e90cff8970" name="getEnde" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        
        System.out.println("Ende wurde empfagnen: " + ende);
        return ende;}
    
    /**
     * Gibt befehl die Station anzufahren 1/0
     * @return 
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o0897209b7172461b84f6c27c705b8ec9970" name="setStation" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="go" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        station = go;
        System.out.println(station);}{</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di580256095879090306" cid="C013" type="class" name="Main" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="Pa5fd30480c484e73a79c16645dbe273a" creation-date="02/18/2014 15:12:19">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="o1a15a8e4cc1b4cc6ab1975d9650417b5970" name="main" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        try{
            ComView com = new ComView();
            com.start();}
        catch (SocketException ex){
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);}}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di204719315705879072" cid="C014" type="class" name="FileIO" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="Pa5fd30480c484e73a79c16645dbe273a" creation-date="02/18/2014 15:12:19">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="o8147ee39fdb14f11ab7a7144bec6c607976" name="FileIO" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{}
    
    //**********************************************************************************************************
    //******                                        READ                                                   *****
    //**********************************************************************************************************</source-code>
          </source-codes>
        </operation>
        <operation id="o2e38d18043924c3aa156a937a6ec20a9976" name="getText" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="file" type="File" type-id="File" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws FileNotFoundException, IOException, InterruptedException{
        

        FileReader leser = new FileReader(file);
        int length =(int) file.length();
        char[ temp = new char[length;
        
        while (file.exists() == false);{
            //Thread.sleep(50);}
        
        leser.read(temp);
        leser.close();
        String out = String.valueOf(temp);

        return out;}</source-code>
          </source-codes>
        </operation>
        <operation id="o7279f58644fc40829d32b6b61fe7793f976" name="getLastChar" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="file" type="File" type-id="File" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws FileNotFoundException, IOException, InterruptedException{
        
        
        FileReader leser = new FileReader(file);
        int length =(int) file.length();
        char[ temp = new char[length;
        
        while (file.exists() == false);{
            //Thread.sleep(50);}
        
        leser.read(temp);
        leser.close();
        char temp2 = temp[length-1;
        String out = String.valueOf(temp2);

        return out;}
     
     /**
      * 
      * @param file
      * @return
      * @throws FileNotFoundException
      * @throws IOException 
      * Gibt den zweit letzten char[] platz zurück.
      * Da das Programm RoboView beim schreiben in ein Textdokument immer noch
      * einen Zeilenumbruch anfügt, muss der zweitletzte char[] gelesen werden
      * um das letzte Zeichen zu bekommen.
      */</source-code>
          </source-codes>
        </operation>
        <operation id="of152ac2dd09d45bebc463f4c8cb1df54976" name="getSecendLastChar" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="file" type="File" type-id="File" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws FileNotFoundException, IOException, InterruptedException{
        
        
        FileReader leser = new FileReader(file);
        int length =(int) file.length();
        char[ temp = new char[length;
        
        while (file.exists() == false);{
            //Thread.sleep(50);}
        leser.read(temp);
        leser.close();
        char temp2 = temp[length-3;
        String out = String.valueOf(temp2);

        return out;}
    
   
    
    
    
    
    //**********************************************************************************************************
    //******                                        WRITH                                                  *****
    //**********************************************************************************************************

    
    
    // Dokument schreiben mit String</source-code>
          </source-codes>
        </operation>
        <operation id="o4ade4243fa3d4959bac1b15861be7175976" name="setText" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="temp" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="file" type="File" type-id="File" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws FileNotFoundException, IOException, InterruptedException{

        FileWriter schreiber = new FileWriter(file);
        
        while (file.exists() == false);{
            //Thread.sleep(50);}
        schreiber.write(temp);
        schreiber.flush();
        schreiber.close();}</source-code>
          </source-codes>
        </operation>
        <operation id="oded93190942641c0b6d59e531ee043d6976" name="setOnlyNumber" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="temp" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="file" type="File" type-id="File" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws FileNotFoundException, IOException, InterruptedException{
            String chnge1 = ",";
            String chnge2 = "[";
            String chnge3 = "]";
        
// --------------------------   entfernt ","   ---------------------------------
            
            char[ stringArray1 = temp.toCharArray();
            String temp1 = "";
        
            for(int i = 0; i &lt; stringArray1.length; i++){
            
                if(String.valueOf(stringArray1[i).equals(chnge1) == false){
                    temp1 += String.valueOf(stringArray1[i).toString();}}
            
// --------------------------   entfernt "["   ---------------------------------
            
            char[ stringArray2 = temp1.toCharArray();
            String temp2 = "";
        
            for(int i = 0; i &lt; stringArray2.length; i++){
            
                if(String.valueOf(stringArray2[i).equals(chnge2) == false){
                    temp2 += String.valueOf(stringArray2[i).toString();}}
            
// --------------------------   entfernt "]"   ---------------------------------
            
            char[ stringArray3 = temp2.toCharArray();
            String out = "";
        
            for(int i = 0; i &lt; stringArray3.length; i++){
            
                if(String.valueOf(stringArray3[i).equals(chnge3) == false){
                    out += String.valueOf(stringArray3[i).toString();}}
            
            setText(out, file);}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di200288082355547831" cid="C015" type="class" name="UDPServer" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="Pa5fd30480c484e73a79c16645dbe273a" creation-date="02/18/2014 15:12:19">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="o0301d8319d5842a199eb4c9d9d61deb7989" name="getViewMessagr" type="int[]" type-id="int[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="serverSocket" type="DatagramSocket" type-id="DatagramSocket" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws Exception{
          
          
        
         
        byte[ receiveData = new byte[36; //
        byte[ in = new byte[36;

// bytes[] der seperaten Komponenten der zu lesenden Nachricht.
        
        byte[ id = new byte[1;
        byte[ length = new byte[2;
        byte[ check = new byte[1;

        byte[ in0 = new byte[4;
        byte[ in1 = new byte[4;
        byte[ in2 = new byte[4;
        byte[ in3 = new byte[4;
        byte[ in4 = new byte[4;
        byte[ in5 = new byte[4;
        byte[ in6 = new byte[4;
        byte[ in7 = new byte[4;
            
        DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
        serverSocket.receive(receivePacket);
                 
                 
        for (int i=0; i &lt; 36; i++ ){
            System.out.println("INPUT " + i + ": "+Array.getByte(receiveData, i));}
   
                  //String sentence = new String( receivePacket.getData());
                    in = receivePacket.getData();
                  
                  
                  
                  id[0 = in[0;
                  
                  length[1 = in[1;
                  length[0 = in[2;
                  
                  check[0 = in[3;
                  
                  // Nachricht 0
                  
                  in0[3 = in[4;
                  in0[2 = in[5;
                  in0[1 = in[6;
                  in0[0 = in[7;
                  
                  // Nachricht 1
                  
                  in1[3 = in[8;
                  in1[2 = in[9;
                  in1[1 = in[10;
                  in1[0 = in[11;
                  
                  // Nachricht 2
                  
                  in2[3 = in[12;
                  in2[2 = in[13;
                  in2[1 = in[14;
                  in2[0 = in[15;
                  
                  // Nachricht 3
                  
                  in3[3 = in[16;
                  in3[2 = in[17;
                  in3[1 = in[18;
                  in3[0 = in[19;
                  
                  // Nachricht 4
                  
                  in4[3 = in[20;
                  in4[2 = in[21;
                  in4[1 = in[22;
                  in4[0 = in[23;
                  
                  // Nachricht 5
                  
                  in5[3 = in[24;
                  in5[2 = in[25;
                  in5[1 = in[26;
                  in5[0 = in[27;
                  
                  // Nachricht 6
                  
                  in6[3 = in[28;
                  in6[2 = in[29;
                  in6[1 = in[30;
                  in6[0 = in[31;
                  
                  // Nachricht 7
                  
                  in7[3 = in[32;
                  in7[2 = in[33;
                  in7[1 = in[34;
                  in7[0 = in[35;
                  
                  int[ out = new int[8;
                  
                  
                 
                 out[0 = byteToInt(in0);
                 out[1 = byteToInt(in1);
                 out[2 = byteToInt(in2);
                 out[3 = byteToInt(in3);
                 out[4 = byteToInt(in4);
                 out[5 = byteToInt(in5);
                 out[6 = byteToInt(in6);
                 out[7 = byteToInt(in7);
                 
                /* 
                 System.out.println("Nachricht ist bereit zum senden");
                 
                   System.out.println("ID: " + byteToInt(id));
                   System.out.println("Length: " + byteToInt(length));
                   System.out.println("Check Number: " + byteToInt(check));
                   System.out.println("In 0: " + out[0]);
                   System.out.println("In 1: " + out[1]);
                   System.out.println("In 2: " + out[2]);
                   System.out.println("In 3: " + out[3]);
                   System.out.println("In 4: " + out[4]);
                   System.out.println("In 5: " + out[5]);
                   System.out.println("In 6: " + out[6]);
                   System.out.println("In 7: " + out[7]);
                   */
                   
                   return out;}
      
   
/**
 * 
 * Sendet das mitgegebene byte[] über den Port port an die Ip ip
 * @param sendData
 * @throws SocketException
 * @throws UnknownHostException
 * @throws IOException 
 */</source-code>
          </source-codes>
        </operation>
        <operation id="o564871ede603409282f2e635bbae310c989" name="sendViewMessage" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="out" type="int" type-id="int" default-value="" />
            <parameter id="" name="ip" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="port" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws SocketException, UnknownHostException, IOException, InterruptedException{
   /*
       System.out.println("SENDEN Nachricht 0: " + out[0]);
       System.out.println("SENDEN Nachricht 1: " + out[1]);
       System.out.println("SENDEN Nachricht 2: " + out[2]);
       System.out.println("SENDEN Nachricht 3: " + out[3]);
       System.out.println("SENDEN Nachricht 4: " + out[4]);
       System.out.println("SENDEN Nachricht 5: " + out[5]);
       System.out.println("SENDEN Nachricht 6: " + out[6]);
       System.out.println("SENDEN Nachricht 7: " + out[7]);
       */
       
       byte[ sendData = new byte[36;
       
       byte[ id = new byte[1;
       byte[ length = new byte[2;
       byte[ check = new byte[1;

       byte[ out0 = new byte[4;
       byte[ out1 = new byte[4;
       byte[ out2 = new byte[4;
       byte[ out3 = new byte[4;
       byte[ out4 = new byte[4;
       byte[ out5 = new byte[4;
       byte[ out6 = new byte[4;
       byte[ out7 = new byte[4;
       
      
       length = intToByte(2, 36);
       
       out0 = intToByte(4, out[0);
       out1 = intToByte(4, out[1);
       out2 = intToByte(4, out[2);
       out3 = intToByte(4, out[3);
       out4 = intToByte(4, out[4);
       out5 = intToByte(4, out[5);
       out6 = intToByte(4, out[6);
       out7 = intToByte(4, out[7);
       
        //Nachricht id
       
        sendData[0 = 0;
        
        //Nachricht länge ( ist immer 36 Byte)
        
        sendData[1 = length[1;
        sendData[2 = 0; // length[0] ergibt 9, sollte aber 0 ergeben???
        
        // senData[3] steht weiter unten und kann erst nach erstellen der restlichen
        // Nachricht erstellt werden.
        
        //Nachricht 0
        
        sendData[4 = out0[3;
        sendData[5 = out0[2;
        sendData[6 = out0[1;
        sendData[7 = out0[0;
        
        //Nachricht 1
        
        sendData[8 = out1[3;
        sendData[9 = out1[2;
        sendData[10 = out1[1;
        sendData[11 = out1[0;
        
        //Nachricht 2
        
        sendData[12 = out2[3;
        sendData[13 = out2[2;
        sendData[14 = out2[1;
        sendData[15 = out2[0;
        
        //Nachricht 3
        
        sendData[16 = out3[3;
        sendData[17 = out3[2;
        sendData[18 = out3[1;
        sendData[19 = out3[0;
        
        //Nachricht 4
        
        sendData[20 = out4[3;
        sendData[21 = out4[2;
        sendData[22 = out4[1;
        sendData[23 = out4[0;
        
        //Nachricht 5
        
        sendData[24 = out5[3;
        sendData[25 = out5[2;
        sendData[26 = out5[1;
        sendData[27 = out5[0;
        
        //Nachricht 6
        
        sendData[28 = out6[3;
        sendData[29 = out6[2;
        sendData[30 = out6[1;
        sendData[31 = out6[0;
        
        //Nachricht 7
        
        sendData[32 = out7[3;
        sendData[33 = out7[2;
        sendData[34 = out7[1;
        sendData[35 = out7[0;
        
        byte[ nutzdaten = new byte[32;
        
        // Stellt die, für dei Prüfsumme relevanten Bytes zusammen
        
        for (int i = 0; i &lt; 32 ; i++){
            if (i != 2){
               // System.out.println(i);
                nutzdaten[i = sendData[i;}}
        
        // Berechnet die Prüfsumme
        
        byte[ temp = intToByte(1, checksum(nutzdaten, nutzdaten.length));
        
        // Nachricht Prüfsumme
        
       sendData[3 = temp[0;
       
       // Konsolenausgabe
       /*
        for (int i=0; i &lt; 36; i++ )
        {
       
       if ( i == 4 || i == 8 || i == 12 || i == 16 || i == 20 || i == 24 || i == 28 || i == 32)
       {
           System.out.println("-- Nachricht " + ((i/4) - 1) + " --");
       }
       
       System.out.println("OUTPUT " + i + ": "+ Array.getByte(sendData, i));
        }
        */
   // ------------------------------- SENDEN -----------------------------------
        
        DatagramSocket send = new DatagramSocket();
        InetAddress ipadress = InetAddress.getByName( ip );
        send.connect(ipadress, port);
        
        send.send(new DatagramPacket(sendData, sendData.length));
       
        send.disconnect();
        Thread.sleep(100);}
   
// ----------------------- Byte[] zu Integer -----------------------------------
   
/**
 * Wandelt ein byte[] in einen Interger um, es muss ds zu umwandelnde byte[] mitgegeben werden
 * @param in
 * @return 
 */</source-code>
          </source-codes>
        </operation>
        <operation id="o5f1a26069ce54b99951574a8b57fd18d990" name="byteToInt" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="in" type="byte" type-id="byte" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
// byte[] -&gt; int
        int lenght = in.length;
        int number = 0;     
        for (int i = 0; i &lt; lenght; ++i){
            number |= (in[lenght-1-i &amp; 0xff) &lt;&lt; (i &lt;&lt; lenght-1);}

        return number;}
   
// ----------------------- Integer zu Byte[] -----------------------------------
 
   
   
/**
 * Wandelt einen Integer in einen byte[] um, es muss der zu umwandelnde Interger und die gewüscht bytelänge mitgegeben werden.
 * @param length
 * @param in
 * @return 
 */</source-code>
          </source-codes>
        </operation>
        <operation id="oea427fb2aef543fb868813dcc622d242990" name="intToByte" type="byte[]" type-id="byte[]" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="length" type="int" type-id="int" default-value="" />
            <parameter id="" name="in" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        byte[ data = new byte[length;

        // int -&gt; byte[]
        for (int i = 0; i &lt; length; ++i){
            int shift = i &lt;&lt; length-1; // i * 8
            data[length-1-i = (byte)((in &amp; (0xff &lt;&lt; shift)) &gt;&gt;&gt; shift);}
        return data;}
  
    
    
/**
 * Berechnet die Prüfsumme für das zu sendende byte[] (byte[3])
 * @param nutzdaten
 * @param nutzdatenLänge
 * @return 
 */</source-code>
          </source-codes>
        </operation>
        <operation id="oae23313334a44c6f901e0c29ce709a58991" name="checksum" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="nutzdaten" type="byte" type-id="byte" default-value="" />
            <parameter id="" name="nutzdatenLänge" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{  
 
    int s0 = 0;
    
    for(int i = 0; i &lt; nutzdatenLänge; ++i){
      s0 = ( s0 + nutzdaten[i )%256;}  
    return ( 0xFF-s0 );}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di541183281211448385" cid="C001" type="class" name="ComRefbox" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="Pa5fd30480c484e73a79c16645dbe273a" creation-date="02/18/2014 15:12:19">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a98b0a01020c8449e99f1ea5c7f1778cb724" name="client" type="ProtobufClient" type-id="ProtobufClient" visibility="public" abstract="false" virtual="false" />
        <attribute id="ae795416a6c844adba1c1eb9cfe2611d9729" name="handler" type="Handler" type-id="Handler" visibility="public" abstract="false" virtual="false" />
        <attribute id="ad3c1d64608be4714b79c024e2889a217729" name="peer" type="ProtobufBroadcastPeer" type-id="ProtobufBroadcastPeer" visibility="public" abstract="false" virtual="false" />
        <attribute id="a3d14f8be1439412f8ccc85f20b82c93e729" name="gamePoints" type="int" type-id="int" visibility="public" abstract="false" virtual="false" />
        <attribute id="a0686942815a4414ba5d82bebdd22f9ab730" name="gamePhase" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" />
        <attribute id="a51f22e3d7adb47e8af6732c399ae274e730" name="gameState" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" />
        <attribute id="a0fcc104259b84bbf9bb4952b7a326ccd730" name="hasTime" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" />
        <attribute id="aaed14c7c5e444404bbe83770522ac001730" name="gameTime" type="int" type-id="int" visibility="public" abstract="false" virtual="false" />
      </attributes>
      <operations>
        <operation id="o1cd76aee2727430a80fe7a622da88c06730" name="ComRefbox" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="ip" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="portIn" type="int" type-id="int" default-value="" />
            <parameter id="" name="portOut" type="int" type-id="int" default-value="" />
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="frame" type="UserFrame" type-id="UserFrame" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        // --------------------------- Verbinden mit Refbox per UDP ----------------------------
        peer = new ProtobufBroadcastPeer(ip, portIn, portOut);

        try{
            peer.start();} catch (IOException e){
            e.printStackTrace();}
        handler = new Handler(frame, peer);
        peer.register_handler(handler);}

    /**
     * ?? event ??? ??? ??? refbox --&gt; controller Client-Server
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o681db810b7ea459ba3ebae8cf71739c9732" name="addAttentionMessage" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        peer.&lt;AttentionMessage&gt;add_message(AttentionMessage.class);}

    /**
     * ok periodisch 1sec ??? refbox --&gt; all P2P &amp; C-S
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o83ff22b7e27f41efb95de2ec8abb7c9e732" name="addBeaconSignal" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        client.&lt;BeaconSignal&gt;add_message(BeaconSignal.class);}

    //?? periodisch? EVENT! ??? refbox --&gt; any       P2P &amp; C-S</source-code>
          </source-codes>
        </operation>
        <operation id="o5ef872c3bbe54d1f9872782adbca7546732" name="addVersionInfo" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        peer.&lt;VersionInfo&gt;add_message(VersionInfo.class);}

    /**
     * ?? periodisch 1sec ??? refbox --&gt; robots PeerToPeer
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oe4a1276785b441f9818b8f8adce99414732" name="addExplorationInfo" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        peer.&lt;ExplorationInfo&gt;add_message(ExplorationInfo.class);}

    //ok periodisch 1sec ??? refbox --&gt; all          P2P &amp; C-S
    /**
     * Hört auf die Nachricht "GameState" werte: - Aktueller Punktestand -
     * Aktuelle Spielzeit (EXPLORATION: 0-180, PRODUCTION: 0-900) - Aktueller
     * Spiel Phase (PRE_GAME, EXPLORATION, PRODUCTION, POST_GAME) - Aktueller
     * Spiel Status (WAIT_STRT, RUNNING, PAUSED) - Ob noch Spielzeit vorhanden
     * ist.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o61ee1935969c49ccbb6fcbc1539df385732" name="addGameStateMessage" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        peer.&lt;GameState&gt;add_message(GameState.class);}

    /**
     * ok periodisch 0.25sec ??? refbox --&gt; all P2P &amp; C-S
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o0658d3980a8d4cf4b08c18be4d400de4732" name="addMachineInfo" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        peer.&lt;MachineInfo&gt;add_message(MachineInfo.class);}

    /**
     * ?? ??? 5sec ??? refbox --&gt; any P2P &amp; C-S
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o382850659db4487d98a9b271cb77cf78732" name="addOrderInfo" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        peer.&lt;OrderInfo&gt;add_message(OrderInfo.class);}

    /**
     * ok periodisch 1sec ok refbox --&gt; controller Client-Server
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oa3d8e8b133454cda9558d494e931c05b732" name="addPuckInfo" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        peer.&lt;PuckInfo&gt;add_message(PuckInfo.class);}

    /**
     * ok periodisch 1sec ??? refbox --&gt; controller Client-Server
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oab8635df5e2b4d13a82d55d4436a771d732" name="addRobotInfo" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        peer.&lt;RobotInfo&gt;add_message(RobotInfo.class);}

    /**
     *
     * @return Gibt den aktuellen Spiel Status zurück (WAIT_STRT, RUNNING,
     * PAUSED).
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o4007e6361f26454e8212ca59ee541332732" name="getState" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return handler.getState();}

    /**
     *
     * @return Gibt die aktuelle Spiel Phase zurück (PRE_GAME, EXPLORATION,
     * PRODUCTION, POST_GAME).
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o006d921f5bf7460097e2bc9e56bb91aa732" name="getPhase" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return handler.getPhase();}

    /**
     *
     * @return Git an ob noch Spielzeit vorhanden ist.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="od58f798e04014263a8987529ba677623732" name="getHasTime" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return handler.getHasTime();}

    /**
     *
     * @return Gibt die aktuelle Spielzeit zurück (EXPLORATION: 0-180,
     * PRODUCTION: 0-900).
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oc7e0079a6b5a496f890511388b426fda732" name="getTime" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return handler.getTime();}

    /**
     *
     * @return Gibt den Aktuellen Punktestand zurück.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oc95ca6ae618145328c05ef71d07f0303732" name="getPoints" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return handler.getPoints();}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di111747243104470596" cid="C002" type="class" name="Handler" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creator="Pa5fd30480c484e73a79c16645dbe273a" creation-date="02/18/2014 15:12:19">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a7213c3730a2642eb9ca5f56472d13518764" name="counter" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="ab8929301638d4cc4aa82e74dfb229912764" name="gamePoints" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" />
        <attribute id="afbf672b5e92a43a5a79068d889a2c138764" name="gamePhase" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" />
        <attribute id="aeeca38b37d8d429b84b896cb83c36630764" name="gameState" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" />
        <attribute id="a20bcbf7401984962b4aedd9587d814b7764" name="hasTime" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" />
        <attribute id="a83cf419a21b545ddba5506d0e922a4b7764" name="gameTime" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" />
        <attribute id="a6c57db4f49694990a4a15c04806ddda9764" name="mTyp" type="int[]" type-id="int[]" visibility="public" abstract="false" virtual="false" />
        <attribute id="ab8143bbb4ba2427a9030a2fcfb523d10764" name="peer" type="ProtobufBroadcastPeer" type-id="ProtobufBroadcastPeer" visibility="package" abstract="false" virtual="false" />
        <attribute id="a8ae375289877427eb43afe46947e2d13764" name="lampM1" type="int[]" type-id="int[]" visibility="public" abstract="false" virtual="false" />
        <attribute id="a86c3dcb4bfcd45209aff57a4d4fe4d3e764" name="lampM2" type="int[]" type-id="int[]" visibility="public" abstract="false" virtual="false" />
        <attribute id="a7da8273396c44001a4055f0950c3e8b8764" name="lampM3" type="int[]" type-id="int[]" visibility="public" abstract="false" virtual="false" />
        <attribute id="a9189d38024904c2ab98409e800e5948f764" name="lampM4" type="int[]" type-id="int[]" visibility="public" abstract="false" virtual="false" />
        <attribute id="aeaf5a128a2504efd9c678dfb75f95d16764" name="lampM5" type="int[]" type-id="int[]" visibility="public" abstract="false" virtual="false" />
        <attribute id="a9b2f683dd07c43a38c9e208c4606cbc8764" name="lampM6" type="int[]" type-id="int[]" visibility="public" abstract="false" virtual="false" />
        <attribute id="a2ee0667819874e06980a3a3cb400df27764" name="lampM7" type="int[]" type-id="int[]" visibility="public" abstract="false" virtual="false" />
        <attribute id="ad09c8bd7633644b6b4ef7dff097298c1764" name="lampM8" type="int[]" type-id="int[]" visibility="public" abstract="false" virtual="false" />
        <attribute id="ae7f410a7d64d4191b9014ca0ab42c801764" name="lampM9" type="int[]" type-id="int[]" visibility="public" abstract="false" virtual="false" />
        <attribute id="a2ec2c7b6b7b64777b3a9952926b7a7f5764" name="lampM10" type="int[]" type-id="int[]" visibility="public" abstract="false" virtual="false" />
        <attribute id="a08837a7add0249cd8ba952f8a8f0974b764" name="Mtyp" type="String[]" type-id="String[]" visibility="public" abstract="false" virtual="false" />
        <attribute id="aa8ddd62b7aeb4d9ea3e14f3fbffb9c81764" name="machinetyp" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" />
      </attributes>
      <operations>
        <operation id="o7ca9c3597cc24c84be166d56fb704760764" name="Handler" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="frame" type="UserFrame" type-id="UserFrame" default-value="" />
            <parameter id="" name="peer" type="ProtobufBroadcastPeer" type-id="ProtobufBroadcastPeer" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{

        this.peer = peer;
        this.addObserver(frame.panel);
        this.frame = frame;
        counter = 0;
        frame.panel.printLog("Der Server wurde gestartet !!!");}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o0612452ac3594511968356d69ec0caa2764" name="handle_message" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="in_msg" type="ByteBuffer" type-id="ByteBuffer" default-value="" />
            <parameter id="" name="msg" type="GeneratedMessage" type-id="GeneratedMessage" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        NanoSecondsTimestampProvider nstp = new NanoSecondsTimestampProvider();

        long ms = System.currentTimeMillis();
        long ns = nstp.currentNanoSecondsTimestamp();

        int sec = (int) (ms / 1000);
        long nsec = ns - (ms * 1000000L);

        TimeProtos.Time t = TimeProtos.Time.newBuilder().setSec(sec).setNsec(nsec).build();
        BeaconSignal bs = BeaconSignal.newBuilder().setTime(t).setSeq(1).setPeerName(Main.name).setNumber(0).setTeamName("Solidus").build();
        
        ProtobufMessage udpOut = new ProtobufMessage(2000, 1, bs);
        peer.enqueue(udpOut);
        //sendMachine("M1", "T4");
// -------------------------- Puck Info ----------------------------------------

        if (msg instanceof PuckInfo){


            byte[ array = new byte[in_msg.capacity();
            in_msg.rewind();
            in_msg.get(array);

            PuckInfoProtos.PuckInfo info;

            try{
                info = PuckInfoProtos.PuckInfo.parseFrom(array);
                int count = info.getPucksCount();
                System.out.println("Number of pucks: " + count);
                List&lt;PuckInfoProtos.Puck&gt; pucks = info.getPucksList();
                for (int i = 0; i &lt; pucks.size(); i++){
                    PuckInfoProtos.Puck puck = pucks.get(i);
                    int id = puck.getId();
                    System.out.println("  puck ID: " + id);}}
            catch (InvalidProtocolBufferException e){
                e.printStackTrace();}}

// -------------------------------- Order Info ---------------------------------


        if (msg instanceof OrderInfo){


            byte[ array = new byte[in_msg.capacity();
            in_msg.rewind();
            in_msg.get(array);
            
            OrderInfoProtos.OrderInfo info;
            try{
                info = OrderInfoProtos.OrderInfo.parseFrom(array);
                
                List&lt;Order&gt; list = info.getOrdersList();
                int length = list.size();
                
                for (int i = 0; i &lt; length; i++){
                    System.out.println("Order " + (i+1) + ": " + list.get(i));}}
            catch (InvalidProtocolBufferException ex){
                Logger.getLogger(Handler.class.getName()).log(Level.SEVERE, null, ex);}}

//------------------------------------------------------------------------------------------------
// -------------------------------------   Game State   ------------------------------------------
//------------------------------------------------------------------------------------------------
// Gibt die Aktuelle Spielphase, Spielstatus, Spielzeit, die Punkte und ob noch Zeit vorhanden ist.

        if (msg instanceof GameState){


            byte[ array = new byte[in_msg.capacity();
            in_msg.rewind();
            in_msg.get(array);

            GameStateProtos.GameState info;

            try{
                info = GameStateProtos.GameState.parseFrom(array);
                int points = info.getPoints();
                Phase phase = info.getPhase();
                State state = info.getState();
                TimeProtos.Time time = info.getGameTime();

                hasTime = info.hasGameTime() + "";


                setChanged();
                notifyObservers(send);


                gamePoints = points + "";
                gamePhase = phase.name();
                gameState = state.name();
                gameTime = time.getSec() + "";}
            catch (InvalidProtocolBufferException e){
                e.printStackTrace();}}

// -------------------------------- Machine Info ---------------------------------
                
         if (msg instanceof MachineInfo){
             System.out.println("MACHINE INFO");
            
                byte[ array = new byte[in_msg.capacity();
                in_msg.rewind();
                in_msg.get(array);
                               
                MachineInfoProtos.MachineInfo info;
            try{                
                
                
                info = MachineInfoProtos.MachineInfo.parseFrom(array);
                List&lt;Machine&gt; list = info.getMachinesList();
                
                int length = list.size();
                Mtyp = new String[length;
               
                
                for ( int i = 0; i &lt; length; i++){
                    Machine m = list.get(i);
                    
                   String name =  m.getName();
                   String typ =  m.getType();
                   Pose2D pose = m.getPose();
                   
                   PuckState out = m.getOutput();
                   //PuckState in = m.getInputs(i);
                   
                   Mtyp[i = typ;
                    System.out.println("Maschine " + name + " ist Maschinentyp " +Mtyp[i);
                    
                    if (Mtyp.equals("T5")){
                        machinetyp = Mtyp[i;}}}
            catch (InvalidProtocolBufferException ex){
                Logger.getLogger(Handler.class.getName()).log(Level.SEVERE, null, ex);}
                
               
            /*    
               try
            { 
             
                
                int count = info.getMachinesCount();
                System.out.println("Anzahl Mashcinen: " + count);
                List&lt;MachineInfoProtos.Machine&gt; machines = info.getMachinesList();
                                      
             
                MachineInfoProtos.Machine machine = machines.get(0);
            
                int inputsCount = machine.getInputsCount();
                List&lt;LightSpec&gt; lightlist = machine.getLightsList();
                
                
            }
            catch (InvalidProtocolBufferException ex)
            {
                Logger.getLogger(Handler.class.getName()).log(Level.SEVERE, null, ex);
            }
        */}
         
        
// -----------------------------------------------------------------------------------
// -------------------------------- Exploration Info ---------------------------------
// -----------------------------------------------------------------------------------

        if (msg instanceof ExplorationInfo){
            

            byte[ array = new byte[in_msg.capacity();
            in_msg.rewind();
            in_msg.get(array);

            ExplorationInfoProtos.ExplorationInfo info;


            try{
                info = ExplorationInfoProtos.ExplorationInfo.parseFrom(array);

                List&lt;ExplorationSignal&gt; slist = info.getSignalsList();
                ExplorationSignal m1 = slist.get(0);
                ExplorationSignal m2 = slist.get(1);
                ExplorationSignal m3 = slist.get(2);
                ExplorationSignal m4 = slist.get(3);
                ExplorationSignal m5 = slist.get(4);

// -------------------  Maschinen - Typ 1 --------------------------------------

                String m1typ = m1.getType();
                LightSpec m1l1 = m1.getLights(0);
                LightSpec m1l2 = m1.getLights(1);
                LightSpec m1l3 = m1.getLights(2);

                LightState m1l1state = m1l1.getState();
                LightState m1l2state = m1l2.getState();
                LightState m1l3state = m1l3.getState();

                int lampred1 = m1l1state.getNumber();
                int lampornge1 = m1l2state.getNumber();
                int lampgreen1 = m1l3state.getNumber();


// -------------------  Maschinen - Typ 2 --------------------------------------

                String m2typ = m2.getType();
                LightSpec m2l1 = m2.getLights(0);
                LightSpec m2l2 = m2.getLights(1);
                LightSpec m2l3 = m2.getLights(2);

                LightState m2l1state = m2l1.getState();
                LightState m2l2state = m2l2.getState();
                LightState m2l3state = m2l3.getState();

                int lampred2 = m2l1state.getNumber();
                int lampornge2 = m2l2state.getNumber();
                int lampgreen2 = m2l3state.getNumber();



// -------------------  Maschinen - Typ 3 --------------------------------------

                String m3typ = m3.getType();
                LightSpec m3l1 = m3.getLights(0);
                LightSpec m3l2 = m3.getLights(1);
                LightSpec m3l3 = m3.getLights(2);

                LightState m3l1state = m3l1.getState();
                LightState m3l2state = m3l2.getState();
                LightState m3l3state = m3l3.getState();

                int lampred3 = m3l1state.getNumber();
                int lampornge3 = m3l2state.getNumber();
                int lampgreen3 = m3l3state.getNumber();


// -------------------  Maschinen - Typ 4 --------------------------------------

                String m4typ = m4.getType();
                LightSpec m4l1 = m4.getLights(0);
                LightSpec m4l2 = m4.getLights(1);
                LightSpec m4l3 = m4.getLights(2);

                LightState m4l1state = m4l1.getState();
                LightState m4l2state = m4l2.getState();
                LightState m4l3state = m4l3.getState();

                int lampred4 = m4l1state.getNumber();
                int lampornge4 = m4l2state.getNumber();
                int lampgreen4 = m4l3state.getNumber();

// -------------------  Maschinen - Typ 5 --------------------------------------

                String m5typ = m5.getType();
                LightSpec m5l1 = m5.getLights(0);
                LightSpec m5l2 = m5.getLights(1);
                LightSpec m5l3 = m5.getLights(2);

                LightState m5l1state = m5l1.getState();
                LightState m5l2state = m5l2.getState();
                LightState m5l3state = m5l3.getState();

                int lampred5 = m5l1state.getNumber();
                int lampornge5 = m5l2state.getNumber();
                int lampgreen5 = m5l3state.getNumber();

// ------------------ Array[15] füllen: Station 1 - 3 platz 0 - 2... -------------
                mTyp = new int[15;
                mTyp[0 = lampred1;
                mTyp[1 = lampornge1;
                mTyp[2 = lampgreen1;
                mTyp[3 = lampred2;
                mTyp[4 = lampornge2;
                mTyp[5 = lampgreen2;
                mTyp[6 = lampred3;
                mTyp[7 = lampornge3;
                mTyp[8 = lampgreen3;
                mTyp[9 = lampred4;
                mTyp[10 = lampornge4;
                mTyp[11 = lampgreen4;
                mTyp[12 = lampred5;
                mTyp[13 = lampornge5;
                mTyp[14 = lampgreen5;

                int i;
                int m = 1;
                /*
                for (i = 0; i &lt; 15; i = i + 3)
                {
                    frame.panel.printLog("Machinetyp " + m + " =&gt; RED: " + mTyp[i] + " ORANGE: " + mTyp[i + 1] + " GREEN: " + mTyp[i + 2]);
                    m++;
                }
                */}
            catch (InvalidProtocolBufferException e){
                e.printStackTrace();}}

// -------------------------------- Beacon Signal ---------------------------------

        if (msg instanceof BeaconSignal){

            byte[ array = new byte[in_msg.capacity();
            in_msg.rewind();
            in_msg.get(array);}

// -------------------------------- Version Info ---------------------------------
       
        
 // ---------------------------- MachineReportt ---------------------------------

                   
        /*
        MachineReportProtos.MachineReportEntry mi = MachineReportProtos.MachineReportEntry.newBuilder().setName("???").setType("???").build();
        
        MachineReport mr = MachineReport.newBuilder().setMachines(1, mi).build();

        ProtobufMessage machineinfo = new ProtobufMessage(2000, 60, mr);
        peer.equals(machineinfo);

*/

// -----------------------------------------------------------------------------
        frame.panel.printLog("Step -------------------------&gt; " + counter + " &lt;-------------------------");
        counter++;

        send[0 = gamePoints;
        send[1 = gamePhase;
        send[2 = gameState;
        send[3 = gameTime;
        send[4 = hasTime;




        setChanged();
        notifyObservers(send);}
    
    
   

    /**
     *
     * @return Gibt den aktuellen Spiel Status zurück (WAIT_STRT, RUNNING,
     * PAUSED).
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o08732ae8bacc40af826f26dc9b6bc623765" name="getState" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return gameState;}

    /**
     *
     * @return Gibt die aktuelle Spiel Phase zurück (PRE_GAME, EXPLORATION,
     * PRODUCTION, POST_GAME).
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o66381adcdab84028944c554c0c97e41b765" name="getPhase" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return gamePhase;}

    /**
     *
     * @return Git an ob noch Spielzeit vorhanden ist.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oc2f5248f71fe4fba81bdd89ee1dad3f3765" name="getHasTime" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return hasTime;}

    /**
     *
     * @return Gibt die aktuelle Spielzeit zurück (EXPLORATION: 0-180,
     * PRODUCTION: 0-900).
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o35192a88c8274a3b8902a310f9ceedee765" name="getTime" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return gameTime;}

    /**
     *
     * @return Gibt den Aktuellen Punktestand zurück.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o8ee38b6f1a6f48c286ab749f984d95c6765" name="getPoints" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return gamePoints;}

    /**
     *
     * @return Gibt die von edr Refbox zugewisenen Lichter der 5 Maschinentypen
     * zurück: array[15] array[0] - array[2] Maschinentyp 1: [0] = Rote Lampe,
     * [1] = Orange Lampe, [2] = Grüne Lampe...
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oc37def5b08a84991a7d54e214387481a765" name="getMachineTyp" type="int[]" type-id="int[]" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return mTyp;}</source-code>
          </source-codes>
        </operation>
        <operation id="ob515953627654a27b047580fe0f97f6a765" name="sendMachine" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        try{
            Thread.sleep(500);}
        catch (InterruptedException ex){
            Logger.getLogger(Handler.class.getName()).log(Level.SEVERE, null, ex);}
        
        String type = "";
        
        switch (name){
            case "M1":
                if (lampM1[0 == mTyp[0 &amp;&amp; lampM1[1 == mTyp[1 &amp;&amp; lampM1[2 == mTyp[2 ){
                    type = "T1";}
                
                if (lampM1[0 == mTyp[3 &amp;&amp; lampM1[1 == mTyp[4 &amp;&amp; lampM1[2 == mTyp[5 ){
                    type = "T2";}
                
                if (lampM1[0 == mTyp[6 &amp;&amp; lampM1[1 == mTyp[7 &amp;&amp; lampM1[2 == mTyp[8 ){
                    type = "T3";}
                
                if (lampM1[0 == mTyp[9 &amp;&amp; lampM1[1 == mTyp[10 &amp;&amp; lampM1[2 == mTyp[11 ){
                    type = "T4";}
                
                if (lampM1[0 == mTyp[12 &amp;&amp; lampM1[1 == mTyp[13 &amp;&amp; lampM1[2 == mTyp[14 ){
                    type = "T5";}
                break;
                
            case "M2":
                if (lampM2[0 == mTyp[0 &amp;&amp; lampM2[1 == mTyp[1 &amp;&amp; lampM2[2 == mTyp[2 ){
                    type = "T1";}
                
                if (lampM2[0 == mTyp[3 &amp;&amp; lampM2[1 == mTyp[4 &amp;&amp; lampM2[2 == mTyp[5 ){
                    type = "T2";}
                
                if (lampM2[0 == mTyp[6 &amp;&amp; lampM2[1 == mTyp[7 &amp;&amp; lampM2[2 == mTyp[8 ){
                    type = "T3";}
                
                if (lampM2[0 == mTyp[9 &amp;&amp; lampM2[1 == mTyp[10 &amp;&amp; lampM2[2 == mTyp[11 ){
                    type = "T4";}
                
                if (lampM2[0 == mTyp[12 &amp;&amp; lampM2[1 == mTyp[13 &amp;&amp; lampM2[2 == mTyp[14 ){
                    type = "T5";}
                break;
                
            case "M3":
                 if (lampM3[0 == mTyp[0 &amp;&amp; lampM3[1 == mTyp[1 &amp;&amp; lampM3[2 == mTyp[2 ){
                    type = "T1";}
                
                if (lampM3[0 == mTyp[3 &amp;&amp; lampM3[1 == mTyp[4 &amp;&amp; lampM3[2 == mTyp[5 ){
                    type = "T2";}
                
                if (lampM3[0 == mTyp[6 &amp;&amp; lampM3[1 == mTyp[7 &amp;&amp; lampM3[2 == mTyp[8 ){
                    type = "T3";}
                
                if (lampM3[0 == mTyp[9 &amp;&amp; lampM3[1 == mTyp[10 &amp;&amp; lampM3[2 == mTyp[11 ){
                    type = "T4";}
                
                if (lampM3[0 == mTyp[12 &amp;&amp; lampM3[1 == mTyp[13 &amp;&amp; lampM3[2 == mTyp[14 ){
                    type = "T5";}
                break;
                
            case "M4":
                 if (lampM4[0 == mTyp[0 &amp;&amp; lampM4[1 == mTyp[1 &amp;&amp; lampM4[2 == mTyp[2 ){
                    type = "T1";}
                
                if (lampM4[0 == mTyp[3 &amp;&amp; lampM4[1 == mTyp[4 &amp;&amp; lampM4[2 == mTyp[5 ){
                    type = "T2";}
                
                if (lampM4[0 == mTyp[6 &amp;&amp; lampM4[1 == mTyp[7 &amp;&amp; lampM4[2 == mTyp[8 ){
                    type = "T3";}
                
                if (lampM4[0 == mTyp[9 &amp;&amp; lampM4[1 == mTyp[10 &amp;&amp; lampM4[2 == mTyp[11 ){
                    type = "T4";}
                
                if (lampM4[0 == mTyp[12 &amp;&amp; lampM4[1 == mTyp[13 &amp;&amp; lampM4[2 == mTyp[14 ){
                    type = "T5";}
                break;
                
            case "M5":
                 if (lampM5[0 == mTyp[0 &amp;&amp; lampM5[1 == mTyp[1 &amp;&amp; lampM5[2 == mTyp[2 ){
                    type = "T1";}
                
                if (lampM5[0 == mTyp[3 &amp;&amp; lampM5[1 == mTyp[4 &amp;&amp; lampM5[2 == mTyp[5 ){
                    type = "T2";}
                
                if (lampM5[0 == mTyp[6 &amp;&amp; lampM5[1 == mTyp[7 &amp;&amp; lampM5[2 == mTyp[8 ){
                    type = "T3";}
                
                if (lampM5[0 == mTyp[9 &amp;&amp; lampM5[1 == mTyp[10 &amp;&amp; lampM5[2 == mTyp[11 ){
                    type = "T4";}
                
                if (lampM5[0 == mTyp[12 &amp;&amp; lampM5[1 == mTyp[13 &amp;&amp; lampM5[2 == mTyp[14 ){
                    type = "T5";}
                break;
                
            case "M6":
                 if (lampM6[0 == mTyp[0 &amp;&amp; lampM6[1 == mTyp[1 &amp;&amp; lampM6[2 == mTyp[2 ){
                    type = "T1";}
                
                if (lampM6[0 == mTyp[3 &amp;&amp; lampM6[1 == mTyp[4 &amp;&amp; lampM6[2 == mTyp[5 ){
                    type = "T2";}
                
                if (lampM6[0 == mTyp[6 &amp;&amp; lampM6[1 == mTyp[7 &amp;&amp; lampM6[2 == mTyp[8 ){
                    type = "T3";}
                
                if (lampM6[0 == mTyp[9 &amp;&amp; lampM6[1 == mTyp[10 &amp;&amp; lampM6[2 == mTyp[11 ){
                    type = "T4";}
                
                if (lampM6[0 == mTyp[12 &amp;&amp; lampM6[1 == mTyp[13 &amp;&amp; lampM6[2 == mTyp[14 ){
                    type = "T5";}
                break;
                
            case "M7":
                 if (lampM7[0 == mTyp[0 &amp;&amp; lampM7[1 == mTyp[1 &amp;&amp; lampM7[2 == mTyp[2 ){
                    type = "T1";}
                
                if (lampM7[0 == mTyp[3 &amp;&amp; lampM7[1 == mTyp[4 &amp;&amp; lampM7[2 == mTyp[5 ){
                    type = "T2";}
                
                if (lampM7[0 == mTyp[6 &amp;&amp; lampM7[1 == mTyp[7 &amp;&amp; lampM7[2 == mTyp[8 ){
                    type = "T3";}
                
                if (lampM7[0 == mTyp[9 &amp;&amp; lampM7[1 == mTyp[10 &amp;&amp; lampM7[2 == mTyp[11 ){
                    type = "T4";}
                
                if (lampM7[0 == mTyp[12 &amp;&amp; lampM7[1 == mTyp[13 &amp;&amp; lampM7[2 == mTyp[14 ){
                    type = "T5";}
                break;
                
            case "M8":
                 if (lampM8[0 == mTyp[0 &amp;&amp; lampM8[1 == mTyp[1 &amp;&amp; lampM8[2 == mTyp[2 ){
                    type = "T1";}
                
                if (lampM8[0 == mTyp[3 &amp;&amp; lampM8[1 == mTyp[4 &amp;&amp; lampM8[2 == mTyp[5 ){
                    type = "T2";}
                
                if (lampM8[0 == mTyp[6 &amp;&amp; lampM8[1 == mTyp[7 &amp;&amp; lampM8[2 == mTyp[8 ){
                    type = "T3";}
                
                if (lampM8[0 == mTyp[9 &amp;&amp; lampM8[1 == mTyp[10 &amp;&amp; lampM8[2 == mTyp[11 ){
                    type = "T4";}
                
                if (lampM8[0 == mTyp[12 &amp;&amp; lampM8[1 == mTyp[13 &amp;&amp; lampM8[2 == mTyp[14 ){
                    type = "T5";}
                break;
                
            case "M9":
                 if (lampM9[0 == mTyp[0 &amp;&amp; lampM9[1 == mTyp[1 &amp;&amp; lampM9[2 == mTyp[2 ){
                    type = "T1";}
                
                if (lampM9[0 == mTyp[3 &amp;&amp; lampM9[1 == mTyp[4 &amp;&amp; lampM9[2 == mTyp[5 ){
                    type = "T2";}
                
                if (lampM9[0 == mTyp[6 &amp;&amp; lampM9[1 == mTyp[7 &amp;&amp; lampM9[2 == mTyp[8 ){
                    type = "T3";}
                
                if (lampM9[0 == mTyp[9 &amp;&amp; lampM9[1 == mTyp[10 &amp;&amp; lampM9[2 == mTyp[11 ){
                    type = "T4";}
                
                if (lampM9[0 == mTyp[12 &amp;&amp; lampM9[1 == mTyp[13 &amp;&amp; lampM9[2 == mTyp[14 ){
                    type = "T5";}
                break;
                
            case "M10":
                 if (lampM10[0 == mTyp[0 &amp;&amp; lampM10[1 == mTyp[1 &amp;&amp; lampM10[2 == mTyp[2 ){
                    type = "T1";}
                
                if (lampM10[0 == mTyp[3 &amp;&amp; lampM10[1 == mTyp[4 &amp;&amp; lampM10[2 == mTyp[5 ){
                    type = "T2";}
                
                if (lampM10[0 == mTyp[6 &amp;&amp; lampM10[1 == mTyp[7 &amp;&amp; lampM10[2 == mTyp[8 ){
                    type = "T3";}
                
                if (lampM10[0 == mTyp[9 &amp;&amp; lampM10[1 == mTyp[10 &amp;&amp; lampM10[2 == mTyp[11 ){
                    type = "T4";}
                
                if (lampM10[0 == mTyp[12 &amp;&amp; lampM10[1 == mTyp[13 &amp;&amp; lampM10[2 == mTyp[14 ){
                    type = "T5";}
                break;
                
            default:
                return;}
        
        try{
            Thread.sleep(1000);}
        catch (InterruptedException ex){
            Logger.getLogger(Handler.class.getName()).log(Level.SEVERE, null, ex);}
        MachineReportProtos.MachineReportEntry mi = MachineReportProtos.MachineReportEntry.newBuilder().setName(name).setType(type).build();
        MachineReport mr = MachineReport.newBuilder().addMachines(mi).build();
        ProtobufMessage machineReport = new ProtobufMessage(2000, 61, mr);
        peer.enqueue(machineReport);}</source-code>
          </source-codes>
        </operation>
        <operation id="o01a72f3e32c043be8774bc74c0b4754d768" name="requestedMachine" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        
        return machinetyp;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di565984853787403274" cid="C001" type="class" name="Drive" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/27/2014 18:03:29">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="acee014e3e63748d0aeedc580a58fd7af517" name="fc" type="FieldCommander" type-id="FieldCommander" visibility="package" abstract="false" virtual="false" />
        <attribute id="a0454ab544c444ab59b301b765ac37a10537" name="comView" type="ComView" type-id="ComView" visibility="package" abstract="false" virtual="false" />
        <attribute id="a453e1e3d57984825857936dd56b1060a537" name="lcb" type="LaserControlledBreaking" type-id="LaserControlledBreaking" visibility="package" abstract="false" virtual="false" />
        <attribute id="a622710e29913401fa768b6dadea85556541" name="startPosX" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="a8328d72099124e6dacab67870e3007ec541" name="startPosY" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="a12d89c57ccfd477e8c155cb48d3b2e9f541" name="startPosPhi" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="a717f8815e5164ca7b379c0f2363f22c9541" name="tempTargetX" type="int" type-id="int" visibility="package" abstract="false" virtual="false" default-value="0" />
        <attribute id="a6e140eb03a4643f88df30866ce77b356541" name="tempTargetY" type="int" type-id="int" visibility="package" abstract="false" virtual="false" default-value="0" />
        <attribute id="a63da29dd78f14b999acfbc8dcb913dd1541" name="viewX" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="abab937d91eca48818af6fee90a18c5df541" name="viewY" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="a243bd03ef9b34a8e8d870df4f2f268de541" name="viewXrest" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="a1617aed926554e76bcc129d54eb288de541" name="viewYrest" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="a1131c11d5edd4d09a58712a5e1ec1163541" name="endposreached" type="int" type-id="int" visibility="package" abstract="false" virtual="false" default-value="0" />
        <attribute id="a61e86b32c2794fe69543aa3ffc2f8bce541" name="endCell" type="Cell" type-id="Cell" visibility="private" abstract="false" virtual="false" />
        <attribute id="ac85e729a309e4e14b9f2ec8ecca7411c541" name="startCell" type="Cell" type-id="Cell" visibility="private" abstract="false" virtual="false" />
        <attribute id="aef4771f6a27e483b84911fa5bb5b236b541" name="phaseInt" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="a71b63b28bb9641239a3a5c8e80de31aa542" name="state" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" />
        <attribute id="a9e528d784e1142d988c2c11d864f559d542" name="endPosDirLetter" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" />
        <attribute id="ab77762ffd51343f0ae06cac22c56f6a0542" name="turnPhi" type="int" type-id="int" visibility="package" abstract="false" virtual="false" default-value="0" />
        <attribute id="a5c152a5638e1469cab29908d23431453542" name="obstacleOccured" type="Boolean" type-id="Uml.Boolean" visibility="package" abstract="false" virtual="false" default-value="false" />
        <attribute id="a2bbd1f09a54b40d68d54504bf92f2f54542" name="alternativeRoute" type="Boolean" type-id="Uml.Boolean" visibility="package" abstract="false" virtual="false" default-value="false" />
        <attribute id="ab584c80a7e64455283e580b1c67b2217542" name="directionFree" type="boolean" type-id="boolean" visibility="package" abstract="false" virtual="false" default-value="true" />
        <attribute id="afc4c2c012299414795b84065803168d3542" name="beginning" type="boolean" type-id="boolean" visibility="package" abstract="false" virtual="false" default-value="true" />
      </attributes>
      <operations>
        <operation id="o08cdea7f253b4b3a848e8a876b2afedf542" name="Drive" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        this.comView = ComView.getInstance();
        this.fc = FieldCommander.getInstance();
        this.lcb = LaserControlledBreaking.getInstance();
        //this.sM = StateMachine.getInstance();
        lcb.start();}
    /*
     Pendenzen:
     Übergabe der Zielkoordinaten muss implementiert werden
     korrekturX und korrekturY müsen definiert werden!
     Wenn Soll und IST maximal 10 mm voneinander abweichen nach 20 Sek trotzdem step weiter.
     am Programmende Check 0 senden!
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o797ca09b3253437686c7bd7847ac438e550" name="run" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined"> throws InterruptedException{
        lcb.setRun(true);
        if (beginning == true){
            endposreached = 0;
            startPosX = this.startCell.getX();
            startPosY = this.startCell.getY();
            endTargetX = this.endCell.getX();
            endTargetY = this.endCell.getY();
            tempTargetX = endCell.getRealX() - startCell.getRealX();
            tempTargetY = endCell.getRealY() - startCell.getRealY();
            System.out.println(tempTargetX);
            System.out.println(tempTargetY);
            System.out.println(startCell.getX());
            System.out.println(startCell.getY());
            System.out.println(endCell.getX());
            System.out.println(endCell.getY());
            System.out.println("StartX" + startCell.getRealX());
            System.out.println("StartY" + startCell.getRealY());
            System.out.println("EndX" + endCell.getRealX());
            System.out.println("EndY" + endCell.getRealY());
            System.out.println(endCell.getDirLetter());
            beginning = false;}

        //tempTargetX = endTargetX - startPosX;
        //tempTargetY = endTargetY - startPosY;
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------- Starting in X direction ---------------------------------------------------------------------------------------
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        if ((((startPosY % 2) == 1) || startPosY == 0) &amp;&amp; (startPosX != endTargetX))

        //&lt;editor-fold defaultstate="collapsed" desc="Verfahren in X-Achse"&gt;
        //vergleicht, ob sich der Roboter in einem Gang aufhält, in dem er in X Richtig fahren kann{
            //&lt;editor-fold defaultstate="collapsed" desc="Ausrichtung nach X-Achse"&gt;
            if (startPosX &gt; endTargetX &amp;&amp; !(startPosPhi == 270)){
                sendTurnAngle("S");}
            if (startPosX &lt; endTargetX &amp;&amp; !(startPosPhi == 90)){
                sendTurnAngle("N");}
            //&lt;/editor-fold&gt;
            if (directionFree == true){
                if (((tempTargetX % (2 * fieldsize) == 0) &amp;&amp; (startCell.getX() % 2 == 1)) || ((tempTargetX % (2 * fieldsize) != 0) &amp;&amp; (startCell.getX() % 2 == 0))){
                    //verfahren win X wenn das Zielfeld nicht auf Maschinenhöhe ist
                    sendAndWait(tempTargetX, "X");
                    //v&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;Nicht so ganz - wenn Hinderniss koordinate anders Setzen
                    if (alternativeRoute == false){
                        startPosX = endTargetX;} else{
                        if (startPosPhi == 270){
                            runback("S");}
                        if (startPosPhi == 90){
                            runback("N");}}}
                if (((tempTargetX % (2 * fieldsize) != 0) &amp;&amp; (startCell.getX() % 2 == 1)) || ((tempTargetX % (2 * fieldsize) == 0) &amp;&amp; (startCell.getX() % 2 == 0))){
                    //&lt;editor-fold defaultstate="collapsed" desc="Verfahren in X wenn das Zeilfeld auf Maschinenhöhe ist"&gt;
                    if (startPosY == endTargetY){
                        sendAndWait(tempTargetX, "X");
                        if (alternativeRoute == false){
                            startPosX = endTargetX;} else{
                            if (startPosPhi == 270){
                                runback("S");}
                            if (startPosPhi == 90){
                                runback("N");}}} else{
                        if (tempTargetX &lt; 0){
                            tempTargetX = tempTargetX * (-1);

                            do{
                                // sM.readAndSendPhase();
                                // Mitgegebene Wete sind(int Check,int X,int Y,int Phi)
                                comView.setKoords((tempTargetX - (fieldsize - 1)), 0, 0);} while (comView.getReady() == 0);
                            if (alternativeRoute == false){
                                startPosX = endTargetX - 1;} else{
                                if (startPosPhi == 270){
                                    runback("S");}
                                if (startPosPhi == 90){
                                    runback("N");}}} else{

                            do{
                                // Mitgegebene Wete sind(int Check,int X,int Y,int Phi)
                                //   sM.readAndSendPhase();
                                comView.setKoords((tempTargetX - (fieldsize - 1)), 0, 0);} while (comView.getReady() == 0);
                            if (alternativeRoute == false){
                                startPosX = endTargetX;} else{
                                if (startPosPhi == 270){
                                    runback("S");}
                                if (startPosPhi == 90){
                                    runback("N");}}}}
                    //&lt;/editor-fold&gt;}} else{
                /*
                 }
                 if (endTargetX % 2 == 0)
                 {
                 //&lt;editor-fold defaultstate="collapsed" desc="Zurückfahren wenn in "Sackgasse""&gt;
                 check = 1;
                 do
                 {
                 turnPhi = 180;
                 comView.setKoords(check, 0, 0, turnPhi);
                 //check = 0;
                 //turn arround
                 } while (comView.getReady() == 0);
                 // Run a Field Back
                 check = 1;
                 do
                 {
                 comView.setKoords(check, korrekturX, 0, 0);
                 //check = 0;
                 } while (comView.getReady() == 0);
                 //&lt;/editor-fold&gt;
                 }
                 */}
            /*Hinderniss aufgetreten__________________________________
             metode um über LCB zu steuern!
             */
            //&lt;/editor-fold&gt;}

        //-----------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------- Starting in Y direction ---------------------------------------------------------------------------------------
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        if ((startPosX % 2) == 1 &amp;&amp; (startPosY != endTargetY)){

            //&lt;editor-fold defaultstate="collapsed" desc="Ausrichtung nach Y-Achse"&gt;
            if (startPosY &gt; endTargetY &amp;&amp; !(startPosPhi == 0)){
                sendTurnAngle("W");}
            if (startPosY &lt; endTargetY &amp;&amp; !(startPosPhi == 180)){
                sendTurnAngle("E");}
            //&lt;/editor-fold&gt;
            if (directionFree == true){
                if (((tempTargetY % (2 * fieldsize) == 0) &amp;&amp; (startCell.getY() % 2 == 1)) || ((tempTargetY % (2 * fieldsize) != 0) &amp;&amp; (startCell.getY() % 2 == 0))){
                    //verfahren in Y wenn das Zielfeld nicht auf Maschinenhöhe ist
                    sendAndWait(tempTargetY, "Y");
                    if (alternativeRoute == false){
                        startPosY = endTargetY;} else{
                        if (startPosPhi == 0){
                            runback("W");}
                        if (startPosPhi == 180){
                            runback("E");}}}
                if (((tempTargetY % (2 * fieldsize) != 0) &amp;&amp; (startCell.getY() % 2 == 1)) || ((tempTargetY % (2 * fieldsize) == 0) &amp;&amp; (startCell.getY() % 2 == 0))){
                    //&lt;editor-fold defaultstate="collapsed" desc="Verfahren in Y wenn das Zeilfeld auf Maschinenhöhe ist"&gt;
                    if (startPosX == endTargetX){
                        sendAndWait(tempTargetY, "Y");
                        if (alternativeRoute == false){
                            startPosY = endTargetY;} else{
                            if (startPosPhi == 0){
                                runback("W");}
                            if (startPosPhi == 180){
                                runback("E");}}} else{
                        if (tempTargetY &lt; 0){
                            tempTargetY = tempTargetY * (-1);

                            do{
                                //   sM.readAndSendPhase();
                                // Mitgegebene Wete sind(int Check,int X,int Y,int Phi)
                                comView.setKoords((tempTargetY - (fieldsize - 1)), 0, 0);} while (comView.getReady() == 0);
                            if (alternativeRoute == false){
                                startPosY = endTargetY - 1;} else{
                                if (startPosPhi == 0){
                                    runback("W");}
                                if (startPosPhi == 180){
                                    runback("E");}}

                            do{
                                //       sM.readAndSendPhase();
                                // Mitgegebene Wete sind(int Check,int X,int Y,int Phi)
                                comView.setKoords((tempTargetY - (fieldsize - 1)), 0, 0);} while (comView.getReady() == 0);
                            if (alternativeRoute == false){
                                startPosY = endTargetY;} else{
                                /*
                                 RUNBACK
                                 */}}
                        //&lt;/editor-fold&gt;}} else{
//NOT SUPPORTED JET_______________________________________________________________________________________________________________________________________________________________________________________
               /*     if (endTargetX % 2 == 0)
                     {
                     //&lt;editor-fold defaultstate="collapsed" desc="Zurückfahren wenn in "Sackgasse""&gt;
                     check = 1;
                     do
                     {
                     turnPhi = 180;
                     comView.setKoords(check, 0, 0, turnPhi);
                     //check = 0;
                     //turn arround
                     } while (comView.getReady() == 0);
                     // Run a Field Back
                     check = 1;
                     do
                     {
                     comView.setKoords(check, korrekturX, 0, 0);
                     //check = 0;
                     } while (comView.getReady() == 0);
                     //&lt;/editor-fold&gt;
                     }*/}

                // Drehen richtung Maschine}}
        if (endTargetX == startPosX &amp;&amp; endTargetY == startPosY){
            //&lt;editor-fold defaultstate="collapsed" desc="An Zielposition zur Maschine drehen"&gt;
            if (endCell.getDirLetter() != null){
                sendTurnAngle(endCell.getDirLetter());}

            //&lt;/editor-fold&gt;
            endposreached = 1;
            startCell = endCell;
            lcb.setRun(false);

            beginning = true;}}
    //--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    //------------------------------------------------------- ENDE DER RUN METODE ----------------------------------------------------------------------------------------------------
    //--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</source-code>
          </source-codes>
        </operation>
        <operation id="ob5352c7a5d6c4844acb32822f7d5535f556" name="goStart" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="currX" type="int" type-id="int" default-value="" />
            <parameter id="" name="currY" type="int" type-id="int" default-value="" />
            <parameter id="" name="dir" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws InterruptedException{
        lcb.setRun(false);
        sendAndWait(startCell.getRealY() - currY, "Y");
        sendTurnAngle(dir);
        if (startCell.getRealX() - currX &lt; 0){
            sendAndWait(-startCell.getRealX() + currX, "X");} else{
            sendAndWait(startCell.getRealX() - currX, "X");}}</source-code>
          </source-codes>
        </operation>
        <operation id="of4b18a15852748e29e31875576fcdf8a557" name="sendAndWait" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="targetposX" type="int" type-id="int" default-value="" />
            <parameter id="" name="travelDir" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws InterruptedException //Sendet Koordinaten ans Roboview und wartet darauf, dass das Roboview sein Ziel erreicht hat{

        int targetfieldX = targetposX;
        if (targetfieldX &lt; 0){
            targetfieldX = (-1) * targetfieldX;}
        do{
            if (obstacleOccured == true){
                switch (travelDir){
                    case "X":
                        viewX = comView.getxAktuell();
                        comView.setKoords(comView.getxAktuell(), 0, 0);
                        break;
                    case "Y":
                        viewY = comView.getyAktuell();
                        comView.setKoords(comView.getyAktuell(), 0, 0);
                        break;
                    default:}
                alternativeRoute = true;} else{
                //        sM.readAndSendPhase();
                // Mitgegebene Wete sind(int Check,int X,int Y,int Phi)
                comView.setKoords(targetfieldX, 0, 0);}} while (comView.getReady() == 0);
        do{
            comView.setGo(1);} while (comView.getEnde() == 0);
        comView.setGo(0);}</source-code>
          </source-codes>
        </operation>
        <operation id="o9f65989b29874962b604f76b7f76af0e557" name="sendTurnAngle" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="getCase" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws InterruptedException //Metode zum Umrechnen von Absolut in Inkrementalkoordinaten Als Mitgabewert wird ein String mit N/E/S/W Verwendet{
        switch (getCase){
            case "N":
                lcb.setRun(false);

                do{
                    turnPhi = -(0 - startPosPhi + 90);
                    if (turnPhi &lt; - 180){
                        turnPhi = 360 + turnPhi;
                        /*
                         * if (turnPhi &gt;= 360)
                         {
                         turnPhi = turnPhi - 360;
                         }
                         */}

                    // Mitgegebene Wete sind(int Check,int X,int Y,int Phi)
                    //      sM.readAndSendPhase();
                    comView.setKoords(0, 0, turnPhi);} while (comView.getReady() == 0);
                do{
                    comView.setGo(1);} while (comView.getEnde() == 0);
                comView.setGo(0);
                startPosPhi = 90;
                lcb.setRun(true);
                break;
            case "E":
                lcb.setRun(false);

                do{
                    turnPhi = -(0 - startPosPhi + 180);
                    if (turnPhi &lt; 180){
                        turnPhi = -360 + turnPhi;
                        /*
                         if (turnPhi &gt;= 360)
                         {
                         turnPhi = turnPhi - 360;
                         }
                         * */}

                    //    sM.readAndSendPhase();
                    // Mitgegebene Wete sind(int Check,int X,int Y,int Phi)
                    comView.setKoords(0, 0, turnPhi);} while (comView.getReady() == 0);
                do{
                    comView.setGo(1);} while (comView.getEnde() == 0);
                comView.setGo(0);
                startPosPhi = 180;
                lcb.setRun(true);
                break;
            case "S":
                lcb.setRun(false);

                do{
                    turnPhi = -(0 - startPosPhi + 270);
                    if (turnPhi &lt; 180){
                        turnPhi = -360 + turnPhi;
                        /*
                         if (turnPhi &gt;= -360)
                         {
                         turnPhi = turnPhi - 360;
                         }
                         */}

                    //         sM.readAndSendPhase();
                    // Mitgegebene Wete sind(int Check,int X,int Y,int Phi)
                    comView.setKoords(0, 0, turnPhi);} while (comView.getReady() == 0);
                do{
                    comView.setGo(1);} while (comView.getEnde() == 0);
                comView.setGo(0);
                startPosPhi = 270;
                lcb.setRun(true);
                break;
            case "W":
                lcb.setRun(false);

                do{
                    turnPhi = -(0 - startPosPhi);
                    if (turnPhi &lt; 180){
                        turnPhi = -360 + turnPhi;
                        /*if (turnPhi &gt;= 360)
                         {
                         turnPhi = turnPhi - 360;
                         }*/}
                    //             sM.readAndSendPhase();
                    // Mitgegebene Wete sind(int Check,int X,int Y,int Phi)
                    comView.setKoords(0, 0, turnPhi);} while (comView.getReady() == 0);
                do{
                    comView.setGo(1);} while (comView.getEnde() == 0);
                comView.setGo(0);
                startPosPhi = 0;
                lcb.setRun(true);
                break;
            default:
                lcb.setRun(false);

                do{
                    turnPhi = (0 - startPosPhi + 270);
                    if (turnPhi &lt; - 180){
                        turnPhi = 360 + turnPhi;
                        if (turnPhi &gt;= 360){
                            turnPhi = turnPhi - 360;}}

                    // Mitgegebene Wete sind(int Check,int X,int Y,int Phi)
                    //           sM.readAndSendPhase();
                    comView.setKoords(0, 0, turnPhi);} while (comView.getReady() == 0);
                do{
                    comView.setGo(1);} while (comView.getEnde() == 0);
                comView.setGo(0);
                startPosPhi = 270;
                lcb.setRun(true);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o56a69f298a044839be87d06077c967a5557" name="runback" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="facingdir" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws InterruptedException{

        switch (facingdir){
            case ("N"):
                sendTurnAngle("S");
                break;
            case ("E"):
                sendTurnAngle("W");
                break;
            case ("S"):
                sendTurnAngle("N");
                break;
            case ("W"):
                sendTurnAngle("E");
                break;}
        viewXrest = viewX;
        viewYrest = viewY;
        viewX = viewX % fieldsize;
        viewY = viewY % fieldsize;
        if (startPosX % 2 == 0){
            if ((viewXrest - viewX) % (2 * fieldsize) == 0){
                viewX = viewX + fieldsize;}}
        if (startPosX % 2 == 1){
            if ((viewXrest - viewX) % (2 * fieldsize) &gt; 0){
                viewX = viewX + fieldsize;}}
        if (startPosX % 2 == 1){
            if ((viewXrest - viewX) % (2 * fieldsize) &gt; 0){
                viewX = viewX + fieldsize;}}
        if (startPosY % 2 == 1){
            if ((viewYrest - viewY) % (2 * fieldsize) == 0){
                viewY = viewY + fieldsize;}}
        if (startPosY % 2 == 0){
            if ((viewYrest - viewY) % (2 * fieldsize) &gt; 0){
                viewY = viewY + fieldsize;}}
        switch (facingdir){
            case ("N"):
                sendAndWait(viewX, "X");
                break;
            case ("E"):
                sendAndWait(viewY, "Y");
                break;
            case ("S"):
                sendAndWait(viewX, "X");
                break;
            case ("W"):
                sendAndWait(viewY, "Y");
                break;}

        switch (facingdir){
            case ("N"):
                sendTurnAngle("N");
                break;
            case ("E"):
                sendTurnAngle("E");
                break;
            case ("S"):
                sendTurnAngle("S");
                break;
            case ("W"):
                sendTurnAngle("W");
                break;}}

    /*---------------------------------------------------------------------------------------------------------------------------
     ---------------------------------------------------- GET and SET -----------------------------------------------------------
     ----------------------------------------------------------------------------------------------------------------------------
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oc503ac1e51e04b84881078cdbe1bf26b557" name="getEndPosReached" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return endposreached;}</source-code>
          </source-codes>
        </operation>
        <operation id="ocb92d6d8e5fd403aa7f3d8a92d8f1386557" name="getStartPosX" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return startPosX;}</source-code>
          </source-codes>
        </operation>
        <operation id="o8c2d52c6a5e143c5af5e8ff034fc104a557" name="setStartPosX" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="startPosX" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.startPosX = startPosX;}</source-code>
          </source-codes>
        </operation>
        <operation id="obd773cd16409498a8af11879cf16cbe3558" name="getStartPosY" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return startPosY;}</source-code>
          </source-codes>
        </operation>
        <operation id="o1ee9edc66cfc43b2b99c2fc64841703a558" name="setStartPosY" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="startPosY" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.startPosY = startPosY;}</source-code>
          </source-codes>
        </operation>
        <operation id="of996402c6ccf4dcc80713f9e1bad3bd2558" name="getStartPosPhi" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return startPosPhi;}</source-code>
          </source-codes>
        </operation>
        <operation id="oc33995a1bfcc4c24bd4606d8da718320558" name="setStartPosPhi" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="startPhi" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.startPosPhi = startPhi;}</source-code>
          </source-codes>
        </operation>
        <operation id="o1d40c7adc5114903a8aaaa153acdc818558" name="setEndTarget" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="cell" type="Cell" type-id="Cell" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        endCell = cell;}</source-code>
          </source-codes>
        </operation>
        <operation id="o123a4335a54c4b8998ee1d3709bc2356558" name="setStartCell" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="cell" type="Cell" type-id="Cell" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        startCell = cell;}</source-code>
          </source-codes>
        </operation>
        <operation id="od2e2a3f0dfb3483ab7708e0d5d1b32b2558" name="setStartCell" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="x" type="int" type-id="int" default-value="" />
            <parameter id="" name="y" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        startCell = fc.cell[x[y;}</source-code>
          </source-codes>
        </operation>
        <operation id="o6818769ca88549c99b106fd3fa2bca9f558" name="setEndTarget" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="x" type="int" type-id="int" default-value="" />
            <parameter id="" name="y" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        endCell = fc.cell[x[y;}</source-code>
          </source-codes>
        </operation>
        <operation id="o94726ba3516443d6bce218bf053a9c03558" name="setEndTarget" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="machine" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        endCell = fc.machineMap.get(machine);}</source-code>
          </source-codes>
        </operation>
        <operation id="o5f5f17a3acab4b04adb545f53dcd33e8558" name="setEndPosDirLetter" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="dirLetter" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.endPosDirLetter = dirLetter;}</source-code>
          </source-codes>
        </operation>
        <operation id="o8a7179fd39d24d128b2c85b78fcdb0c2558" name="setNewTempTarget" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="x" type="int" type-id="int" default-value="" />
            <parameter id="" name="y" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        tempTargetX = x;
        tempTargetY = y;}</source-code>
          </source-codes>
        </operation>
        <operation id="oa0da1b1e9be944669dc57467c4f7017b558" name="wayX" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="oldTarget" type="int" type-id="int" default-value="" />
            <parameter id="" name="newTarget" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        tempTargetX = oldTarget - newTarget;
        return tempTargetX;}</source-code>
          </source-codes>
        </operation>
        <operation id="o417226116543406a82edcf6f25145aad558" name="wayY" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="oldTarget" type="int" type-id="int" default-value="" />
            <parameter id="" name="newTarget" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        tempTargetY = newTarget - oldTarget;
        return tempTargetY;}</source-code>
          </source-codes>
        </operation>
        <operation id="o09676a8eb4b04c6393af0fc38ad229c5558" name="setObstacleOccured" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="obstacle" type="Boolean" type-id="Uml.Boolean" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        obstacleOccured = obstacle;}

    // --------------------------------------------------------------------------------------------------------------------------------------------------
    // ---------------------------------------------------- PSVM zum Testen - einfach auskommentieren im Verbund ----------------------------------------
    // --------------------------------------------------------------------------------------------------------------------------------------------------</source-code>
          </source-codes>
        </operation>
        <operation id="o907fe0dd618544319e8b681659ebe44c558" name="main" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws SocketException, IOException, InterruptedException{
        ComView comView = ComView.getInstance();
        comView.start();
        Drive drive = new Drive();
        drive.setStartCell(0, 0);
        drive.setStartPosPhi(180);
        //drive.runback("S");

        drive.setEndTarget(5, 0);
        do{
            drive.run();} while (drive.getEndPosReached() == 0);

        drive.setEndTarget(5, 4);
        drive.setStartPosPhi(0);
        do{
            drive.run();} while (drive.getEndPosReached() == 0);
        System.out.println("End");
        /*
         drive.setEndTarget(7, 7);
         do
         {
         drive.run();
         } while (drive.getEndPosReached() == 0);
         */}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di865186725771818152" cid="C002" type="class" name="LaserControlledBreaking" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/27/2014 18:03:29">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="aa32dd83b4771475292a120cb450993bc585" name="hindernisdistanz" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="ae4b624269d5244b9bca2d2a1745ea8c9585" name="running" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" default-value="true" />
      </attributes>
      <operations>
        <operation id="oc4e0188565b94fefa6a46ba79382d301585" name="isRun" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return running;}</source-code>
          </source-codes>
        </operation>
        <operation id="o26b8d70643ac43dab906715c726238e6585" name="setRun" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="run" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.running = run;}
    static Laser tim;
    private static LaserControlledBreaking instance;</source-code>
          </source-codes>
        </operation>
        <operation id="o460a84ac7917496dad38db8a6a916e63585" name="getInstance" type="LaserControlledBreaking" type-id="LaserControlledBreaking" visibility="public" abstract="false" virtual="false" static="true">
          <source-codes>
            <source-code language="Undefined">{
        if (instance == null){
            instance = new LaserControlledBreaking();}
        return instance;}</source-code>
          </source-codes>
        </operation>
        <operation id="odf51783e2ffd44aaa6ae8450136a119f585" name="LaserControlledBreaking" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        speedPercent = 100;
        hindernisdistanz = DEFAULT_DISTANCE;
        lastSpeedPercent = DEFAULT_PERCENT;
        tim = Laser.getInstance();}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o555199c155e2472db9d9a203e379e747585" name="run" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        while (true) //(running == true)   //didnt start after resetting{
            try{
                tim.getNewMeasurementData();} catch (IOException ex){
                Logger.getLogger(ComView.class.getName()).log(Level.SEVERE, null, ex);}
            hindernisdistanz = tim.getDistance(0);

            //hindernisdistanz = (int)(Math.random() * 5000); //Simulation des Laserwertes zum Test in main-Methode;
            speedPercent = (int) ((hindernisdistanz - MINDIST) * FACT);

            if (speedPercent &gt; lastSpeedPercent){
                speedPercent = lastSpeedPercent + 10;

                try{
                    Thread.sleep(100);} catch (InterruptedException ex){
                    Logger.getLogger(ComView.class.getName()).log(Level.SEVERE, null, ex);}}

            lastSpeedPercent = speedPercent;}}</source-code>
          </source-codes>
        </operation>
        <operation id="ob01fd3c6c58540c09c2012876b75aec6585" name="getBremsfaktor" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        if (running){            
            if (speedPercent &gt; 100){
                speedPercent = 100;} else if (speedPercent &lt; 0){
                speedPercent = 0;}} else{
            speedPercent = 100;}
        return speedPercent;}</source-code>
          </source-codes>
        </operation>
        <operation id="o69bf34fc73214138968827e0ebf00f3f585" name="main" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        LaserControlledBreaking lcb = new LaserControlledBreaking();
        lcb.start();
        int i = 0;
        while (true){

            try{
                sleep(500);} catch (InterruptedException ex){}
            if (i++ &gt; 5){
                lcb.setRun(false);
                System.out.println(lcb.getBremsfaktor() + "/" + lcb.isRun());
                try{
                    sleep(3000);
                    i = 0;} catch (InterruptedException ex){}
                lcb.setRun(true);}
            System.out.println(lcb.getBremsfaktor() + "/" + lcb.isRun());}}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di170233765231809028" cid="C003" type="class" name="JobController" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/27/2014 18:03:29">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="ab61a05ffdedb457b998ae2c582e32478629" name="fc" type="FieldCommander" type-id="FieldCommander" visibility="package" abstract="false" virtual="false" />
        <attribute id="a864ba49bf9374c5c8665e50e857351ad629" name="hnd" type="Handler" type-id="Handler" visibility="package" abstract="false" virtual="false" />
        <attribute id="a8cea6c268b8c426c82ab93af8fcbf5ae629" name="roboNameIdx" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="a2db1408230a34dca97edc5e1d1fd124c629" name="prodMachine" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" />
        <attribute id="ab907bd241b124f83a41c04eced8d7d59629" name="prodJob" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" />
        <attribute id="a44b2351c422b4d199d3f2f3b96b0ed42629" name="jobCounter" type="int" type-id="int" visibility="public" abstract="false" virtual="false" default-value="0" />
      </attributes>
      <operations>
        <operation id="ofdd8443e812044a1827a99ec870cd4ec629" name="getInstance" type="JobController" type-id="JobController" visibility="public" abstract="false" virtual="false" static="true">
          <source-codes>
            <source-code language="Undefined">{
        if (instance == null){
            instance = new JobController();}
        return instance;}</source-code>
          </source-codes>
        </operation>
        <operation id="o18063ff54cb94f26b0ee0a2ead1f821f629" name="JobController" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        setRoboNameIdx("MrPink"); //Default name overwritten by Config-File
        fc = FieldCommander.getInstance();}</source-code>
          </source-codes>
        </operation>
        <operation id="o22ac53292b6a4891b20007f849aae697629" name="setNextExploJob" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined"> throws Exception{
        jobCounter++;
        if (explorationWays[ROUND[FIELDHALF[roboNameIdx[jobCounter == null){
            throw new Exception("no more Jobs for this robo");}}</source-code>
          </source-codes>
        </operation>
        <operation id="o6864f7f5a206470aab4c978a203f7982629" name="getExploJob" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return explorationWays[ROUND[FIELDHALF[roboNameIdx[jobCounter;}

    /**
     * store received MachineList in ProdPhase into our own machineMap
     * 
     * @param mList (List of Machines; unsorted)
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o47c550759624484f9efac90a13742ad1629" name="setMachineTypesFromRefBox" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="mList" type="List" type-id="List" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        for (Machine m : mList)    //iterate through machines{
            Cell cell = fc.machineMap.get(m.getName());      //get Cell of act. machine
            if (cell != null){
                int mNr = cell.getMachineNr();
                cell.setmTyp(m.getType());
                fc.machineMap.put(m.getName(), cell);}}}

    /**
     * get the Machine for searched type
     *
     * @param mType in "T1" to "T5"
     * @return corresponding machine "M1" to "M24"
     * @author roa
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o6d2c4a5d76ab4697823f48e018cb53e4629" name="getProdMachine" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="mType" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        for (String s : fc.machineMap.keySet())    //iterate through machines{
            Cell cell = fc.machineMap.get(s);   //get Cell of act. machine
            if (cell.getmTyp().equals(mType))    //compare searched Type{
                return s;                       //return corr. machine}}
        return null;                            //nothing found/error}</source-code>
          </source-codes>
        </operation>
        <operation id="oab61a71e5325454486dda9d785e65d6c629" name="getProdJob" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return prodJob;}

    /**
     * Decide which Job/Machine is perfect for the actual Robo //has to be
     * discuss with the strategy of Vincent
     *
     * @param product
     * @return Machine Name
     */
    /*    public void findActProdJobMachine()
     {
     switch (roboNameIdx)
     {
     case 0:
     //Pink producing P1 on T3
     //first T1 and first T2 for intermediate Products (S1/S2)                
     for (int i = 0; i &lt;= 24; i++)
     {
     Cell c;
     c = fc.machineMap.get("M" + i);
     //search next T1
     }
     break;
     case 1:
     //Brown producing P2 on T4
     //Second T1 and second T2 for his intermediate Products
     break;
     case 2:
     //Blond producing P3 on T5
     //No intermediate product
     break;
     default:
     }

     for (int i = 0; i &lt;= 10; i++)
     {
     Order order = hnd.orderList.get(i);

     switch (order.getProduct())
     {
     case P1:
     break;
     case P2:
     break;
     case P3:
     break;
     }
     }
     //finding matching machine for Typ/Robo corresponding to actual Order from refbox
     //just a demo because of missing Algorithm//algorithm to catch next 
     //handler.orderList.get();
     prodJob = "P3";
     prodMachine = "M9";
     }*/
    /**
     * returns the delivery Gate, if is open to deliver the requested Product
     *
     * @param product
     * @return DeliveryGate
     * @author roa
     *
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o2194828db030459a941be884bd5d2645629" name="isProductDelGateOpen" type="DeliveryGate" type-id="DeliveryGate" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="product" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        for (Order order : hnd.orderList){   //Matches this product ?
            if (order.getProduct().name().equals(product)){   //more Products needed ?
                if (order.getQuantityRequested() &gt; 0){   //is the delivery gate already open
                    if (order.getDeliveryPeriodBegin() &lt;= hnd.game.getGameTime().getSec()){   //is the delivery gate still open in realistic time
                        if (order.getDeliveryPeriodEnd() &gt;= hnd.game.getGameTime().getSec() - REALISTICTIME){
                            return order.getDeliveryGate();}}}}}
        return null;}</source-code>
          </source-codes>
        </operation>
        <operation id="o821a4885b9dd4ae282a24a6e7feaaacc629" name="getStartCell" type="Cell" type-id="Cell" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        int x = startCell[FIELDHALF[roboNameIdx[0;
        int y = startCell[FIELDHALF[roboNameIdx[1;
        return fc.cell[x[y;}</source-code>
          </source-codes>
        </operation>
        <operation id="oebb046411c1f4ac2a3f67696f7d63d9a630" name="setRoboNameIdx" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="roboName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        switch (roboName){
            case "MrPink":
                roboNameIdx = 0;
                break;
            case "MrBrown":
                roboNameIdx = 1;
                break;
            case "MrBlond":
                roboNameIdx = 2;
                break;
            default:
                roboNameIdx = -1;}}

    /**
     * Found the nearest opimal cell to the machine (LoadCell)
     *
     * @param machine the optimal cell and phi beside the machine
     * @return
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o74e0af8de71d4090989a4cdb07584103630" name="getLoadCellNearMachine" type="Cell" type-id="Cell" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="machine" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        int x, y;
        String loadDirection;
        Cell machineCell, loadCell;

        machineCell = fc.machineMap.get(machine);
        x = machineCell.getX();
        y = machineCell.getY();
        switch (machineCell.getDirLetter()){
            case "W":
                y--;
                loadDirection = "E";
                break;
            case "N":
                x++;
                loadDirection = "S";
                break;
            case "E":
                y++;
                loadDirection = "W";
                break;
            case "S":
                x--;
                loadDirection = "N";
                break;
            default:
                loadDirection = "S";}
        Cell.getPhiFromDirLetter(loadDirection);
        loadCell = fc.cell[x[y;
        loadCell.setDirection(Cell.getPhiFromDirLetter(loadDirection));
        return loadCell;}</source-code>
          </source-codes>
        </operation>
        <operation id="o3aee2cdd1c6e4478959724f4442bf1b3630" name="getRoboNameIdx" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return roboNameIdx;}</source-code>
          </source-codes>
        </operation>
        <operation id="oc69cb7d92020444da3a5cc1f5fb2813a630" name="setRoboNameIdx" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="roboNameIdx" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.roboNameIdx = roboNameIdx;}</source-code>
          </source-codes>
        </operation>
        <operation id="oab0487ce541440af89a16e37ed85632c630" name="main" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        try{
            JobController way = new JobController();
            way.setRoboNameIdx("MrPink");
            System.out.println("Start" + way.getStartCell());
            System.out.println(way.getProdMachine("T5"));
            while (true){
                System.out.println(way.getExploJob());
                way.setNextExploJob();}} catch (Exception ex){
            System.out.println(ex.getMessage());}}}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di154612804816717276" cid="C004" type="class" name="StateMachine" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/27/2014 18:03:29">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a65329e136fd3424387dc3122e015bf8b780" name="running" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" />
        <attribute id="a98cc88fe43964f1298f821b570e118ca780" name="comView" type="ComView" type-id="ComView" visibility="private" abstract="false" virtual="false" />
        <attribute id="ad8c6b11ad0054a12af807dd44a5f2df1780" name="way" type="JobController" type-id="JobController" visibility="private" abstract="false" virtual="false" />
        <attribute id="aecae20fc311e4779aacd1992550485b4780" name="handler" type="Handler" type-id="Handler" visibility="private" abstract="false" virtual="false" />
        <attribute id="ae3c3f2e109f4478196809cdb21428f63780" name="drive" type="Drive" type-id="Drive" visibility="private" abstract="false" virtual="false" />
        <attribute id="a30c9895a5afe4d46bfa618c11e7b400e781" name="fc" type="FieldCommander" type-id="FieldCommander" visibility="private" abstract="false" virtual="false" />
        <attribute id="a2d98f4b04e054d16ab6f7f7a5772965f781" name="phase" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" />
        <attribute id="ab3f9e40ec29b4510905f4a0b76caf1bf781" name="state" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" />
        <attribute id="abba110231ffe40778d0fec706b4007e1781" name="exploStep" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" />
        <attribute id="a602bc49d364540a68d50e78503363318781" name="prodStep" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" />
        <attribute id="a2af2afaf228149418fcd30c9da696404781" name="ende" type="int" type-id="int" visibility="private" abstract="false" virtual="false" default-value="0" />
        <attribute id="a214c833ab95e4fcc8cf049378f601bde781" name="ready" type="int" type-id="int" visibility="private" abstract="false" virtual="false" default-value="0" />
        <attribute id="a809d69e1f14a4e3fa7c9fa1eedbace78781" name="phaseInt" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="a046451f771094559a078fdeeeaf681e7781" name="prodCount" type="int" type-id="int" visibility="private" abstract="false" virtual="false" default-value="0" />
        <attribute id="a8f44777fd1234e219dd15012ac071452781" name="prodFinalStep" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" default-value="false" />
      </attributes>
      <operations>
        <operation id="od52999e6382c479b99b0346de3b78898781" name="getInstance" type="StateMachine" type-id="StateMachine" visibility="public" abstract="false" virtual="false" static="true">
          <source-codes>
            <source-code language="Undefined">{
        return instance;}

    // Lampen Farben der Maschinen in der Explorationsphase</source-code>
          </source-codes>
        </operation>
        <operation id="ob157d40dcaad4284b0cb45335572041c781" name="StateMachine" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="handler" type="Handler" type-id="Handler" default-value="" />
            <parameter id="" name="way" type="JobController" type-id="JobController" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws InterruptedException{
        this.handler = handler;
        comView = ComView.getInstance();
        fc = FieldCommander.getInstance();
       
        this.way = way;

        instance = this;
         drive = new Drive();}</source-code>
          </source-codes>
        </operation>
        <operation id="o76972c0e69034cb485ab98d2eab28926781" name="setRunning" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="running" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.running = running;}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o56663fe257874870ac7803ded4d58c63781" name="run" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        while (running){
            readAndSendPhase();

            try{
                Thread.sleep(500);} catch (InterruptedException ex){
                Logger.getLogger(StateMachine.class.getName()).log(Level.SEVERE, null, ex);}

            switch (state){
                case "INIT":
                    Main.log.info("INIT");
                    break;
                case "WAIT_START":
                    Main.log.info("WAIT_START");
                    break;
                case "RUNNING":
                    Main.log.info("RUNNING");
                    break;
                case "PAUSED":
                    Main.log.info("PAUSED");
                    try{
                        Thread.sleep(1000);} catch (InterruptedException ex){}
                    break;}

            switch (phase){
                case "PRE_GAME":
                    Main.log.info("PRE_GAME");
                    preGamePhase();
                    break;
                case "EXPLORATION":
                    Main.log.info("EXPLORATION");
                    try{
                        explorationPhase();} catch (InterruptedException ex){
                        Main.log.error("InterruptException in EXPLORATION");}
                    break;
                case "PRODUCTION":
                    try{
                        productionPhase();} catch (InterruptedException ex){
                        Main.log.error("InterruptException in PRODUCTION");}
                    break;
                case "POST_GAME":
                    postGame();
                    break;}}}</source-code>
          </source-codes>
        </operation>
        <operation id="o1906bae01baa4cd19670d9e2687416bd781" name="readAndSendPhase" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        phase = handler.getPhase();
        state = handler.getState();

        if ("PRE_GAME".equals(phase)){
            phaseInt = 1;}
        if ("EXPLORATION".equals(phase)){
            phaseInt = 2;}
        if ("PRODUCTION".equals(phase)){
            phaseInt = 3;}
        if ("POST_GAME".equals(phase)){
            phaseInt = 4;}
        if ("PAUSED".equals(state)){
            phaseInt += 10;}
        if ("RUNNING".equals(state) &amp;&amp; phaseInt &gt; 10){
            phaseInt -= 10;}
        comView.setPhase(phaseInt);}</source-code>
          </source-codes>
        </operation>
        <operation id="o7609f68ff8024373bb159715e9563152782" name="preGamePhase" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        comView.setStation(0);
        comView.setKoords(0, 0, 0);
        exploStep = "START_ROBO";}</source-code>
          </source-codes>
        </operation>
        <operation id="ofa68e4a7143d42f9b6fcda0fe72c3ff9782" name="explorationPhase" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined"> throws InterruptedException{
        switch (exploStep) //Step in ExploPhase{
            case "START_ROBO":

                Main.log.debug("************* STEP START_ROBO*****************");

                drive.setStartCell(fc.cell[1[1);
                drive.setStartPosPhi(180);
                drive.goStart(4480, 400, "E");
                drive.setStartPosPhi(180);

                exploStep = "TO_START";
                break;

            case "TO_START":

                drive.setEndTarget(way.getLoadCellNearMachine(way.getExploJob())); // setEndTarget wird auf die Zelle direkt vor der Maschine gestzt
                Main.log.debug(way.getExploJob());
                Main.log.debug(way.getLoadCellNearMachine(way.getExploJob()).getX());
                Main.log.debug(way.getLoadCellNearMachine(way.getExploJob()).getY());

                do{
                    drive.run();} while (drive.getEndPosReached() == 0);
                comView.setStation(0);
                Main.log.debug("************* STEP TO_START*****************");
                exploStep = "AT_STATION";
                break;

            case "AT_STATION":

                comView.setKoords(0, 0, 0);

                Main.log.debug("&gt;&gt;&gt;&gt; MASCHINE" + way.getExploJob() + " ERREICHT &lt;&lt;&lt;&lt;&lt;");

                comView.setStation(1); // es soll nun ins stationsanfahren gehen

                ready = comView.getReady();

                if (ready == 1) // zuerst wird der weg gesetzt und bis er die postiion erreicht hat muss die variable go gesendet werden
                // ready kommt erst wenn er an position angekommen ist... 110 ms später kommt dann ende{
                    Main.log.debug("READY OK");

                    while (ende == 0){
                        comView.setGo(1);
                        Thread.sleep(110);
                        ende = comView.getEnde();
                        Main.log.debug("in while schlaufe");
                        ready = 0;}
                    comView.setGo(0);
                    Thread.sleep(110);
                    exploStep = "BACK";
                    Main.log.debug("************* ENDE*****************");
                    ende = 0;}
                break;

            case "BACK":
                comView.setStation(0);
                Main.log.debug("backward");

                int[ lamp = comView.getLamp();
                Main.log.debug("************* STEP BACK*****************");

                handler.sendMachine(way.getExploJob(), lamp); // hier wird der string der aktuellen maschine an die refbox gesendet
                Main.log.debug("STATION: " + way.getExploJob() + String.valueOf(lamp));

                comView.setKoords(-BACKWAY, 0, 0);
                ready = comView.getReady();
                if (ready == 1) // zuerst wird der weg gesetzt und bis er die postiion erreicht hat muss die variable go gesendet werden
                // ready kommt erst wenn er an position angekommen ist... 110 ms später kommt dann ende{
                    Main.log.debug("READY OK");

                    while (ende == 0){
                        comView.setGo(1);
                        Thread.sleep(110);
                        ende = comView.getEnde();
                        Main.log.debug("in while schlaufe");
                        ready = 0;}
                    comView.setGo(0);
                    Thread.sleep(110);
                    exploStep = "NEXT";
                    Main.log.debug("************* ENDE*****************");
                    ende = 0;}

                break;

            case "NEXT":
                comView.setStation(0);
                try{
                    way.setNextExploJob(); // hier wird der job auf die nächste nummer gesetzt} catch (Exception ex){
                    //no more job for this robo}

                exploStep = "TO_START";

                break;

            default:
                Main.log.warn("!!!!! OUT OFF PROGRAM !!!!!");
                comView.setKoords(0, 0, 0);
                break;}}</source-code>
          </source-codes>
        </operation>
        <operation id="o5c60fefda3424f419cef1b1281486083782" name="productionPhase" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined"> throws InterruptedException{

        if (way.getRoboNameIdx() == 2){

            switch (prodStep)   //Step in production{

                case "START_ROBO":
                    comView.setPhase(2);

                    Main.log.debug("************* STEP PROD  START_ROBO*****************");

                    prodStep = "TO_START";

                    break;

                case "TO_START":
                    //hier muss irgendwie die aktuelle position abgefragt werden können --&gt; nach explo

                    Main.log.debug("************* STEP PROD  TO_START*****************");

                    drive.setEndTarget(fc.cell[6[0);  //zum puck

                    do{
                        drive.run();} while (drive.getEndPosReached() == 0);

                    prodStep = "GRAB_PUCK";

                    break;

                case "GRAB_PUCK":

                    comView.setKoords(0, 0, 0);

                    Main.log.debug("&gt;&gt;&gt;&gt; MASCHINE" + way.getProdMachine("T3") + " ERREICHT &lt;&lt;&lt;&lt;&lt;");

                    comView.setStation(3); // es soll nun ins stationsanfahren gehen

                    ready = comView.getReady();

                    if (ready == 1) // zuerst wird der weg gesetzt und bis er die postiion erreicht hat muss die variable go gesendet werden
                    // ready kommt erst wenn er an position angekommen ist... 110 ms später kommt dann ende{
                        Main.log.debug("READY OK");

                        while (ende == 0){

                            comView.setGo(1);
                            Thread.sleep(110);
                            ende = comView.getEnde();
                            Main.log.debug("in while schlaufe");
                            ready = 0;}

                        comView.setGo(0);
                        Thread.sleep(110);
                        prodStep = "DRIVE_TO_T5";
                        Main.log.debug("************* ENDE*****************");
                        ende = 0;}

                    break;

                case "DRIVE_TO_T5":

                    drive.setEndTarget(way.getLoadCellNearMachine(way.getProdMachine("T5")));
                    do{
                        drive.run();} while (drive.getEndPosReached() == 0);

                    prodStep = "PROD";

                    break;

                case "PROD":

                    comView.setKoords(0, 0, 0);

                    Main.log.debug("&gt;&gt;&gt;&gt; MASCHINE" + way.getProdMachine("T5") + " ERREICHT &lt;&lt;&lt;&lt;&lt;");

                    comView.setStation(4); // es soll nun ins stationsanfahren gehen

                    if (ready == 1){
                        Main.log.debug("READY OK");

                        while (ende == 0){
                            comView.setGo(1);
                            Thread.sleep(110);
                            ende = comView.getEnde();
                            ready = 0;}
                        comView.setGo(0);
                        Thread.sleep(110);}

                    comView.setStation(9); // after stationsanfahren stay to the machine and wait the end of the work

                    ready = comView.getReady();

                    if (ready == 1){
                        Main.log.debug("READY OK");

                        while (ende == 0){
                            comView.setGo(1);
                            Thread.sleep(110);
                            ende = comView.getEnde();
                            ready = 0;}

                        comView.setGo(0);
                        Thread.sleep(110);

                        if (way.isProductDelGateOpen("P3").getNumber() &gt; 0)   //Delivery signal for P3{
                            prodStep = "DELIVER";}

                        Main.log.debug("************* ENDE*****************");
                        ende = 0;
                        comView.setStation(5);}

                    break;

                case "TO_DELIVERY":
                    drive.setEndTarget(way.getLoadCellNearMachine("D1"));// Delivery Gate
                    do{
                        drive.run();} while (drive.getEndPosReached() == 0);

                    prodStep = "DELIVER";

                    break;

                case "DELIVER":

                    // DELIVER SEQUENCE
                    comView.setKoords(0, 0, 0);

                    Main.log.debug("&gt;&gt;&gt;&gt; MASCHINE DELIVERY ERREICHT &lt;&lt;&lt;&lt;&lt;");

                    comView.setStation(5);

                    ready = comView.getReady();

                    if (ready == 1){
                        Main.log.debug("READY OK");

                        while (ende == 0){

                            comView.setGo(1);
                            Thread.sleep(110);
                            ende = comView.getEnde();

                            ready = 0;}

                        comView.setGo(0);
                        Thread.sleep(110);
                        prodStep = "NEXT";
                        comView.setStation(3);
                        Main.log.debug("************* ENDE*****************");
                        ende = 0;}
                    break;

                case "NEXT":

                    comView.setKoords(-BACKWAY, 0, 0);

                    if (ready == 1){
                        Main.log.debug("READY OK");

                        while (ende == 0){

                            comView.setGo(1);
                            Thread.sleep(110);
                            ende = comView.getEnde();

                            ready = 0;}

                        comView.setGo(0);
                        Thread.sleep(110);}

                    prodStep = "START_ROBO";

                /**
                 * *****************************
                 * case "CHECK_RECYCLING": //Check every cell to serach for a
                 * machine with junk int k = 1, l = 1; do { do { k++; } while
                 * (); //if this cell contain junk l++; } while (); //if this
                 * cell contain junk break; *********************************
                 */
                default:
                    Main.log.debug("!!!!! OUT OFF PROGRAM !!!!!");
                    comView.setKoords(0, 0, 0);
                    break;}}

        //Production state machine for Pink and Blond
        if (way.getRoboNameIdx() == 1){

            switch (prodStep)   //Step in production{

                case "START_ROBO":
                    prodCount = 0;

                    comView.setPhase(2);

                    Main.log.debug("************* STEP PROD  START_ROBO*****************");

                    prodStep = "TO_START";
                    break;

                case "TO_START":
                    //hier muss irgendwie die aktuelle position abgefragt werden können --&gt; nach explo

                    Main.log.debug("************* STEP PROD  TO_START*****************");

                    drive.setEndTarget(fc.cell[6[0);  //zum puck

                    do{
                        drive.run();} while (drive.getEndPosReached() == 0);

                    prodStep = "GRAB_PUCK";
                    break;

                case "GRAB_PUCK":

                    comView.setKoords(0, 0, 0);

                    comView.setStation(3); // es soll nun ins stationsanfahren gehen

                    ready = comView.getReady();

                    if (ready == 1) // zuerst wird der weg gesetzt und bis er die postiion erreicht hat muss die variable go gesendet werden
                    // ready kommt erst wenn er an position angekommen ist... 110 ms später kommt dann ende{
                        Main.log.debug("READY OK");

                        while (ende == 0){

                            comView.setGo(1);
                            Thread.sleep(110);
                            ende = comView.getEnde();
                            Main.log.debug("in while schlaufe");
                            ready = 0;}

                        comView.setGo(0);
                        Thread.sleep(110);

                        prodStep = "DRIVE_TO_T";

                        Main.log.debug("************* ENDE*****************");
                        ende = 0;}
                    break;

                case "DRIVE_TO_T":

                    prodCount++;
                    /*Switch to select the machine to drive to*/
                    switch (prodCount){
                        case 1:
                            drive.setEndTarget(way.getLoadCellNearMachine(way.getProdMachine("T1")));
                            break;
                        case 2:
                            drive.setEndTarget(way.getLoadCellNearMachine(way.getProdMachine("T2")));
                            break;
                        case 3:
                            drive.setEndTarget(way.getLoadCellNearMachine(way.getProdMachine("T1")));
                            break;
                        case 4:
                            drive.setEndTarget(way.getLoadCellNearMachine(way.getProdMachine("T2")));
                            break;
                        case 5:
                            drive.setEndTarget(way.getLoadCellNearMachine(way.getProdMachine("T1")));
                            break;
                        case 6:
                            drive.setEndTarget(way.getLoadCellNearMachine(way.getProdMachine("T3")));
                            break;
                        case 7:
                            drive.setEndTarget(way.getLoadCellNearMachine(way.getProdMachine("T2")));
                            break;
                        case 8:
                            drive.setEndTarget(way.getLoadCellNearMachine(way.getProdMachine("T3")));
                            break;
                        case 9:
                            drive.setEndTarget(way.getLoadCellNearMachine(way.getProdMachine("T1")));
                            break;
                        case 10:
                            drive.setEndTarget(way.getLoadCellNearMachine(way.getProdMachine("T3")));
                            break;}
                    do{
                        drive.run();} while (drive.getEndPosReached() == 0);

                    prodStep = "PROD";

                    break;

                case "PROD":

                    comView.setKoords(0, 0, 0);
                    /*Switch to choose between the info to show*/
                    switch (prodCount){

                        case 1:
                            Main.log.debug("&gt;&gt;&gt;&gt; MASCHINE" + way.getProdMachine("T1") + " ERREICHT &lt;&lt;&lt;&lt;&lt;");
                            break;
                        case 2:
                            Main.log.debug("&gt;&gt;&gt;&gt; MASCHINE" + way.getProdMachine("T2") + " ERREICHT &lt;&lt;&lt;&lt;&lt;");
                            break;
                        case 3:
                            Main.log.debug("&gt;&gt;&gt;&gt; MASCHINE" + way.getProdMachine("T1") + " ERREICHT &lt;&lt;&lt;&lt;&lt;");
                            break;
                        case 4:
                            Main.log.debug("&gt;&gt;&gt;&gt; MASCHINE" + way.getProdMachine("T2") + " ERREICHT &lt;&lt;&lt;&lt;&lt;");
                            break;
                        case 5:
                            Main.log.debug("&gt;&gt;&gt;&gt; MASCHINE" + way.getProdMachine("T1") + " ERREICHT &lt;&lt;&lt;&lt;&lt;");
                            break;
                        case 6:
                            Main.log.debug("&gt;&gt;&gt;&gt; MASCHINE" + way.getProdMachine("T3") + " ERREICHT &lt;&lt;&lt;&lt;&lt;");
                            break;
                        case 7:
                            Main.log.debug("&gt;&gt;&gt;&gt; MASCHINE" + way.getProdMachine("T2") + " ERREICHT &lt;&lt;&lt;&lt;&lt;");
                            break;
                        case 8:
                            Main.log.debug("&gt;&gt;&gt;&gt; MASCHINE" + way.getProdMachine("T3") + " ERREICHT &lt;&lt;&lt;&lt;&lt;");
                            break;
                        case 9:
                            Main.log.debug("&gt;&gt;&gt;&gt; MASCHINE" + way.getProdMachine("T1") + " ERREICHT &lt;&lt;&lt;&lt;&lt;");
                            break;
                        case 10:
                            Main.log.debug("&gt;&gt;&gt;&gt; MASCHINE" + way.getProdMachine("T3") + " ERREICHT &lt;&lt;&lt;&lt;&lt;");
                            break;}
                    /*Switch to select between: 
                     Puck area = setStation(3);
                     Station work = setStation(4);
                     Delivery gate = setStation(5)*/
                    switch (prodCount){
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:

                            comView.setStation(4);
                            break;}
                    if (ready == 1){
                        Main.log.debug("READY OK");

                        while (ende == 0){
                            comView.setGo(1);
                            Thread.sleep(110);
                            ende = comView.getEnde();
                            ready = 0;}
                        comView.setGo(0);
                        Thread.sleep(110);}
                    /*Switch to select between: 
                     Move puck on left side = setStation(6);
                     Move puck on right side = setStation(7);
                     Move the puck on the machine = setStation(8);
                     Move the puck on the machine and wait = setStation(9)*/
                    switch (prodCount){
                        case 1:
                            comView.setStation(8);
                            break;
                        case 2:
                            comView.setStation(6);
                            break;
                        case 3:
                            break;
                        case 4:
                            comView.setStation(8);
                            break;
                        case 5:
                            comView.setStation(8);
                            break;
                        case 6:
                            if (prodFinalStep == true){} else{
                                comView.setStation(6);}
                            break;
                        case 7:
                            break;
                        case 8:
                            comView.setStation(7);
                            break;
                        case 9:
                            break;
                        case 10:
                            comView.setStation(8);
                            break;}

                    ready = comView.getReady();

                    if (ready == 1){
                        Main.log.debug("READY OK");

                        while (ende == 0){
                            comView.setGo(1);
                            Thread.sleep(110);
                            ende = comView.getEnde();
                            ready = 0;}

                        comView.setGo(0);
                        Thread.sleep(110);
                        switch (prodCount){
                            case 1:
                                prodStep = "TO_START";
                                break;

                            case 2:
                                prodStep = "DRIVE_TO_T";
                                break;

                            case 3:
                                prodStep = "DRIVE_TO_T";
                                break;

                            case 4:
                                prodStep = "TO_START";
                                break;

                            case 5:
                                if (prodFinalStep == true){
                                    prodStep = "DRIVE_TO_T";} else{
                                    prodStep = "TO_START";}
                                break;

                            case 6:
                                if (prodFinalStep == true){
                                    prodStep = "TO_DELIVERY";} else{
                                    prodStep = "DRIVE_TO_T";}
                                break;
                            case 7:
                                prodStep = "DRIVE_TO_T";
                                break;
                            case 8:
                                prodStep = "DRIVE_TO_T";
                                break;
                            case 9:
                                prodStep = "DRIVE_TO_T";
                                break;
                            case 10:
                                prodStep = "TO_START";
                                prodFinalStep = true;
                                prodCount = 0;
                                break;}
                        Main.log.debug("************* ENDE*****************");
                        ende = 0;
                        comView.setStation(5);}

                    break;

                case "TO_DELIVERY":
                    drive.setEndTarget(way.getLoadCellNearMachine("D1"));// Delivery Gate
                    do{
                        drive.run();} while (drive.getEndPosReached() == 0);

                    prodStep = "DELIVER";

                    break;

                case "DELIVER":

                    // DELIVER SEQUENCE
                    comView.setKoords(0, 0, 0);

                    Main.log.debug("&gt;&gt;&gt;&gt; MASCHINE DELIVERY ERREICHT &lt;&lt;&lt;&lt;&lt;");

                    comView.setStation(5);

                    ready = comView.getReady();

                    if (ready == 1){
                        Main.log.debug("READY OK");

                        while (ende == 0){

                            comView.setGo(1);
                            Thread.sleep(110);
                            ende = comView.getEnde();

                            ready = 0;}

                        comView.setGo(0);
                        Thread.sleep(110);
                        prodStep = "START_ROBO";
                        comView.setStation(3);
                        Main.log.debug("************* ENDE*****************");
                        ende = 0;
                        prodFinalStep = false;}
                    break;

                default:
                    Main.log.debug("!!!!! OUT OFF PROGRAM !!!!!");
                    comView.setKoords(0, 0, 0);
                    break;}}}</source-code>
          </source-codes>
        </operation>
        <operation id="o7847606e705c4ab08e8fe62e26b44be2817" name="postGame" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di813762779705514235" cid="C005" type="class" name="ComRefBox" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/27/2014 18:03:29">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a46aaca0843f44abaa1223cadd1500772841" name="client" type="ProtobufClient" type-id="ProtobufClient" visibility="public" abstract="false" virtual="false" />
        <attribute id="ab1a94523bda343a6ad59786567d82753841" name="handler" type="Handler" type-id="Handler" visibility="public" abstract="false" virtual="false" />
        <attribute id="a218d8fd4a01242fbbbedad67ca59b4ed841" name="peer" type="ProtobufBroadcastPeer" type-id="ProtobufBroadcastPeer" visibility="public" abstract="false" virtual="false" />
        <attribute id="ac40fd554b0f54b2882496beea68399df841" name="gamePoints" type="int" type-id="int" visibility="public" abstract="false" virtual="false" />
        <attribute id="a8124da04be3b4ffe8018e06f8b0da105841" name="gamePhase" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" />
        <attribute id="a8f40689b9cc84b4e84d205ee198b598f841" name="gameState" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" />
        <attribute id="a7cbe17779b2d47738197a0ab8b71aae9841" name="hasTime" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" />
        <attribute id="ae6f17fa7ee5f488cb790a6966de22538841" name="gameTime" type="int" type-id="int" visibility="public" abstract="false" virtual="false" />
      </attributes>
      <operations>
        <operation id="o6bdb448d4fdd440ea0257d7f7565c021841" name="ComRefBox" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="ip" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="portIn" type="int" type-id="int" default-value="" />
            <parameter id="" name="portOut" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        // --------------------------- Verbinden mit Refbox per UDP ----------------------------
        peer = new ProtobufBroadcastPeer(ip, portIn, portOut);
        handler = new Handler(peer);
        try{
            peer.start();} catch (IOException e){
            e.printStackTrace();}

        peer.register_handler(handler); // muss sicher erst nachher geschehen, da nachricht im handler sonst nicht an peer gehängt werden kann}</source-code>
          </source-codes>
        </operation>
        <operation id="o7469d92f06bd4c95a25f00a77038abef841" name="addObserver" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="observer" type="Observer" type-id="Observer" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        handler.addObserver(observer);}

    /**
     * ?? event ??? ??? ??? refbox --&gt; controller Client-Server
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o118a3e3c2b94414a9a5b3cb7df7fa310841" name="addAttentionMessage" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        peer.&lt;AttentionMessage&gt;add_message(AttentionMessage.class);}

    /**
     * ok periodisch 1sec ??? refbox --&gt; all P2P &amp; C-S
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o0e5e3dddbeac425ab133d57f00cf272a841" name="addBeaconSignal" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        client.&lt;BeaconSignal&gt;add_message(BeaconSignal.class);}

    //?? periodisch? EVENT! ??? refbox --&gt; any       P2P &amp; C-S</source-code>
          </source-codes>
        </operation>
        <operation id="o702be919ab5d44bebb0cf041a65d893d841" name="addVersionInfo" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        peer.&lt;VersionInfo&gt;add_message(VersionInfo.class);}

    /**
     * ?? periodisch 1sec ??? refbox --&gt; robots PeerToPeer
     */</source-code>
          </source-codes>
        </operation>
        <operation id="od0fd13ab1ee5410ba98b2625d1a17290841" name="addExplorationInfo" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        peer.&lt;ExplorationInfo&gt;add_message(ExplorationInfo.class);}

    //ok periodisch 1sec ??? refbox --&gt; all          P2P &amp; C-S
    /**
     * Hört auf die Nachricht "GameState" werte: - Aktueller Punktestand -
     * Aktuelle Spielzeit (EXPLORATION: 0-180, PRODUCTION: 0-900) - Aktueller
     * Spiel Phase (PRE_GAME, EXPLORATION, PRODUCTION, POST_GAME) - Aktueller
     * Spiel Status (WAIT_STRT, RUNNING, PAUSED) - Ob noch Spielzeit vorhanden
     * ist.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oa053ece55c1347c694be1b76ec05d5de841" name="addGameStateMessage" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        peer.&lt;GameState&gt;add_message(GameState.class);}

    /**
     * ok periodisch 0.25sec ??? refbox --&gt; all P2P &amp; C-S
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oe2bc2158267a4d68bb04decff42a2e6f841" name="addMachineInfo" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        peer.&lt;MachineInfo&gt;add_message(MachineInfo.class);}

    /**
     * ?? ??? 5sec ??? refbox --&gt; any P2P &amp; C-S
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o8ce77c10d9cc4f1aa3fd4733825c66a0841" name="addOrderInfo" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        peer.&lt;OrderInfo&gt;add_message(OrderInfo.class);}

    /**
     * ok periodisch 1sec ok refbox --&gt; controller Client-Server
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ocab8e2007cca4621b0541fc6330e17ec841" name="addPuckInfo" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        peer.&lt;PuckInfo&gt;add_message(PuckInfo.class);}

    /**
     * ok periodisch 1sec ??? refbox --&gt; controller Client-Server
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oe6efb936fded43c8ba8315eb384e9dd2841" name="addRobotInfo" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        peer.&lt;RobotInfo&gt;add_message(RobotInfo.class);}

    /**
     *
     * @return Gibt den aktuellen Spiel Status zurück (WAIT_STRT, RUNNING,
     * PAUSED).
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o0f232137d563499190cd20c59e86dd3c841" name="getState" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return handler.getState();}

    /**
     *
     * @return Gibt die aktuelle Spiel Phase zurück (PRE_GAME, EXPLORATION,
     * PRODUCTION, POST_GAME).
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o43de7d8378cb43b2933ffb2d9de31173841" name="getPhase" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return handler.getPhase();}

    /**
     *
     * @return Git an ob noch Spielzeit vorhanden ist.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="od542ce540fd242f09f10b85e1240aa17841" name="getHasTime" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return handler.getHasTime();}

    /**
     *
     * @return Gibt die aktuelle Spielzeit zurück (EXPLORATION: 0-180,
     * PRODUCTION: 0-900).
     */</source-code>
          </source-codes>
        </operation>
        <operation id="od0fcc83ae89c45a6ac823a66f13dcd35841" name="getTime" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return handler.getTime();}

    /**
     *
     * @return Gibt den Aktuellen Punktestand zurück.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o05bf5aafe344460f8f67f5205d6a9bbe841" name="getPoints" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return handler.getPoints();}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di978548353853184845" cid="C006" type="class" name="Handler" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/27/2014 18:03:29">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="afc33eb3066764c5bab61a53dad7fee35894" name="fc" type="FieldCommander" type-id="FieldCommander" visibility="package" abstract="false" virtual="false" />
        <attribute id="ad74074bc9d304c1b99f98b0c425db6ff894" name="orderList" type="List&lt;Order&gt;" type-id="List&lt;Order&gt;" visibility="public" abstract="false" virtual="false" />
        <attribute id="ac3cfa00edc50470e82cee5112318206b894" name="game" type="GameState" type-id="GameState" visibility="public" abstract="false" virtual="false" />
        <attribute id="ab919edb217824a0ba3216c39fca021be894" name="mList" type="List&lt;Machine&gt;" type-id="List&lt;Machine&gt;" visibility="public" abstract="false" virtual="false" />
        <attribute id="aa129a87355284110b778f828d01bcf17895" name="gamePoints" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" />
        <attribute id="a2718e326475b4cb9ab59f641f5760ff5895" name="gamePhase" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" />
        <attribute id="a0779c951a14748b495e87f4208c6cd82895" name="gameState" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" />
        <attribute id="af1b9ade1ca5445e897fb9734cc59a37d895" name="hasTime" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" />
        <attribute id="aa4c220bdd6044d27b90da7a2a0380193895" name="gameTime" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" />
        <attribute id="a7cf3c971cf874e578086fdb4e29d5ff4895" name="logMessage" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" />
        <attribute id="a46bfba6df1df4e8dbb0f6f07ba635085895" name="mTypLight" type="int[]" type-id="int[]" visibility="public" abstract="false" virtual="false" />
        <attribute id="a40518d1f7e734e46960a35db1cfb0db0895" name="peer" type="ProtobufBroadcastPeer" type-id="ProtobufBroadcastPeer" visibility="package" abstract="false" virtual="false" />
        <attribute id="a7fbf245e67cf492bad28be48f4b4e52c895" name="machineTyp" type="String[]" type-id="String[]" visibility="public" abstract="false" virtual="false" />
      </attributes>
      <operations>
        <operation id="o4cb49043150b416abf4e17bb70837d38895" name="Handler" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="peer" type="ProtobufBroadcastPeer" type-id="ProtobufBroadcastPeer" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.peer = peer;
        logMessage = "Der Server wurde gestartet !!!";
        fc = FieldCommander.getInstance();}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oee5173c848c946a387ab336acc34b33e895" name="handle_message" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="in_msg" type="ByteBuffer" type-id="ByteBuffer" default-value="" />
            <parameter id="" name="msg" type="GeneratedMessage" type-id="GeneratedMessage" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        NanoSecondsTimestampProvider nstp = new NanoSecondsTimestampProvider();

        long ms = System.currentTimeMillis();
        long ns = nstp.currentNanoSecondsTimestamp();

        int sec = (int) (ms / 1000);
        long nsec = ns - (ms * 1000000L);

        TimeProtos.Time t = TimeProtos.Time.newBuilder().setSec(sec).setNsec(nsec).build();
        BeaconSignal bs = BeaconSignal.newBuilder().setTime(t).setSeq(1).setPeerName(Main.name).setNumber(0).setTeamName("Solidus").build();

        ProtobufMessage udpOut = new ProtobufMessage(2000, 1, bs);
        peer.enqueue(udpOut);
        //sendMachine("M1", "T4");
// -------------------------- Puck Info ----------------------------------------
        if (msg instanceof PuckInfo){
            byte[ array = new byte[in_msg.capacity();
            in_msg.rewind();
            in_msg.get(array);
            /*3 Lines above could be ev. replaced by 
             byte[] array=in_msg.array();
             has to be tested --&gt; replace in each Job*/
            PuckInfoProtos.PuckInfo info;

            try{
                info = PuckInfoProtos.PuckInfo.parseFrom(array);
                int count = info.getPucksCount();
                System.out.println("Number of pucks: " + count);
                List&lt;PuckInfoProtos.Puck&gt; pucks = info.getPucksList();
                for (int i = 0; i &lt; pucks.size(); i++){
                    PuckInfoProtos.Puck puck = pucks.get(i);
                    int id = puck.getId();
                    System.out.println("  puck ID: " + id);}} catch (InvalidProtocolBufferException e){
                e.printStackTrace();}}
// -------------------------------- Order Info ---------------------------------
        if (msg instanceof OrderInfo){
            byte[ array = new byte[in_msg.capacity();
            in_msg.rewind();
            in_msg.get(array);

            OrderInfoProtos.OrderInfo info;
            try{
                info = OrderInfoProtos.OrderInfo.parseFrom(array);

                orderList = info.getOrdersList();
                int length = orderList.size();

                for (int i = 0; i &lt; length; i++){
                    System.out.println("Order " + (i + 1) + ": " + orderList.get(i));}} catch (InvalidProtocolBufferException ex){
                Logger.getLogger(Handler.class.getName()).log(Level.SEVERE, null, ex);}}

// -------------------------------------   Game State   ------------------------------------------
// Gibt die Aktuelle Spielphase, Spielstatus, Spielzeit, die Punkte und ob noch Zeit vorhanden ist.
        if (msg instanceof GameState){
            byte[ array = new byte[in_msg.capacity();
            in_msg.rewind();
            in_msg.get(array);

            try{
                game = GameStateProtos.GameState.parseFrom(array);

                int points = game.getPoints();
                Phase phase = game.getPhase();
                State state = game.getState();
                TimeProtos.Time time = game.getGameTime();

                hasTime = game.hasGameTime() + "";

                setChanged();
                notifyObservers(send);

                gamePoints = points + "";
                gamePhase = phase.name();
                gameState = state.name();
                gameTime = time.getSec() + "";} catch (InvalidProtocolBufferException e){
                e.printStackTrace();}}

// -------------------------------- Machine Info ---------------------------------
        if (msg instanceof MachineInfo){
            System.out.println("MACHINE INFO");

            byte[ array = new byte[in_msg.capacity();
            in_msg.rewind();
            in_msg.get(array);

            try{
                MachineInfo mInfo;
                mInfo = MachineInfoProtos.MachineInfo.parseFrom(array);
                mList = mInfo.getMachinesList();
/*
                int length = mList.size();
                machineTyp = new String[length];
                for (int i = 0; i &lt; length; i++)
                {
                    Machine m = mList.get(i);
                    String name = m.getName();
                    String typ = m.getType();
                    Pose2D pose = m.getPose();

                    PuckState out = m.getOutput();
                    //PuckState in = m.getInputs(i);

                    machineTyp[i] = typ;
                    System.out.println("Maschine " + name + " ist Maschinentyp " + machineTyp[i]);
                }*/
                JobController.getInstance().setMachineTypesFromRefBox(mList);} catch (InvalidProtocolBufferException ex){
                Logger.getLogger(Handler.class.getName()).log(Level.SEVERE, null, ex);}

            /*    
             try
             {         
             int count = info.getMachinesCount();
             System.out.println("Anzahl Maschinen: " + count);
             List&lt;MachineInfoProtos.Machine&gt; machines = info.getMachinesList();
             
             MachineInfoProtos.Machine machine = machines.get(0);
            
             int inputsCount = machine.getInputsCount();
             List&lt;LightSpec&gt; lightlist = machine.getLightsList();                            
             }
             catch (InvalidProtocolBufferException ex)
             {
             Logger.getLogger(Handler.class.getName()).log(Level.SEVERE, null, ex);
             }
             */}
// -----------------------------------------------------------------------------------
// -------------------------------- Exploration Info ---------------------------------
// -----------------------------------------------------------------------------------
        if (msg instanceof ExplorationInfo){
            byte[ array = new byte[in_msg.capacity();
            in_msg.rewind();
            in_msg.get(array);

            ExplorationInfoProtos.ExplorationInfo info;

            try{
                info = ExplorationInfoProtos.ExplorationInfo.parseFrom(array);

                List&lt;ExplorationSignal&gt; slist = info.getSignalsList();
                for (int i = 0; i &lt; 5; i++){
                    ExplorationSignal m0 = slist.get(i);
                    mTypeDef[i[RED = m0.getLights(0).getState().getNumber();
                    mTypeDef[i[ORANGE = m0.getLights(1).getState().getNumber();
                    mTypeDef[i[GREEN = m0.getLights(2).getState().getNumber();}

// ------------------ Array[15] füllen: Station 1 - 3 platz 0 - 2... -----------
                mTypLight = new int[15;
                int m = 0;
                for (int i = 0; i &lt; 15; i += 3){
                    mTypLight[i = mTypeDef[m[RED;
                    mTypLight[i + 1 = mTypeDef[m[ORANGE;
                    mTypLight[i + 2 = mTypeDef[m[GREEN;
                    logMessage = "MTyp " + m + " =&gt; RED: " + mTypLight[i + " ORANGE: " + mTypLight[i + 1 + " GREEN: " + mTypLight[i + 2;
                    m++;}} catch (InvalidProtocolBufferException e){
                e.printStackTrace();}}

// -------------------------------- Beacon Signal ---------------------------------
        if (msg instanceof BeaconSignal){
            byte[ array = new byte[in_msg.capacity();
            in_msg.rewind();
            in_msg.get(array);}
        send[0 = gamePoints;
        send[1 = gamePhase;
        send[2 = gameState;
        send[3 = gameTime;
        send[4 = hasTime;
        send[5 = logMessage;
        setChanged();
        notifyObservers(send);}</source-code>
          </source-codes>
        </operation>
        <operation id="oa5021751423e48f7987e434dff45841c896" name="sendMachine" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="lamp" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        try{
            Thread.sleep(500);} catch (InterruptedException ex){
            Logger.getLogger(Handler.class.getName()).log(Level.SEVERE, null, ex);}

        String type = "";

        if (lamp[RED == mTypLight[0 &amp;&amp; lamp[ORANGE == mTypLight[1 &amp;&amp; lamp[GREEN == mTypLight[2){
            type = "T1";}
        if (lamp[RED == mTypLight[3 &amp;&amp; lamp[ORANGE == mTypLight[4 &amp;&amp; lamp[GREEN == mTypLight[5){
            type = "T2";}
        if (lamp[RED == mTypLight[6 &amp;&amp; lamp[ORANGE == mTypLight[7 &amp;&amp; lamp[GREEN == mTypLight[8){
            type = "T3";}
        if (lamp[RED == mTypLight[9 &amp;&amp; lamp[ORANGE == mTypLight[10 &amp;&amp; lamp[GREEN == mTypLight[11){
            type = "T4";}
        if (lamp[RED == mTypLight[12 &amp;&amp; lamp[ORANGE == mTypLight[13 &amp;&amp; lamp[GREEN == mTypLight[14){
            type = "T5";}
        fc.machineMap.get(name).setmTyp(type);// hier wird der jeweilige Maschinentyp in die entsprechende zelle (von der Map geholt) gespeichert

        try{
            Thread.sleep(1000);} catch (InterruptedException ex){
            Logger.getLogger(Handler.class.getName()).log(Level.SEVERE, null, ex);}
        MachineReportProtos.MachineReportEntry mi = MachineReportProtos.MachineReportEntry.newBuilder().setName(name).setType(type).build();
        //MachineReport mr = MachineReport.newBuilder().setMachines(1, mi).build();  //for just one Machine
        MachineReport mr = MachineReport.newBuilder().addMachines(mi).build();
        ProtobufMessage machineReport = new ProtobufMessage(2000, 61, mr);
        peer.enqueue(machineReport);}

    /**
     *
     * @return Gibt den aktuellen Spiel Status zurück (WAIT_STRT, RUNNING,
     * PAUSED).
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o895b2eb2cb834f40bba45bd5af68c960897" name="getState" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return gameState;}

    /**
     *
     * @return Gibt die aktuelle Spiel Phase zurück (PRE_GAME, EXPLORATION,
     * PRODUCTION, POST_GAME).
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o9425e726f0244605983a4ade8fa11c9d897" name="getPhase" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return gamePhase;}

    /**
     *
     * @return Git an ob noch Spielzeit vorhanden ist.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o4c53215d80124df4acf82a8e12846cbb897" name="getHasTime" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return hasTime;}

    /**
     *
     * @return Gibt aktuelle Spielzeit zurück (EXPLORATION: 0-180, PRODUCTION:
     * 0-900).
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o5eaf0cb1516f42b78fbd517486576fcc897" name="getTime" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return gameTime;}

    /**
     *
     * @return Gibt den Aktuellen Punktestand zurück.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o2ecad183e9924a07a191eccbc9645ee4897" name="getPoints" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return gamePoints;}

    /**
     *
     * @return Gibt die von edr Refbox zugewisenen Lichter der 5 Maschinentypen
     * zurück: array[15] array[0] - array[2] Maschinentyp 1: [0] = Rote Lampe,
     * [1] = Orange Lampe, [2] = Grüne Lampe...
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o4fb33222cc3743c981f4cead52965702897" name="getMachineTyp" type="int[]" type-id="int[]" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return mTypLight;}</source-code>
          </source-codes>
        </operation>
        <operation id="o52c3d9bcf93346e0884ffe49a926151d897" name="main" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        /*ByteBuffer in_msg=new ByteBuffer();
         byte[] array = new byte[in_msg.capacity()];
         in_msg.rewind();
         in_msg.get(array);
         /*3 Lines above could be ev. replaced by 
         byte[] array=in_msg.array();
         has to be tested --&gt; replace in each Job*/

        //byte[] array = new byte[200];
        /*
         List&lt;Order&gt; orderList;
         OrderInfoProtos.OrderInfo info;
         try
         {            
         //info = OrderInfoProtos.OrderInfo.parseFrom(array);

         // orderList = info.getOrdersList();
         int length = orderList.size();

         for (int i = 0; i &lt; length; i++)
         {
         System.out.println("Order " + (i + 1) + ": " + orderList.get(i));
         }
         } catch (InvalidProtocolBufferException ex)
         {
         Logger.getLogger(Handler.class.getName()).log(Level.SEVERE, null, ex);
         }*/}}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di834950328996403515" cid="C007" type="class" name="Main" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/27/2014 18:03:29">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="o18f525bb9eaf4a2cb368aea47b64840d918" name="org.apache.log4j.Logger.getRootLogger" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">
    static UserFrame frame;
    public static String refBoxIp;
    public static String refBoxPortIn = "4444";
    public static String refBoxPortOut = "4444";
    public static String name = "MrPink";
    static ComRefBox comRefBox;
    static ComView comView;
    static JobController way;
    static StateMachine sm;
    static FieldCommander fc;
    static File ipfile;
    static File portfile;
    static File namefile;
    static String relativ;

// ------------------------------   MAIN   -------------------------------------</source-code>
          </source-codes>
        </operation>
        <operation id="o18553f93c3e8412a94813a4852c2e745918" name="main" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws FileNotFoundException, InterruptedException, IOException{
        //&lt;editor-fold defaultstate="collapsed" desc="comment"&gt;
// Logger instantieren, konfigurieren
        try{
            SimpleLayout layout = new SimpleLayout();
            ConsoleAppender consoleAppender = new ConsoleAppender(layout);
            log.addAppender(consoleAppender);
            FileAppender fileAppender = new FileAppender(layout, "logs/MeineLogDatei.log", false);
            log.addAppender(fileAppender);
            // ALL | DEBUG | INFO | WARN | ERROR | FATAL | OFF:
            log.setLevel(org.apache.log4j.Level.DEBUG);

            log.debug("Meine Debug-Meldung");
            log.info("Meine Info-Meldung");
            log.warn("Meine Warn-Meldung");
            log.error("Meine Error-Meldung");
            log.fatal("Meine Fatal-Meldung");} catch (Exception ex){
            System.out.println(ex);}
//&lt;/editor-fold&gt;

        fc = FieldCommander.getInstance();
        comView = ComView.getInstance();

        fc.setVisible(true);
        frame = new UserFrame();
        way = JobController.getInstance();

        try{
            ipfile = new File("C:/Robotino/iprefbox");
            namefile = new File("C:/Robotino/name");

            FileIO read = new FileIO();
            read.getText(ipfile);
            read.getText(namefile);

            refBoxIp = read.getText(ipfile);
            name = read.getText(namefile);
            way.setRoboNameIdx(read.getText(namefile));
            comRefBox = new ComRefBox(refBoxIp, Integer.valueOf(refBoxPortIn), Integer.valueOf(refBoxPortOut));
            //comRefBox = new ComRefBox(refBoxIp, refBoxPort, frame);
            comRefBox.addObserver(frame.panel);} catch (IOException ex){}}
// -----------------------------------------------------------------------------</source-code>
          </source-codes>
        </operation>
        <operation id="oca510d2387c54f229181e8e17d4817bb918" name="setIpRefbox" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="ip" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws FileNotFoundException, IOException{
        refBoxIp = ip;
        System.out.println(ip);
        FileWriter schreiber = new FileWriter(ipfile);
        schreiber.write(ip);
        schreiber.flush();}</source-code>
          </source-codes>
        </operation>
        <operation id="o721aac7e484b49d487bb9057c120c74d918" name="setNameRobo" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="roboname" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws FileNotFoundException, IOException{
        name = roboname;
        FileWriter schreiber = new FileWriter(namefile);
        schreiber.write(roboname);
        schreiber.flush();}</source-code>
          </source-codes>
        </operation>
        <operation id="o4760d07e00d34a2aa76a497a5e8187b7918" name="setPortRefbox" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="port" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws FileNotFoundException, IOException{
        refBoxPortIn = port;
        System.out.println(port);
        FileWriter schreiber = new FileWriter(portfile);
        schreiber.write(port);
        schreiber.flush();
        schreiber.close();}

// ------------------------------   START   ------------------------------------</source-code>
          </source-codes>
        </operation>
        <operation id="o12fbd955ff3a4a179e1cc8f3ca1d20e3918" name="startServer" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <source-codes>
            <source-code language="Undefined"> throws SocketException, IOException, InterruptedException{
        log.debug("Startbutton is clicked");

        sm = new StateMachine(comRefBox.handler, way);

// Nachrichten Refbox
        comRefBox.addGameStateMessage();
        comRefBox.addMachineInfo();
        comRefBox.addExplorationInfo();
        comRefBox.addOrderInfo();

// Start Robotinos
        //robo.start();
        comView.start();
        Thread.sleep(1000);
        sm.start();
        // Thread.sleep(500);
        sm.setRunning(true);}</source-code>
          </source-codes>
        </operation>
        <operation id="o9118cd7791854698905daa0ce6f7d1b3918" name="stopServer" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <source-codes>
            <source-code language="Undefined">{
        comView.run = false;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di377879389714791575" cid="C008" type="class" name="BasicInterpreter" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/27/2014 18:03:29">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a2394d03940694233b54fa9f47f2884c8930" name="Tim" type="Communication" type-id="Communication" visibility="private" abstract="false" virtual="false" />
        <attribute id="ad7cbe835d3c846cf82d69eae86aa5193930" name="Data" type="If_DataWriter" type-id="If_DataWriter" visibility="private" abstract="false" virtual="false" />
      </attributes>
      <operations>
        <operation id="oac768ae1e6974e6d86483ecfb37b9943930" name="BasicInterpreter" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{}
    
    //&lt;editor-fold defaultstate="collapsed" desc="Getter_And_Setter"&gt;</source-code>
          </source-codes>
        </operation>
        <operation id="o58da5b6acee9451ea8bcae62143cfb34931" name="getMeasurementData" type="If_DataReader" type-id="If_DataReader" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return (If_DataReader) Data;}
//&lt;/editor-fold&gt;

    //&lt;editor-fold defaultstate="collapsed" desc="Private_Methods"&gt;
    /**
     * Analisiert das angekommene Byte auf Steuerzeichen (STX, ETX, SPACE) und
     * erzeugt/beendet entsprechend Messdaten und Segmente rsp. leitet die Daten
     * weiter.
     *
     * @param value zu analysierendes Byte
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oc81ed759549c4795a37d941e5afed998931" name="assignToState" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="value" type="byte" type-id="byte" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        switch (value){
            case STX://Erzeugen von neuem Messdaten-Objekt
                Data = new Data();
                break;
            case ETX://Abschliessen von Messdatenobjekt
                Data.release();
                break;
            case SPACE://Erzeugen von neuem Messdaten-Abschnitt
                Data.newSegment();
                break;
            default://Hinzufügen zu bestehendem Messdaten-Abschnitt in bestehendem -Objekt.
                Data.addByte(value);
                break;}}
//&lt;/editor-fold&gt;

    //&lt;editor-fold defaultstate="collapsed" desc="NewMeasurementListener"&gt;
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oea3f2a64e9504b7d9de3843ee74c125e931" name="newMeasurementValues" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="value" type="byte" type-id="byte" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        //System.out.println("BasicInterpreter Value: " + value);
        this.assignToState(value);}
//&lt;/editor-fold&gt;</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di468549462541912504" cid="C009" type="class" name="Communication" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/27/2014 18:03:29">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a3c797f0ecaf9468baf2442470653319a948" name="ipAdress" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" />
        <attribute id="a27857fb7b6164b3c8fa58c76a6821950948" name="port" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="a7963eb3de7574089800f372193bf6a71948" name="socket" type="Socket" type-id="Socket" visibility="private" abstract="false" virtual="false" />
        <attribute id="afd31d98b08cb4e92ad72b79e6ff50797948" name="request" type="OutputStream" type-id="OutputStream" visibility="private" abstract="false" virtual="false" />
        <attribute id="ad8bdacb60c83425f860a20f125a5607b948" name="response" type="InputStream" type-id="InputStream" visibility="private" abstract="false" virtual="false" />
      </attributes>
      <operations>
        <operation id="o55c97c874485483db085329e8ec238bd948" name="Communication" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="ipAdress" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="port" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws IOException{
        this.ipAdress = ipAdress;
        this.port = port;

        socket = new Socket(this.ipAdress, this.port);
        request = socket.getOutputStream();
        response = socket.getInputStream();}

    //Methoden</source-code>
          </source-codes>
        </operation>
        <operation id="o211ca2cb695d48159abbc1a6f770dfe4948" name="singleMeasurement" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="Listener" type="NewMeasurementListener" type-id="NewMeasurementListener" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws IOException{
        if (socket != null)//Check: Parameter vorhanden?{
            //Wandeln String in Command-Byte[]
            byte[ command = this.interpretToCommand("sRN LMDscandata");

            //Request
            request.write(command);
            request.flush();

            //Response
            int temporaryData;//temporäre Daten um auf -1 zu testen (Ende der Daten)
            boolean endOfDataFlag;//true = Ende der Daten im Request-Objekt nicht erreicht, false = Ende
            
            BufferedReader buff = new BufferedReader(new InputStreamReader(response)); 
            
            do{
                Listener.newMeasurementValues((byte) buff.read());}
            while(buff.ready());
            //System.out.println("DONE!");
            /*do
            {
            temporaryData = response.read();
            
            endOfDataFlag = !(temporaryData == -1);
            System.out.println(temporaryData);
            if (endOfDataFlag)
            {
            Listener.newMeasurementValues((byte) temporaryData);
            }
            } while (endOfDataFlag);*/}}</source-code>
          </source-codes>
        </operation>
        <operation id="oc712554fe3af41999e196a453642f3be948" name="startMeasurement" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="Listener" type="NewMeasurementListener" type-id="NewMeasurementListener" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{}</source-code>
          </source-codes>
        </operation>
        <operation id="o9ffe03b4c68f46d2be6a643faf542de0948" name="stopMeasurement" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{}

    //&lt;editor-fold defaultstate="collapsed" desc="Getter_And_Setter"&gt;</source-code>
          </source-codes>
        </operation>
        <operation id="od6e0a169083144ccaed77533ddc4067c948" name="setIpAndPort" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="ipAdress" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="port" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.ipAdress = ipAdress;
        this.port = port;}</source-code>
          </source-codes>
        </operation>
        <operation id="o8dfec388231f490a9df23a48f0e27ccf948" name="getIpAdress" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return this.ipAdress;}</source-code>
          </source-codes>
        </operation>
        <operation id="o6dc133a02f0a41c5a4c70bb205fc3365948" name="getPort" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return this.port;}
//&lt;/editor-fold&gt;

    //&lt;editor-fold defaultstate="collapsed" desc="Private_Methods"&gt;
    /**
     * Interpretiert einen normalen String und gibt ihn als Byte-Array im
     * ASCII-Zeichensatz aus. Ergänzt zudem den String mit einem vorangestellten
     * STX und einem ETX am Schluss. Kann verwendet werden um einen Befehl für
     * den Scanner in dies passende Form zu transformieren.
     *
     * @param interpret String der interpretiert werden soll
     * @return ASCII Byte-Array des Strings mit angehängetm &amp; nachfolgenden STX rsp. ETX
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o686b53e9934648ad822ab383d7ad2f49948" name="interpretToCommand" type="byte[]" type-id="byte[]" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="interpret" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        final byte ASCII_STX = 2;
        final byte ASCII_ETX = 3;
        final byte ASCII_BR = 32;
        
        byte[ asciiTemp = interpret.getBytes(Charset.forName("US-ASCII"));
        byte[ ascii = new byte[asciiTemp.length + 2;
        
        for (int n = 1; n &lt; (ascii.length - 1); n++)//Alle ausser erstes &amp; letztes Byte{
            ascii[n = asciiTemp[n - 1;}
        
        ascii[0 = ASCII_STX;
        ascii[ascii.length - 1 = ASCII_ETX;
        
        return ascii;}
//&lt;/editor-fold&gt;</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di105518135702009991" cid="C010" type="class" name="Data" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/27/2014 18:03:29">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a2cf56dcff412498abbe6ece167ea4cb0960" name="release" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" />
        <attribute id="a89305d4fc94e4af3b06dcddacfa9c320960" name="MeasurementDataList" type="ArrayList&lt;DataSegment&gt;" type-id="ArrayList&lt;DataSegment&gt;" visibility="private" abstract="false" virtual="false" />
        <attribute id="adb2c52a75a9a4913ac83627ea3e31ba9960" name="currentSegment" type="DataSegment" type-id="DataSegment" visibility="private" abstract="false" virtual="false" />
      </attributes>
      <operations>
        <operation id="o300ace9c625348f59d5744257161b03d960" name="Data" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        MeasurementDataList = new ArrayList&lt;&gt;();//Liste erzeugen, die die frisch erzeugten Segmente aufnimmt sobald diese abgeschlossen sind.
        currentSegment = new DataSegment(MAX_SIZE_SEGMENT);//Erzeugen von ERSTEM Daten-Segment das mit Daten befüllt werden kann
        release = false;}</source-code>
          </source-codes>
        </operation>
        <operation id="ob002f369d767493387fa611278928d61960" name="printMeasurementDataList" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        int counter = 0;
        
        for(DataSegment segment : MeasurementDataList){
            System.out.print(counter+". Segment: ");
            for(char x: segment.getSegment()){
                System.out.print(x);}
            System.out.println();
            counter++;}}
    
    //&lt;editor-fold defaultstate="collapsed" desc="If_DataWriter"&gt;
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o688770b183e64046b9bab8fa83257424960" name="addByte" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="data" type="byte" type-id="byte" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        currentSegment.addByte(data);}
    
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o9bec6e62d1154925870e95ddb15809a8960" name="newSegment" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        currentSegment.releaseSegment();//Abschliessen von aktuellem Segment
        MeasurementDataList.add(currentSegment);//Aktuelles Segment in Liste aller Segmente geben
        currentSegment = new DataSegment(MAX_SIZE_SEGMENT);//Neues Segment erzeugen}
    
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="obea521350b424a05b71ea0a35ba3ef14960" name="release" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        currentSegment.releaseSegment();//Abschliessen von aktuellem Segment
        MeasurementDataList.add(currentSegment);//Aktuelles Segment in Pool aller Segmente geben
        release = true;
        //printMeasurementDataList();}
    
//&lt;/editor-fold&gt;
    //&lt;editor-fold defaultstate="collapsed" desc="If_DataReader"&gt;
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oce0a8e64e9a64ac4809d74995f3c9f22960" name="getData" type="char[]" type-id="char[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="index" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        return MeasurementDataList.get(index).getSegment();}
//&lt;/editor-fold&gt;</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di801137339844226299" cid="C011" type="class" name="DataMask" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/27/2014 18:03:29">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a0705dd8962004fccb99eeb5f8d6f45c6986" name="data" type="If_DataReader" type-id="If_DataReader" visibility="private" abstract="false" virtual="false" />
        <attribute id="aede28be21b9c41b6b92455cca782817a986" name="kommandoart" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" />
        <attribute id="a7f9ce44174534675850de9b476317b93986" name="kommando" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" />
        <attribute id="ad3f552f11f1a4f4a94018ba550bf941e986" name="versionsnummer" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="ac50e1d5050cc4eacb2858c99da80b4ef986" name="geraetenummer" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="a9cd55e2b9ec940f4923e5ee7df847f7e986" name="seriennummer" type="long" type-id="long" visibility="private" abstract="false" virtual="false" />
        <attribute id="aecd5cc0c5e3c4c4eac49a91896b29bff986" name="geraetestatus_1" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="a4bcdb7e011fe496b92283e8a1ca7c462986" name="geraetestatus_2" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="a24f9ae864f354519bc4f535b4414ad59986" name="telegrammzaehler" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="ad0a4e62288f2481ca9b610706de35e94986" name="scanzaehler" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="a15db95677f7f464fa8a2026cb50c3b44986" name="einschaltdauer" type="long" type-id="long" visibility="private" abstract="false" virtual="false" />
        <attribute id="a17d8a9f51f0d45b9a1370dd79ebd73fa987" name="uebertragungsdauer" type="long" type-id="long" visibility="private" abstract="false" virtual="false" />
        <attribute id="a00ec5abef3bf458abc2a7edd1f42b0ae987" name="eingangsstatus_1" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="a73c0ca8de8fa4c97b04f9d8a4879a944987" name="eingangsstatus_2" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="ada4f73a75d794b00abbdb0d6195a8b2b987" name="ausgangsstatus_1" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="ac50ebf6aba93437bac40b10853ef0d67987" name="ausgangsstatus_2" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="a663ec57957084f899b4d44ea68518982987" name="reserviert_A" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="ae97d1db6f5614f1387a1ef30804df3b5987" name="scanfrequenz" type="long" type-id="long" visibility="private" abstract="false" virtual="false" />
        <attribute id="aed2eb52f493b447eaaf79735c26cdbe5987" name="messfrequenz" type="long" type-id="long" visibility="private" abstract="false" virtual="false" />
        <attribute id="ae9a478c2675d4509b018b2026b7a181a987" name="anzahl_drehgeber" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="a2227e2d3ad9c4ea39c9e7f423629332d987" name="anzahl_kanaele" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="a5b5ed3e007984fff83975cee24dbb072987" name="messdateninhalt" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" />
        <attribute id="adeb0c40ac6f24917a7675e7e9b87d83e987" name="skalierungsfaktor" type="long" type-id="long" visibility="private" abstract="false" virtual="false" />
        <attribute id="a380a7d35244047099128a83037605924987" name="skalierungsoffset" type="long" type-id="long" visibility="private" abstract="false" virtual="false" />
        <attribute id="aab354e66d4ce4d51b734b5e08619fdfe987" name="startwinkel" type="long" type-id="long" visibility="private" abstract="false" virtual="false" />
        <attribute id="a1dc03b477bc24e81a6b262d49d5c8086987" name="winkelschrittweite" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="af133968231bd456e85824879bc6928c3987" name="anzahl_daten" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
      </attributes>
      <operations>
        <operation id="o0598b3f5cdc84afe9760184bc4ef6b32987" name="DataMask" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="data" type="If_DataReader" type-id="If_DataReader" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.data = data;}


    //&lt;editor-fold defaultstate="collapsed" desc="Getter_Header"&gt;</source-code>
          </source-codes>
        </operation>
        <operation id="ob97e9604895d4eb384f8c634da717572987" name="getTelegrammzaehler" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined"> throws Exception{
        return interpretCharArrayAsInt(data.getData(TELEGRAMMZAEHLER));}</source-code>
          </source-codes>
        </operation>
        <operation id="o6dce3fe68465404c8ef40679486fe195987" name="getScanzaehler" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined"> throws Exception{
        return interpretCharArrayAsInt(data.getData(SCANZAEHLER));}</source-code>
          </source-codes>
        </operation>
        <operation id="oa98360e516864aa5939c5f6a5b0674ea987" name="getEinschaltdauer" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined"> throws Exception{
        return interpretCharArrayAsInt(data.getData(EINSCHALTDAUER));}</source-code>
          </source-codes>
        </operation>
        <operation id="oc7d1d22233fe424e9de1c3500dd3b593988" name="getUebertragungsdauer" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined"> throws Exception{
        return interpretCharArrayAsInt(data.getData(UEBERTRAGUNGSDAUER));}
//&lt;/editor-fold&gt;
    
    //&lt;editor-fold defaultstate="collapsed" desc="Getter_Distance"&gt;</source-code>
          </source-codes>
        </operation>
        <operation id="ob714c89f51054908b71a743d50fbdaef988" name="getSkalierungsfaktor" type="long" type-id="long" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return interpretCharArrayAsLong(data.getData(SKALIERUNGSFAKTOR));}</source-code>
          </source-codes>
        </operation>
        <operation id="o7651c8b568874b4caaa90e3b8933aa92988" name="getStartwinkel" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return interpretCharArrayAsString(data.getData(STARTWINKEL));}</source-code>
          </source-codes>
        </operation>
        <operation id="o915a830a2d1b40e8a974469317fc1ce3988" name="getAnzahlDistanceDaten" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return interpretCharArrayAsInt(data.getData(ANZAHL_DISTANCE_DATEN));}</source-code>
          </source-codes>
        </operation>
        <operation id="ob08ad7308edc4f0081c0c4c72094a1dc988" name="getDistance" type="int[]" type-id="int[]" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return charArrayToIntArray(getAnzahlDistanceDaten(), DISTANCE_DATEN);}
//&lt;/editor-fold&gt;
    
    //&lt;editor-fold defaultstate="collapsed" desc="Getter_RSSI"&gt;</source-code>
          </source-codes>
        </operation>
        <operation id="o3e8cbb8740db406292c634c1cae02fed988" name="getAnzahlRssiDaten" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return interpretCharArrayAsInt(data.getData(rssiPositionCalculator(ANZAHL_RSSI_DATEN)));}</source-code>
          </source-codes>
        </operation>
        <operation id="o7ac6159f52104edb8729156527b42c01988" name="getRssiData" type="int[]" type-id="int[]" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return charArrayToIntArray(getAnzahlRssiDaten(), rssiPositionCalculator(RSSI_DATEN));}
//&lt;/editor-fold&gt;


    //&lt;editor-fold defaultstate="collapsed" desc="Private_Methods"&gt;</source-code>
          </source-codes>
        </operation>
        <operation id="od8004190994e4ba2be3b2224055b618e988" name="interpretCharArrayAsInt" type="int" type-id="int" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="charArray" type="char" type-id="char" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        return (int)interpretCharArrayAsLong(charArray);}</source-code>
          </source-codes>
        </operation>
        <operation id="oeb210348a44c44149fcffac976788e3a988" name="interpretCharArrayAsString" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="charArray" type="char" type-id="char" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        String tempString = "";

        for (char dataChar : charArray){
            tempString = tempString + dataChar;}

        return tempString;}</source-code>
          </source-codes>
        </operation>
        <operation id="o474838a931bd48f98ed5f9aaa2477eac988" name="interpretCharArrayAsLong" type="long" type-id="long" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="charArray" type="char" type-id="char" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        long tempLong = 0;
        int dezimalValency = 1;

        for (int countFor = (charArray.length - 1); countFor &gt;= 0; countFor--)//Umgekehrte Schlaufe, damit mit Char der tiefsten Wertung begonnen wird{
            if (!(Character.isDigit(charArray[countFor)))//Check: Ist eine Zahl?{
                //throw new Exception("MeasurementValues ERROR: Es wurde versucht ein Buchstaben als Int zu interpretieren.");}

            tempLong = tempLong + Character.getNumericValue(charArray[countFor) * dezimalValency;
            dezimalValency = dezimalValency * 16;}

        return tempLong;}

    /**
     * Wandelt einen Bereich der Daten (data) in ein Int-Array um. Kann
     * verwendet werden um die Distanz- &amp; RSSI-Werte in ein Ausgabefähiges
     * Format (int) zu kopieren.
     *
     * @param number Anzahl der Daten, die in ein Int-Array kopiert werden
     * sollen
     * @param startPoint Erstes Datenfeld, dass in das Array interpretiert
     * werden soll
     * @return Interpretierte Daten
     * @throws Exception Vom Umwandeln des Char-Arrays in einen Int (Nicht
     * unterstützte Zeichen).
     */</source-code>
          </source-codes>
        </operation>
        <operation id="odbd694b1ef52402ca35a1f7702564e7a988" name="charArrayToIntArray" type="int[]" type-id="int[]" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="number" type="int" type-id="int" default-value="" />
            <parameter id="" name="startPoint" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        int[ tempIntArray = new int[number;
        for (int countFor = 0; countFor &lt; tempIntArray.length; countFor++){
            tempIntArray[countFor = interpretCharArrayAsInt(data.getData(startPoint + countFor));}

        return tempIntArray;}

    /**
     * Gibt die Position für die Rssi-Daten zurück und rechnet dabei die variable Anzahl von Distance-Data ein.
     * @param rssiPosition Position des Rssi-Datenfeldes relativ
     * @return Position des rssi-Datenfeldes absolut
     * @throws Exception 
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o1ca0a02e4d494f5e8811ae4a025baf17988" name="rssiPositionCalculator" type="int" type-id="int" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="rssiPosition" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        return DISTANCE_DATEN + getAnzahlDistanceDaten() + rssiPosition;}
//&lt;/editor-fold&gt;

    /*public static void main(String[] args)
     {
     int doedel = 10;
     doedel--;
     System.out.println(doedel);
     doedel--;
     System.out.println(doedel);
    
     char[] testChar = new char[]{'F', 'F'};
     try
     {
     System.out.println(interpretCharArrayAsInt(testChar));
     } catch (Exception ex)
     {
     System.out.println(ex.getMessage());
     }
    
     char[] testChar2 = new char[]{'h', 'a', 'l', 'l', 'o'};
    
     System.out.println(interpretCharAsString(testChar2));
     }*/</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di999469774353898343" cid="C012" type="class" name="DataSegment" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/27/2014 18:03:29">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="aa1c9bd49e53a4c048d1c91f5c5535ab4997" name="pointer" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="a37f00f276de34031b05d140c86b6bc44997" name="release" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" />
        <attribute id="a33c0bbad653346028a82fa5c502dc24f997" name="segment" type="char[]" type-id="char[]" visibility="private" abstract="false" virtual="false" />
      </attributes>
      <operations>
        <operation id="o6b00aacc6be94f7a9298ea536faa6479998" name="DataSegment" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="maxSize" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        segment = new char[maxSize;
        pointer = 0;
        release = false;}
    
    //Methoden</source-code>
          </source-codes>
        </operation>
        <operation id="o23632b527b5c4ab3bda0e4a9cfc2bbbe998" name="addByte" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="dataChar" type="byte" type-id="byte" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        segment[pointer = (char)dataChar;//Wird direkt in Char gecastet
        pointer++;}</source-code>
          </source-codes>
        </operation>
        <operation id="o184f4ab137da43ea88db28b4b5f0b767998" name="releaseSegment" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        //Anpassen der Länge des Char Arrays auf minimalgrösse
        char[ tempSegment = new char[pointer;
        for(int countFor = 0; countFor &lt;tempSegment.length; countFor++){
            tempSegment[countFor = segment[countFor;}
        segment = tempSegment;//neue Referenz für segment
        tempSegment = null;//Refernez von tempSegment löschen
        release = true;}
    
    //Getter und Setter</source-code>
          </source-codes>
        </operation>
        <operation id="od57ac3ced51f4b508a0ed6e0553b1cef998" name="getSegment" type="char[]" type-id="char[]" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
            return segment;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di964063023641797976" cid="C013" type="class" name="Laser" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/27/2014 18:03:30">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a72f7c09fb3764d7da45c06e7dcd73e3c30" name="tim" type="TiM55x" type-id="TiM55x" visibility="private" abstract="false" virtual="false" />
        <attribute id="a8eccb96cb66642e1b47331a747e5019f30" name="data" type="DataMask" type-id="DataMask" visibility="private" abstract="false" virtual="false" />
      </attributes>
      <operations>
        <operation id="of54e84e1f87349e494678366c0f81e4d29" name="getInstance" type="Laser" type-id="Class:di757239640974862321" visibility="public" abstract="false" virtual="false" static="true">
          <source-codes>
            <source-code language="Undefined">{
        if (instance == null){
            try{
                instance = new Laser();} catch (IOException ex){
                Logger.getLogger(Laser.class.getName()).log(Level.SEVERE, null, ex);}}
        return instance;}
    //&lt;editor-fold defaultstate="collapsed" desc="VARIABLEN_OBJEKTE_KONSTANTEN"&gt;

    //Objekte//Lasermessgerät//aktuelles Datenset

//&lt;/editor-fold&gt;
    //&lt;editor-fold defaultstate="collapsed" desc="KONSTRUKTOREN"&gt;
    /**
     * Standart-Konstruktor. Baut eine Verbindung auf die IP-Adresse 192.168.0.1
     * über den Port 2112 auf (Werkseinstellungen TiM).
     *
     * @throws IOException Fehler, wenn unter der IP &amp; Port kein TiM
     * angesprochen werden konnte.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o9fd5bc77ee3e4552b1af3054502289a530" name="Laser" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined"> throws IOException{
        tim = new TiM55x("169.254.87.60", 2112);
        this.getNewMeasurementData();}

    /**
     * Parametrierbarer Konstruktor. Versucht eine Verbindung auf die
     * entsprechende IP-Adresse über den entsprechenden Port aufzubauen.
     *
     * @param ipAdress Adresse des TiM55x
     * @param port Ausgabeport des TiM55x
     * @throws IOException IOException Fehler, wenn unter der IP &amp; Port kein TiM
     * angesprochen werden konnte.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o4bfec114d02c4bf7ac4dbd3c062ad75730" name="Laser" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="ipAdress" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="port" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws IOException{
        tim = new TiM55x(ipAdress, port);
        this.getNewMeasurementData();//Fehlerquelle bei Verebung --&gt; Anpassen!}
//&lt;/editor-fold&gt;

    //&lt;editor-fold defaultstate="collapsed" desc="PUBLIC_METHODEN"&gt;
    /**
     * Es wird eine neue Messung getätigt und die Messdaten im internen Buffer
     * gespeichert.
     *
     * @throws IOException Probleme mit der Verbindung zum TiM
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o159559bf5617429cb4b436d677cec84c30" name="getNewMeasurementData" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined"> throws IOException{
        data = tim.singleMeassurement();}

    /**
     * Prüfen, ob in einer bestimmten Richtung keine Reflektion unterhalb einer
     * gegebenen Grenzen auftritt. Arbeitet mit den im internen Buffer
     * gespeicherten Messdaten.
     *
     * @param angle Richtungh in Grad. (Erlaubter Range: -135 bis +135)
     * @param distance Grenze in mm
     * @return wenn true = keine Reflektion, wenn false = Reflektion vorhanden
     */</source-code>
          </source-codes>
        </operation>
        <operation id="odb11d3930fc640acb7d9bef8c1422c5230" name="directionFree" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="angle" type="int" type-id="int" default-value="" />
            <parameter id="" name="distance" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        if (checkAngleRange(angle) &amp;&amp; checkDistanceRange(0, 8000, distance))//Gültigkeitsprüfung{
            if (this.getDistance(angle) &gt;= distance || this.getDistance(angle) == 0)//Sonderfall: Wenn 0 = Keine Reflektion vorhanden Out of Range{
                return true;}}
        return false;}

    /**
     * Abfragen eines Distanzwertes im gegebenen Winkel. Liest die Daten aus dem internen Buffer aus.
     * @param angle Richtungh in Grad. (Erlaubter Range: -135 bis +135)
     * @return Distanzwert in mm. Falls = 0 ist keine Reflektion vorhanden. Falls = -1 ist der übergenen Winkel nicht erlaubt.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="od2e00b1be60d431f96d924eaac4beb7630" name="getDistance" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="angle" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        if (checkAngleRange(angle)){
            return data.getDistance()[clientAngleToIndex(angle);}
        else{
            return -1;//Angle not in Range}}

    /**
     * Abfragen eines Reflektionwertes im gegebenen Winkel. Liest die Daten aus dem internen Buffer aus.
     * @param angle Richtungh in Grad. (Erlaubter Range: -135 bis +135)
     * @return Wert im Range 0 - 255. Falls = -1 ist der übergenen Winkel nicht erlaubt.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="od8c85671893d42b190e86ca66fa0bab430" name="getReflection" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="angle" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        if (checkAngleRange(angle)){
            return data.getRssiData()[clientAngleToIndex(angle);}
        else{
            return -1;//Angle not in Range}}
//&lt;/editor-fold&gt;

    //&lt;editor-fold defaultstate="collapsed" desc="PRIVATE_METHODEN"&gt;</source-code>
          </source-codes>
        </operation>
        <operation id="oaf4e97c759914096967ed078b7f1514330" name="clientAngleConverter" type="int" type-id="int" visibility="private" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="angle" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        return angle + 90;}</source-code>
          </source-codes>
        </operation>
        <operation id="oca1f7b6af7674dcd8ed2165fb15e894a30" name="clientAngleToIndex" type="int" type-id="int" visibility="private" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="angle" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        return clientAngleConverter(angle) + 45;}</source-code>
          </source-codes>
        </operation>
        <operation id="oa810a1ed1ddf4dc4a2ea3f4d877eb44630" name="checkAngleRange" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="angle" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        int range = 135;//Symetrisch
        return !(angle &lt; -range &amp;&amp; angle &gt; range);}</source-code>
          </source-codes>
        </operation>
        <operation id="oab188d27b3f54497a2f0bb375b03ddda31" name="checkDistanceRange" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="min" type="int" type-id="int" default-value="" />
            <parameter id="" name="max" type="int" type-id="int" default-value="" />
            <parameter id="" name="distance" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        return (distance &gt;= min &amp;&amp; distance &lt;= max);}
//&lt;/editor-fold&gt;</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di845290103587875502" cid="C014" type="class" name="MainTester" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/27/2014 18:03:30">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="o244d4d01a75f460ab18ca5139b67ec1c40" name="main" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
       
                 tim = Laser.getInstance();
            
            System.out.println("Messwert: " + tim.getDistance(0));
            System.out.println("Reflektion: " + tim.getReflection(0));
            System.out.println("Grenze 5m: " + tim.directionFree(0, 5000));
            System.out.println("Grenze 30cm: " + tim.directionFree(0, 300));
            
            /*try
            {
            TiM55x Tim = new TiM55x("192.168.0.1", 2112);
            DataMask data = Tim.singleMeassurement();
            System.out.println("Anzahl Daten: " + data.getAnzahlDistanceDaten());
            
            int[] distance = data.getDistance();
            
            for(int countFor = 0; countFor &lt; distance.length; countFor++)
            {
            System.out.println(countFor + ". Distanz: " + distance[countFor]);
            }
            
            System.out.println("Startwinkel: " + data.getStartwinkel());
            
            int[] rssi = data.getRssiData();
            
            for(int countFor = 0; countFor &lt; rssi.length; countFor++)
            {
            System.out.println(countFor + ". RSSI: " + rssi[countFor]);
            }
            
            } catch (IOException ex)
            {
            Logger.getLogger(MainTester.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex)
            {
            Logger.getLogger(MainTester.class.getName()).log(Level.SEVERE, null, ex);
            }*/}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di544387506284631709" cid="C015" type="class" name="TiM55x" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/27/2014 18:03:30">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="afbcdf1133840461eac4d53dce3c3384751" name="TiM_Com" type="Communication" type-id="Communication" visibility="private" abstract="false" virtual="false" />
        <attribute id="a1eaadfb18d474265bac434017de723c951" name="TiM_BasicInt" type="BasicInterpreter" type-id="BasicInterpreter" visibility="private" abstract="false" virtual="false" />
      </attributes>
      <operations>
        <operation id="o4a35ea2de0a8405e9729ebd44a64650451" name="TiM55x" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="ipAdress" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="port" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws IOException{
        TiM_Com = new Communication(ipAdress, port);
        TiM_BasicInt = new BasicInterpreter();}
    
    //Messmethoden</source-code>
          </source-codes>
        </operation>
        <operation id="o7ddfe88836434013828b277f77d38b0f51" name="singleMeassurement" type="DataMask" type-id="DataMask" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined"> throws IOException{
        TiM_Com.singleMeasurement(TiM_BasicInt);
        return new DataMask(TiM_BasicInt.getMeasurementData());}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di720419303953338791" cid="C016" type="class" name="InterfacePanel" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/27/2014 18:03:30">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a4bb001c36a6a453ea529fed8a6fa828e79" name="logText" type="JTextArea" type-id="JTextArea" visibility="public" abstract="false" virtual="false" />
        <attribute id="ada31b31159874e45abb51ece7df190f880" name="scrollPane" type="JScrollPane" type-id="JScrollPane" visibility="package" abstract="false" virtual="false" />
        <attribute id="a00a5b65c1ade4e31ab1b3066d85408d480" name="pointText" type="JTextArea" type-id="JTextArea" visibility="package" abstract="false" virtual="false" />
        <attribute id="a6be82270281b469f8309e30aef7a7fdf80" name="stateText" type="JTextArea" type-id="JTextArea" visibility="package" abstract="false" virtual="false" />
        <attribute id="a603a912576b547a689bbe5267fea351e80" name="phaseText" type="JTextArea" type-id="JTextArea" visibility="package" abstract="false" virtual="false" />
        <attribute id="a5b0c9931bc254c94a0a2b2ac7c37d07280" name="timeText" type="JTextArea" type-id="JTextArea" visibility="package" abstract="false" virtual="false" />
        <attribute id="a59526b2edb78490d94033fe797435a6a80" name="logLabel" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="af6f3e0c40c87476ca956147d011a977a80" name="pointLabel" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="a8f1ef8b84fb34bf1bf56f25ca4055d8c80" name="stateLabel" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="acfdd3fe0297f44d686f8f82f8f631c5980" name="phaseLabel" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="ac1f3e8fbd9004c1f8e3b76b9c968f68380" name="timeLabel" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="a8de8c45063b2408e87579cea6232436680" name="m1Label" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="a6da4bb51dc8940119cda60721dfccf4f80" name="m2Label" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="a4b48fe9d073a403bb41ac0aaea94754080" name="m3Label" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="ab72aa1799a654f58835c953b206a99dd80" name="m4Label" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="afd2295f05af04a4d9a0d7f56a0bfc46780" name="m5Label" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="aa7a49281150a48458840f74eea27fda380" name="m6Label" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="a1953fab844bf4b7c9258fa4a7533da5a80" name="m7Label" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="ad1d8929baf454cc886c59c335fcb167c80" name="m8Label" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="a6255b9f964b94e739a3f2dc0a9927d4c80" name="m9Label" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="ae14571109c1a4573a79d69097b2deaaf80" name="m10Label" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="aef153444b3794d2c9ccffa93b4ba2fe781" name="start" type="JButton" type-id="JButton" visibility="package" abstract="false" virtual="false" />
        <attribute id="a884bc52567304a1a86cd7095e7fe77f381" name="stop" type="JButton" type-id="JButton" visibility="package" abstract="false" virtual="false" />
      </attributes>
      <operations>
        <operation id="o8143104aae084c25b264744352858b1281" name="InterfacePanel" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="x" type="int" type-id="int" default-value="" />
            <parameter id="" name="y" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        setLayout(null);
        setSize(x, y);
        setLocation(0, 0);
        setBackground(Color.lightGray);

        /*
         m1Label = new JLabel("PUNKTE:");
         pointLabel.setSize(100, 45);
         pointLabel.setLocation(120, 0);
         */
        logText = new JTextArea();
        logText.setLineWrap(true);
        logText.setEditable(false);
        logText.setVisible(true);

        pointLabel = new JLabel("PUNKTE:");
        pointLabel.setSize(100, 45);
        pointLabel.setLocation(120, 0);

        pointText = new JTextArea();
        pointText.setLineWrap(true);
        pointText.setEditable(false);
        pointText.setVisible(true);
        pointText.setSize(100, 25);
        pointText.setLocation(120, 30);

        stateLabel = new JLabel("STATE:");
        stateLabel.setSize(100, 45);
        stateLabel.setLocation(10, 0);

        stateText = new JTextArea();
        stateText.setLineWrap(true);
        stateText.setEditable(false);
        stateText.setVisible(true);
        stateText.setSize(100, 25);
        stateText.setLocation(10, 30);

        phaseLabel = new JLabel("PHASE:");
        phaseLabel.setSize(100, 45);
        phaseLabel.setLocation(10, 50);

        phaseText = new JTextArea();
        phaseText.setLineWrap(true);
        phaseText.setEditable(false);
        phaseText.setVisible(true);
        phaseText.setSize(100, 25);
        phaseText.setLocation(10, 80);

        timeLabel = new JLabel("PHASE TIME:");
        timeLabel.setSize(100, 45);
        timeLabel.setLocation(10, 100);

        timeText = new JTextArea();
        timeText.setLineWrap(true);
        timeText.setEditable(false);
        timeText.setVisible(true);
        timeText.setSize(100, 25);
        timeText.setLocation(10, 130);

        start = new JButton();
        start.setText("START");
        start.setSize(100, 50);
        start.setLocation(10, 340);
        start.addMouseListener(this);

        stop = new JButton();
        stop.setText("STOP");
        stop.setSize(100, 50);
        stop.setLocation(110, 340);
        stop.addMouseListener(this);

        scrollPane = new JScrollPane(logText);
        scrollPane.setSize(370, 350);
        scrollPane.setLocation(400, 50);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);

        logLabel = new JLabel("LOG:");
        logLabel.setSize(100, 45);
        logLabel.setLocation(400, 10);

        add(stop);
        add(pointLabel);
        add(pointText);
        add(phaseLabel);
        add(stateLabel);
        add(timeLabel);
        add(logLabel);
        add(start);
        add(scrollPane, BorderLayout.CENTER);
        add(stateText);
        add(phaseText);
        add(timeText);
        setVisible(true);}

    /**
     *
     * @param in Schreibt die mitgegebene Nachricht in das Log-Fenster
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o97df6766c276439dbbd69c5259b888a181" name="printLog" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="in" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{       
        // Schreibt eine Nachricht in das Log-Fenster
        logText.append(in + "\n");
        scrollDown();}</source-code>
          </source-codes>
        </operation>
        <operation id="o6323c22b397445a58c1847bc2764290f81" name="scrollDown" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        /*
         int max;
   
         max = scrollPane.getVerticalScrollBar().getMaximum();
         scrollPane.getVerticalScrollBar().setValue( max );
         scrollPane.repaint();
         */}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o2cd81624f5d6490481eaf3b4a4cc6bf081" name="mouseClicked" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="e" type="MouseEvent" type-id="MouseEvent" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        if (e.getButton() == MouseEvent.BUTTON1){
            if (e.getClickCount() == 1){
                // connect
                if (e.getSource() == start){
                    try{
                        Main.startServer();} catch (InterruptedException ex){
                        Logger.getLogger(InterfacePanel.class.getName()).log(Level.SEVERE, null, ex);} catch (IOException ex){
                        Logger.getLogger(InterfacePanel.class.getName()).log(Level.SEVERE, null, ex);}}

                // disconect
                if (e.getSource() == stop){
                    Main.stopServer();}}}}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o885104e8ae7349729b8d03024e0a1a4281" name="mousePressed" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="e" type="MouseEvent" type-id="MouseEvent" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="od01de35c595b460eb84c48d1c6904af881" name="mouseReleased" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="e" type="MouseEvent" type-id="MouseEvent" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o895340c0b2344bc9b4563094b8f08ceb81" name="mouseEntered" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="e" type="MouseEvent" type-id="MouseEvent" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oa010de125d224ba78b7f1b402fc71cba81" name="mouseExited" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="e" type="MouseEvent" type-id="MouseEvent" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o0edf3c962f834648bc25011e3d8e12da81" name="stateChanged" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="e" type="ChangeEvent" type-id="ChangeEvent" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="of3353ba3259c4419b5c6ab294b62ca0281" name="update" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="o" type="Observable" type-id="Observable" default-value="" />
            <parameter id="" name="arg" type="Object" type-id="Uml.Object" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        String[ send = (String[) arg;

        String gamePoints = send[0;
        String gamePhase = send[1;
        String gameState = send[2;
        String gameTime = send[3;
        
        printLog(send[5);

        pointText.setText(gamePoints);
        phaseText.setText(gamePhase);
        stateText.setText(gameState);
        timeText.setText(gameTime);}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di607521656589624180" cid="C017" type="class" name="RefboxFrame" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/27/2014 18:03:30">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="ad2267af7b536496484af1c269be9e69490" name="sizeX" type="int" type-id="int" visibility="package" abstract="false" virtual="false" default-value="400" />
        <attribute id="afae9a50fb95a4ac388d3a585cd24885c90" name="sizeY" type="int" type-id="int" visibility="package" abstract="false" virtual="false" default-value="400" />
        <attribute id="afa9eeffbab9e4af7b15c8b65d563f1a290" name="applikation" type="JFrame" type-id="JFrame" visibility="package" abstract="false" virtual="false" />
        <attribute id="a332c320604a84bb49aded8a16dcb987b90" name="container" type="Container" type-id="Container" visibility="package" abstract="false" virtual="false" />
        <attribute id="aaa1a188e4c924e70a652b2a4e241881790" name="panel" type="RefboxPanel" type-id="RefboxPanel" visibility="public" abstract="false" virtual="false" />
      </attributes>
      <operations>
        <operation id="o9d016ae3125041ccab99e60043957e0490" name="RefboxFrame" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="interfacePanel" type="InterfacePanel" type-id="InterfacePanel" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
          applikation = new JFrame("Refbox");
          container = applikation.getContentPane();
          
          panel = new RefboxPanel(sizeX, sizeY, this, interfacePanel);
      
          
          applikation.setSize(sizeX, sizeY);
          applikation.setLocation(100, 100);
          
          applikation.add(panel);
          applikation.setVisible(true);}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o06ce544b07124987ae8d8b93f88e889b91" name="actionPerformed" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="e" type="ActionEvent" type-id="ActionEvent" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di400388769941401461" cid="C018" type="class" name="RefboxPanel" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/27/2014 18:03:30">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="adb1556011db5473cbd65cf017bacf098105" name="frame" type="RefboxFrame" type-id="RefboxFrame" visibility="package" abstract="false" virtual="false" />
        <attribute id="a7c998ea30cb246969351e3a44c00351c105" name="interfacePanel" type="InterfacePanel" type-id="InterfacePanel" visibility="package" abstract="false" virtual="false" />
      </attributes>
      <operations>
        <operation id="o311dd4f1ef3944fc84c3fbe6bc75bac8105" name="JTextField" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">
    JTextField port = new</source-code>
          </source-codes>
        </operation>
        <operation id="od0719dc9fd4e46918f558a1dd03bf47b105" name="JTextField" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">
    JTextField roboname = new</source-code>
          </source-codes>
        </operation>
        <operation id="odb169d800e884d4881bb2ca0738cb000105" name="JTextField" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">

    JButton ok = new</source-code>
          </source-codes>
        </operation>
        <operation id="o93029262969f451e8937bdd64356cdaa105" name="JButton" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <source-codes />
        </operation>
        <operation id="o9dbf92cea47142b58795db9a15b7859a105" name="RefboxPanel" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="sizeX" type="int" type-id="int" default-value="" />
            <parameter id="" name="sizeY" type="int" type-id="int" default-value="" />
            <parameter id="" name="frame" type="RefboxFrame" type-id="RefboxFrame" default-value="" />
            <parameter id="" name="interfacePanel" type="InterfacePanel" type-id="InterfacePanel" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.interfacePanel = interfacePanel;
        this.frame = frame;

        setLayout(null);
        setLocation(0, 0);
        setSize(sizeX, sizeY);
        setBackground(Color.ORANGE);

        ip.setText(Main.refBoxIp);
        ip.setLocation(200, 100);
        ip.setSize(180, 40);

        port.setText(Main.refBoxPortIn + "");
        port.setLocation(200, 150);
        port.setSize(180, 40);

        roboname.setText(Main.name);
        roboname.setLocation(200, 200);
        roboname.setSize(180, 40);

        portLabel.setSize(100, 45);
        portLabel.setLocation(100, 150);

        nameLabel.setSize(100, 45);
        nameLabel.setLocation(100, 200);

        ipLabel.setSize(100, 45);
        ipLabel.setLocation(100, 100);

        ok.setText("OK");
        ok.setSize(100, 50);
        ok.setLocation(10, 320);
        ok.addMouseListener(this);

        add(roboname);
        add(nameLabel);
        add(port);
        add(portLabel);
        add(ipLabel);
        add(ip);
        add(ok);
        setVisible(true);}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oa569f78d15374aa584a7d8995177b865105" name="mouseClicked" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="e" type="MouseEvent" type-id="MouseEvent" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{

        if (e.getButton() == MouseEvent.BUTTON1){

            if (e.getClickCount() == 1){

                // Zulaufventil
                if (e.getSource() == ok){
                    try{
                        Main.setIpRefbox(ip.getText());
                        Main.setNameRobo(roboname.getText());
                        frame.applikation.dispose();
                        interfacePanel.printLog("Refbox-IP wurde auf " + Main.refBoxIp + ":" + Main.refBoxPortIn + " geändert!");} catch (IOException ex){}}}}}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="od1f7238ceb7849d8bd76704d006e7d4c105" name="mousePressed" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="e" type="MouseEvent" type-id="MouseEvent" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o35fba58739c84288871b8e4e22b24d45106" name="mouseReleased" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="e" type="MouseEvent" type-id="MouseEvent" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o7c233befc6ac4f43b8ef50b244701fb8106" name="mouseEntered" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="e" type="MouseEvent" type-id="MouseEvent" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o2174348018104577975032da781e1331106" name="mouseExited" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="e" type="MouseEvent" type-id="MouseEvent" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di347668596413591035" cid="C019" type="class" name="UserFrame" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/27/2014 18:03:30">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="ad8b0c78ccbf54f42adb7531f000c1e43118" name="sizeX" type="int" type-id="int" visibility="package" abstract="false" virtual="false" default-value="800" />
        <attribute id="a9c55b075389e41b293752ccddebc3637118" name="sizeY" type="int" type-id="int" visibility="package" abstract="false" virtual="false" default-value="500" />
        <attribute id="af367132360bd41d2ab116e62048edf17118" name="application" type="JFrame" type-id="JFrame" visibility="package" abstract="false" virtual="false" />
        <attribute id="a44c32ce3285344898fe129ca647a1cad118" name="container" type="Container" type-id="Container" visibility="package" abstract="false" virtual="false" />
        <attribute id="aa8b94c50b13d4c8ea586e3465b3cd2d2118" name="menuBar" type="JMenuBar" type-id="JMenuBar" visibility="package" abstract="false" virtual="false" />
        <attribute id="a6e0f79a157d44bc4b9b1a762caf0ae23118" name="opt" type="RefboxFrame" type-id="RefboxFrame" visibility="public" abstract="false" virtual="false" />
        <attribute id="aec0f19cb35db4a248eb88f56721388df119" name="panel" type="InterfacePanel" type-id="InterfacePanel" visibility="public" abstract="false" virtual="false" />
      </attributes>
      <operations>
        <operation id="o66f2fda3774f4ce1ad3aa6309b58989b119" name="UserFrame" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        application = new JFrame("ServerSolidus");
        container = application.getContentPane();

        // Menüleiste erzeugen
        menuBar = new JMenuBar();

        // Menüelemente erzeugen
        fileMenu = new JMenu("Datei");
        optMenu = new JMenu("Optionen");

        // Untermenüelemente erzeugen
        exitItem = new JMenuItem("Beenden");
        exitItem.addActionListener(this);
        refboxItem = new JMenuItem("Refbox");
        refboxItem.addActionListener(this);
        roboItem = new JMenuItem("Robotino");
        roboItem.addActionListener(this);

        // Menüelemente hinzufügen
        menuBar.add(fileMenu);
        menuBar.add(optMenu);

        // Untermenüelemente hinzufügen
        fileMenu.add(exitItem);
        optMenu.add(refboxItem);
        optMenu.add(roboItem);

        // Textfeld erzeugen
        application.add(menuBar, BorderLayout.NORTH);
        application.setSize(sizeX, sizeY);
        application.setLocation(100, 100);
        application.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        panel = new InterfacePanel(sizeX, sizeY);

        application.add(panel);
        application.setVisible(true);}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oa182884e8b114b48901d636f039fc3ca119" name="actionPerformed" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="object" type="ActionEvent" type-id="ActionEvent" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{

        if (object.getSource() == exitItem){
            System.exit(0);}
        if (object.getSource() == refboxItem){
            opt = new RefboxFrame(panel);}
        if (object.getSource() == roboItem){}}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di866636076821471600" cid="C020" type="class" name="Cell" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/27/2014 18:03:30">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="aecec23066d48427f94fd2b978d4aeda8141" name="free" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" default-value="true" />
        <attribute id="afc097355fb504d6db1f8c287c0066dc4141" name="direction" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="a013a350a6cae4f46ad8a49e7e9da9d8b141" name="x" type="int" type-id="int" visibility="private" abstract="false" virtual="false" default-value="0" />
        <attribute id="ae3b85ba96fd14a0d8b6caa1830db0cac141" name="y" type="int" type-id="int" visibility="private" abstract="false" virtual="false" default-value="0" />
        <attribute id="af835a6bda0bf490586869fc47806de4b141" name="id" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" />
        <attribute id="a247b4c39a45945759037310ac0f0847d141" name="mTyp" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" default-value="null" />
      </attributes>
      <operations>
        <operation id="o701bb2a8aca74e4b8e3c0b97d6bddedd141" name="Cell" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="x" type="int" type-id="int" default-value="" />
            <parameter id="" name="y" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.x = x;
        this.y = y;}</source-code>
          </source-codes>
        </operation>
        <operation id="o1e6e822932ae45a8aed4cf4386d05005141" name="isFree" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return free;}</source-code>
          </source-codes>
        </operation>
        <operation id="o10485feb4bdb4a559712dc843d5a04a9141" name="setFree" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="free" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.free = free;}</source-code>
          </source-codes>
        </operation>
        <operation id="o6eb896b0ebd945af86541e1402c9c259141" name="getDirection" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return direction;}</source-code>
          </source-codes>
        </operation>
        <operation id="ob651c780286049da9ba1caff4cbe4571141" name="getRealY" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return realY;}</source-code>
          </source-codes>
        </operation>
        <operation id="o174ed7048f5c4c819753a7518d9800dc141" name="setRealY" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="realY" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.realY = realY;}</source-code>
          </source-codes>
        </operation>
        <operation id="o04533ef68f344d04b2412808b2fc1512141" name="getRealX" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return realX;}</source-code>
          </source-codes>
        </operation>
        <operation id="o06f01425b57d4c0c8681f670cf92c2c9142" name="setRealX" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="realX" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.realX = realX;}</source-code>
          </source-codes>
        </operation>
        <operation id="ofdd92d44f8be45e6b3bdeb253811fb6a142" name="setDirection" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="direction" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.direction = direction;}</source-code>
          </source-codes>
        </operation>
        <operation id="oe7e1f933fec94a829848f577fe786a08142" name="getX" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return x;}</source-code>
          </source-codes>
        </operation>
        <operation id="o3200b3765c7b4c82b798dd7e0f62c841142" name="setX" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="xval" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.x = xval;}</source-code>
          </source-codes>
        </operation>
        <operation id="o0cf93283692443a782cf3fa701662d00142" name="getY" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return y;}</source-code>
          </source-codes>
        </operation>
        <operation id="o4d11ac0436034e85b009c2079878a492142" name="setY" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="yval" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.y = yval;}</source-code>
          </source-codes>
        </operation>
        <operation id="o3f12f2cd643f4c179c8f069122a0b391142" name="getId" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return id;}</source-code>
          </source-codes>
        </operation>
        <operation id="o0cd130790622412fa1ae652dbdc032ba142" name="setId" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="id" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.id = id;}</source-code>
          </source-codes>
        </operation>
        <operation id="od72ad6b62eb742b5811ffac624d1af7e142" name="getMachineNr" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return Integer.parseInt(id.substring(1));  //Cut the first letter}</source-code>
          </source-codes>
        </operation>
        <operation id="o79d921d3f2b949229ecd409e8c49357c142" name="getmTyp" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return mTyp;}</source-code>
          </source-codes>
        </operation>
        <operation id="ob213cb325ce54da399d16771365c8538142" name="setmTyp" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="mTyp" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.mTyp = mTyp;}</source-code>
          </source-codes>
        </operation>
        <operation id="o168e0cbd6e504eb1acc953510ea7a33d142" name="paint" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="g" type="Graphics" type-id="Graphics" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        if (free == true){
            g.setColor(Color.LIGHT_GRAY);} else{
            g.setColor(Color.red);}
        g.fillRect(0, 0, 50, 50);

        if (free == false &amp;&amp; direction == WEST){
            g.setColor(Color.BLACK);
            g.drawLine(15, 25, 35, 25); // start x,y ende x,y
            g.drawLine(25, 15, 25, 25);}
        if (free == false &amp;&amp; direction == EAST){
            g.setColor(Color.BLACK);
            g.drawLine(15, 25, 35, 25); // ---
            g.drawLine(25, 25, 25, 35);   // |}

        if (free == false &amp;&amp; direction == NORTH){
            g.setColor(Color.BLACK);
            g.drawLine(25, 25, 35, 25); // ---
            g.drawLine(25, 15, 25, 35);   // |}

        if (free == false &amp;&amp; direction == SOUTH){
            g.setColor(Color.BLACK);
            g.drawLine(15, 25, 25, 25); // ---
            g.drawLine(25, 15, 25, 35);   // |}
        if (!free){
            g.drawString(getDirLetter(), 35, 48);}
        g.setColor(Color.black);
        g.drawString(x + "/" + this.y, 5, 13);
        g.drawString(this.id, 5, 48);}</source-code>
          </source-codes>
        </operation>
        <operation id="od6c3434265bf41a0a4281ba2bbdace7e142" name="getDirLetter" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return getDirLetterFromPhi(direction);}</source-code>
          </source-codes>
        </operation>
        <operation id="of8d0542eae294a4f86a8c7ec1c7c7e40142" name="getDirLetterFromPhi" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="direction" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        switch (direction){
            case 0:
                return "W";
            case 90:
                return "N";
            case 180:
                return "E";
            case 270:
                return "S";
            default:
                return "?";}}</source-code>
          </source-codes>
        </operation>
        <operation id="oca327a7e0ac54f25a5b8df0a2eba9e6e142" name="getPhiFromDirLetter" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="letter" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        switch (letter){
            case "W":
                return 0;
            case "N":
                return 90;
            case "E":
                return 180;
            case "S":
                return 270;
            default:
                return -1;}}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di831750545478570951" cid="C021" type="class" name="FieldCommander" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/27/2014 18:03:30">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a0532fab2ead24561b50967d7f92ba9a9174" name="county" type="int" type-id="int" visibility="package" abstract="false" virtual="false" default-value="0" />
        <attribute id="acc3c5fd67ab04adabf6b68b2157fc078174" name="countx" type="int" type-id="int" visibility="package" abstract="false" virtual="false" default-value="0" />
      </attributes>
      <operations>
        <operation id="od1757b5eb1c6444696b722ea073b8208174" name="HashMap" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">    //Map for Machine-ID-Access

    /**
    * Singleton Pattern Constructor
    * @return the only instance to FieldCommander 
    */</source-code>
          </source-codes>
        </operation>
        <operation id="o5dcd18022d834280b09119a348924b9f174" name="getInstance" type="FieldCommander" type-id="FieldCommander" visibility="public" abstract="false" virtual="false" static="true">
          <source-codes>
            <source-code language="Undefined">{
      if(instance==null){
        instance=new FieldCommander();}
      return instance;}</source-code>
          </source-codes>
        </operation>
        <operation id="o07b76a47dec047b593341097ef45f434174" name="FieldCommander" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        initFieldModel();
        initFieldGraphic();}</source-code>
          </source-codes>
        </operation>
        <operation id="o60a8b73edab04270ac49f6db4ed5d3fb174" name="initFieldGraphic" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        this.setLayout(null);
        this.setSize(1250, 700);
        this.addWindowListener(new WindowAdapter(){
            @Override
            public void windowClosing(WindowEvent e){
                System.exit(0);}});}</source-code>
          </source-codes>
        </operation>
        <operation id="o0bb9ac3e5aa54123ad18317212d8a51e174" name="initFieldModel" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        //&lt;editor-fold defaultstate="collapsed" desc="free cell definitions"&gt;
        for (int y = starty + 31; y &lt; 563; y = y + 56) // 50 von oben weg und dann in 56er schritten weiter{
            for (int x = 50 + 34; x &lt; 563 + startx - 50; x = x + 56) // 50 von der Seite weg und dann in 56er schritten{
                cell[countx[county = new Cell(countx, county);
                cell[countx[county.setLayout(null);
               // cell[countx][county].setX(x);
               // cell[countx][county].setY(y);
                cell[countx[county.setRealX(-(x + 25 - startx) * 10); // effektiver x wert setzten
                cell[countx[county.setRealY((y + 25 - starty) * 10); // effektiver y wert setzen
                cell[countx[county.setLocation(x, y); // hier gibst du lediglich den Offset von der Seite aus an
                cell[countx[county.setSize(50, 50); // hier die grösse des Panels ( da eine Zelle 0,5 m gross ist 50
                cell[countx[county.setId("");
                this.add(cell[countx[county);
                countx++;}
            countx = 0;
            county++;}
//&lt;/editor-fold&gt;

        //&lt;editor-fold defaultstate="collapsed" desc="Machine Definitions"&gt;
        setCell(10, 2, "M13", false, WEST);
        machineMap.put("M13", cell[10[2);

        setCell(10, 4, "M14", false, EAST);
        machineMap.put("M14", cell[10[4);

        setCell(10, 8, "R2", false, NORTH);
        machineMap.put("R2", cell[10[8);

        setCell(12, 2, "M15", false, NORTH);
        machineMap.put("M15", cell[12[2);

        setCell(12, 4, "M16", false, SOUTH);
        machineMap.put("M16", cell[12[4);
        setCell(12, 6, "M17", false, SOUTH);
        machineMap.put("M17", cell[12[6);

        setCell(14, 2, "M18", false, EAST);
        machineMap.put("M18", cell[14[2);

        setCell(14, 6, "M19", false, WEST);
        machineMap.put("M19", cell[14[6);

        setCell(14, 8, "M20", false, SOUTH);
        machineMap.put("M20", cell[14[8);
        setCell(16, 2, "M21", false, NORTH);
        machineMap.put("M21", cell[16[2);

        setCell(16, 4, "M22", false, EAST);
        machineMap.put("M22", cell[16[4);

        setCell(16, 8, "M23", false, WEST);
        machineMap.put("M23", cell[16[8);

        setCell(18, 8, "M24", false, WEST);
        machineMap.put("M15", cell[18[8);

        setCell(8, 2, "M1", false, WEST);
        machineMap.put("M1", cell[8[2);

        setCell(8, 4, "M2", false, EAST);
        machineMap.put("M2", cell[8[4);

        setCell(8, 8, "R1", false, SOUTH);
        machineMap.put("R1", cell[8[8);

        setCell(6, 2, "M3", false, SOUTH);
        machineMap.put("M3", cell[6[2);

        setCell(6, 4, "M4", false, NORTH);
        machineMap.put("M4", cell[6[4);

        setCell(6, 6, "M5", false, NORTH);
        machineMap.put("M5", cell[6[6);

        setCell(4, 2, "M6", false, EAST);
        machineMap.put("M6", cell[4[2);

        setCell(4, 6, "M7", false, WEST);
        machineMap.put("M7", cell[4[6);

        setCell(4, 8, "M8", false, NORTH);
        machineMap.put("M8", cell[4[8);

        setCell(0, 8, "M12", false, WEST);
        machineMap.put("M12", cell[0[8);

        setCell(2, 2, "M9", false, SOUTH);
        machineMap.put("M9", cell[2[2);

        setCell(2, 4, "M10", false, EAST);
        machineMap.put("M10", cell[2[4);

        setCell(2, 8, "M11", false, WEST);
        machineMap.put("M11", cell[2[8);
        
        
        setCell(6,0,"P1",true,EAST);
        setCell(12,0,"P2",true,EAST);// Puck cells
//&lt;/editor-fold&gt;}</source-code>
          </source-codes>
        </operation>
        <operation id="o519ea96b7940491884abe3987bdb9639175" name="setCell" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="x" type="int" type-id="int" default-value="" />
            <parameter id="" name="y" type="int" type-id="int" default-value="" />
            <parameter id="" name="id" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="free" type="boolean" type-id="boolean" default-value="" />
            <parameter id="" name="dir" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        cell[x[y.setId(id);
        cell[x[y.setFree(free);
        cell[x[y.setDirection(dir);}</source-code>
          </source-codes>
        </operation>
        <operation id="obbadfd9d5ba44cdcb8d5333f26375435175" name="paint" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="g" type="Graphics" type-id="Graphics" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        g.setColor(Color.red);
        // Field Frame
        g.drawRect(startx, starty, 563, 563);
        g.drawRect(50, 50, 563, 563);

        // Pucks symbolisch
        g.fillOval(395 + 50 - 10, 50 + 10, 20, 20);
        g.fillOval(50 + 731 - 10, 50 + 10, 20, 20);
        
        //&lt;editor-fold defaultstate="collapsed" desc="Delivery Gates"&gt;
        g.setColor(Color.black);
        g.drawLine(50 + 20, 50 + 280, 50 + 35, 50 + 280);
        g.drawLine(50 + 20, 50 + 270, 50 + 20, 50 + 290);
        g.drawString("D1", 50 + 2, 50 + 250);

        g.drawLine(50 + 20, 50 + 245, 50 + 35, 50 + 245);
        g.drawLine(50 + 20, 50 + 235, 50 + 20, 50 + 255);
        g.drawString("D2", 50 + 2, 50 + 285);

        g.drawLine(50 + 20, 50 + 315, 50 + 35, 50 + 315);
        g.drawLine(50 + 20, 50 + 305, 50 + 20, 50 + 325);
        g.drawString("D3", 50 + 2, 50 + 320);

        g.drawLine(50 + 1125 - 20, 50 + 280, 50 + 1125 - 35, 50 + 280);
        g.drawLine(50 + 1125 - 20, 50 + 270, 50 + 1125 - 20, 50 + 290);
        g.drawString("D4", 50 + 1108, 50 + 250);

        g.drawLine(50 + 1125 - 20, 50 + 245, 50 + 1125 - 35, 50 + 245);
        g.drawLine(50 + 1125 - 20, 50 + 235, 50 + 1125 - 20, 50 + 255);
        g.drawString("D5", 50 + 1108, 50 + 285);

        g.drawLine(50 + 1125 - 20, 50 + 315, 50 + 1125 - 35, 50 + 315);
        g.drawLine(50 + 1125 - 20, 50 + 305, 50 + 1125 - 20, 50 + 325);
        g.drawString("D6", 50 + 1108, 50 + 320);
//&lt;/editor-fold&gt;}</source-code>
          </source-codes>
        </operation>
        <operation id="ocbbc12e7517f40019312d9cc5c39b8fd175" name="main" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        FieldCommander f = new FieldCommander();

        f.setVisible(true);
        System.out.println(f.cell[5[1.getRealX());
            System.out.println(f.cell[5[1.getRealY());
// hier kann die Mittelpunktkoordianten des Panels abgefragt werden ( evtl brauchen wir noch eine Variable mehr mit dem Effektivwert )
        System.out.println(f.cell[5[4.getRealX());
            System.out.println(f.cell[5[4.getRealY());
       // System.out.println(f.cell[0][0].getRealY());
        //System.out.println(f.cell[0][0].getRealX());}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di413578824345513262" cid="C022" type="class" name="ComView" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/27/2014 18:03:30">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a3a7daf437254479abc4b5ea63fa4f8af202" name="counter" type="int" type-id="int" visibility="package" abstract="false" virtual="false" default-value="0" />
        <attribute id="ae5069066319a424690bbadfbeb9d52ac202" name="com" type="UDPServer" type-id="UDPServer" visibility="package" abstract="false" virtual="false" />
        <attribute id="a4c182c64fb0c4975b215dc71955cab67202" name="serverSocket" type="DatagramSocket" type-id="DatagramSocket" visibility="package" abstract="false" virtual="false" />
        <attribute id="a11231cb0315d4d6f861a95937bc07beb202" name="x" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="a53401b35b54d430db71f188811920367202" name="y" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="a1f81417c42b64b68bbb3ff8de6199c8a203" name="phi" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="a8471ad8bbd3245e096a0a05131ccf74c203" name="check" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="abcd946b6bb23488e98bbf98605f1bf6a203" name="station" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="a5ab43f12142e48efb1520ccc13c7a162203" name="go" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="a6d2a833be9564697805d898fcb2f9ceb203" name="phase" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="a2cf1ce81eae94f2a9ada0f18f49f7aa6203" name="ready" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="ad23b9c1cb66c40c2aa7090e8c80c72aa203" name="red" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="ab93b83e60cf149fc948a9e954b2e8693203" name="orange" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="ad8a30a7fddf846e4a6f042a2fb714d14203" name="green" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="a1d8f50ee58b946e499fad6c857dc4aac203" name="ende" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="a583f64df21ca473391a8d26767a7425c203" name="xAktuell" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="a06bf3f75347c4a06841482be08c3d5d9203" name="yAktuell" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="afe922465c4994f15977f2e9521067bd0203" name="run" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" default-value="true" />
      </attributes>
      <operations>
        <operation id="o1e4697aef77d483b99906933c40a418d203" name="getInstance" type="ComView" type-id="ComView" visibility="public" abstract="false" virtual="false" static="true">
          <source-codes>
            <source-code language="Undefined">{
        if (instance == null){
            instance = new ComView();}
        return instance;}</source-code>
          </source-codes>
        </operation>
        <operation id="o79a59e10b0db49c985dd08150df80b3a203" name="ComView" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        // this.laser = laser;
        // Reverentieren
        com = new UDPServer();
        breaking = LaserControlledBreaking.getInstance();

        // msg = new int[10];
        x = 0;
        y = 0;
        phi = 0;
        check = 0;
        station = 0;
        go = 0;
        phase = 0;

        ready = 0;
        red = 0;
        orange = 0;
        green = 0;
        ende = 0;
        xAktuell = 0;
        yAktuell = 0;}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o0c4d37885b194e9884f5a88d3a9937b2203" name="run" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        while (run == true){
            try{
                serverSocket = new DatagramSocket(5000);
                int[ sendKoor ={
                    x, y, phi, station, phase, go, breaking.getBremsfaktor(), 0};

                com.sendViewMessage(sendKoor, "127.0.0.1", 5001);

                int[ msg = com.getViewMessagr(serverSocket);
                ready = msg[0;
                red = msg[1;
                orange = msg[2;
                green = msg[3;
                ende = msg[4;
                xAktuell = msg[5;
                yAktuell = msg[6;
                serverSocket.close();} catch (Exception ex){
                Logger.getLogger(ComView.class.getName()).log(Level.SEVERE, null, ex);}
            try{
                Thread.sleep(100);} catch (InterruptedException ex){
                Logger.getLogger(ComView.class.getName()).log(Level.SEVERE, null, ex);}}}</source-code>
          </source-codes>
        </operation>
        <operation id="oe4d5c46b1c4b4ff7b3528f7ce025c54b203" name="setGo" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="go" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.go = go;}

    /**
     * Gibt die zuletzt gelesenen Lampenfarben zurück: rot,orange,grün 0 = aus,
     * 1 = leuchtet, 2 = blinkt
     *
     * @return
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o4183110daef4445fa25da685cdea6e6d203" name="getLamp" type="int[]" type-id="int[]" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        int[ lamp ={
            red, orange, green};
        return lamp;}</source-code>
          </source-codes>
        </operation>
        <operation id="oc9c1fc7a42694ec3b07a931bf5ac7f97204" name="getReady" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        // System.out.println("&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; GET NOW READY &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;");
        return ready;}</source-code>
          </source-codes>
        </operation>
        <operation id="oa7d8b2a7a10a4dd3942ecc16cb37e7b8204" name="getEnde" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{

        //  System.out.println("Ende wurde empfagnen: " + ende);
        return ende;}

    /**
     * Gibt befehl die Station anzufahren 1/0
     *
     * @return
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o2409fbd74ca745119db4743145d7143d204" name="setStation" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="go" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{

        station = go;
        System.out.println(station);}</source-code>
          </source-codes>
        </operation>
        <operation id="oe2588bc18e4e4f56a6d3d2a1fcfe161c204" name="setKoords" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="x" type="int" type-id="int" default-value="" />
            <parameter id="" name="y" type="int" type-id="int" default-value="" />
            <parameter id="" name="phi" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{

        this.x = x;

        this.y = y;

        this.phi = phi;}</source-code>
          </source-codes>
        </operation>
        <operation id="o59fae11dbd8847b98565339c897dec3a204" name="getPhase" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return phase;}</source-code>
          </source-codes>
        </operation>
        <operation id="o5d4c9cdf93304d408df56537cf8042d6204" name="setPhase" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="phase" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.phase = phase;}</source-code>
          </source-codes>
        </operation>
        <operation id="ob57790e5200e440a847453ac89835766204" name="getxAktuell" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return xAktuell;}</source-code>
          </source-codes>
        </operation>
        <operation id="ob971a11291da4c97be88d19f55732e24204" name="getyAktuell" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return yAktuell;}</source-code>
          </source-codes>
        </operation>
        <operation id="oea5fb86fa44347e8b866fc156c3c55c9204" name="main" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws IOException{
        // TiM55x_Solidus laser = new TiM55x_Solidus();
        ComView com = new ComView();
        com.start();}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di305537079185333383" cid="C023" type="class" name="FileIO" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/27/2014 18:03:30">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="o91930247f3e444e8a761ba6e304c65a9227" name="FileIO" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{}
    
    //**********************************************************************************************************
    //******                                        READ                                                   *****
    //**********************************************************************************************************</source-code>
          </source-codes>
        </operation>
        <operation id="o87bc131a7c844406b5fe1d63334a24f9227" name="getText" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="file" type="File" type-id="File" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws FileNotFoundException, IOException, InterruptedException{
        

        FileReader leser = new FileReader(file);
        int length =(int) file.length();
        char[ temp = new char[length;
        
        while (file.exists() == false);{
            //Thread.sleep(50);}
        
        leser.read(temp);
        leser.close();
        String out = String.valueOf(temp);

        return out;}</source-code>
          </source-codes>
        </operation>
        <operation id="oeeb50c42fcef4fdca459c05c4fa946d7227" name="getLastChar" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="file" type="File" type-id="File" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws FileNotFoundException, IOException, InterruptedException{
        
        
        FileReader leser = new FileReader(file);
        int length =(int) file.length();
        char[ temp = new char[length;
        
        while (file.exists() == false);{
            //Thread.sleep(50);}
        
        leser.read(temp);
        leser.close();
        char temp2 = temp[length-1;
        String out = String.valueOf(temp2);

        return out;}
     
     /**
      * 
      * @param file
      * @return
      * @throws FileNotFoundException
      * @throws IOException 
      * Gibt den zweit letzten char[] platz zurück.
      * Da das Programm RoboView beim schreiben in ein Textdokument immer noch
      * einen Zeilenumbruch anfügt, muss der zweitletzte char[] gelesen werden
      * um das letzte Zeichen zu bekommen.
      */</source-code>
          </source-codes>
        </operation>
        <operation id="o0f3c5f790a0c460180dc6655e4aed296227" name="getSecendLastChar" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="file" type="File" type-id="File" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws FileNotFoundException, IOException, InterruptedException{
        
        
        FileReader leser = new FileReader(file);
        int length =(int) file.length();
        char[ temp = new char[length;
        
        while (file.exists() == false);{
            //Thread.sleep(50);}
        leser.read(temp);
        leser.close();
        char temp2 = temp[length-3;
        String out = String.valueOf(temp2);

        return out;}
    
   
    
    
    
    
    //**********************************************************************************************************
    //******                                        WRITH                                                  *****
    //**********************************************************************************************************

    
    
    // Dokument schreiben mit String</source-code>
          </source-codes>
        </operation>
        <operation id="o8e6f34fab8ad4583a5402d0ed4b908e1227" name="setText" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="temp" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="file" type="File" type-id="File" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws FileNotFoundException, IOException, InterruptedException{

        FileWriter schreiber = new FileWriter(file);
        
        while (file.exists() == false);{
            //Thread.sleep(50);}
        schreiber.write(temp);
        schreiber.flush();
        schreiber.close();}</source-code>
          </source-codes>
        </operation>
        <operation id="o9dd5c964d0a048c2b17bdeb46c179d1e228" name="setOnlyNumber" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="temp" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="file" type="File" type-id="File" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws FileNotFoundException, IOException, InterruptedException{
            String chnge1 = ",";
            String chnge2 = "[";
            String chnge3 = "]";
        
// --------------------------   entfernt ","   ---------------------------------
            
            char[ stringArray1 = temp.toCharArray();
            String temp1 = "";
        
            for(int i = 0; i &lt; stringArray1.length; i++){
            
                if(String.valueOf(stringArray1[i).equals(chnge1) == false){
                    temp1 += String.valueOf(stringArray1[i).toString();}}
            
// --------------------------   entfernt "["   ---------------------------------
            
            char[ stringArray2 = temp1.toCharArray();
            String temp2 = "";
        
            for(int i = 0; i &lt; stringArray2.length; i++){
            
                if(String.valueOf(stringArray2[i).equals(chnge2) == false){
                    temp2 += String.valueOf(stringArray2[i).toString();}}
            
// --------------------------   entfernt "]"   ---------------------------------
            
            char[ stringArray3 = temp2.toCharArray();
            String out = "";
        
            for(int i = 0; i &lt; stringArray3.length; i++){
            
                if(String.valueOf(stringArray3[i).equals(chnge3) == false){
                    out += String.valueOf(stringArray3[i).toString();}}
            
            setText(out, file);}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di555056699677259969" cid="C024" type="class" name="UDPServer" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/27/2014 18:03:30">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="ofd0fc0ed4dff469baf2f5b986f60cbfa270" name="getViewMessagr" type="int[]" type-id="int[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="serverSocket" type="DatagramSocket" type-id="DatagramSocket" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws Exception{
          
          
        
         
        byte[ receiveData = new byte[36; //
        byte[ in = new byte[36;

// bytes[] der seperaten Komponenten der zu lesenden Nachricht.
        
        byte[ id = new byte[1;
        byte[ length = new byte[2;
        byte[ check = new byte[1;

        byte[ in0 = new byte[4;
        byte[ in1 = new byte[4;
        byte[ in2 = new byte[4;
        byte[ in3 = new byte[4;
        byte[ in4 = new byte[4;
        byte[ in5 = new byte[4;
        byte[ in6 = new byte[4;
        byte[ in7 = new byte[4;
            
        DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
        serverSocket.receive(receivePacket);
                 
                 
       /* for (int i=0; i &lt; 36; i++ )
        {
            System.out.println("INPUT " + i + ": "+Array.getByte(receiveData, i));
        }*/
   
                  //String sentence = new String( receivePacket.getData());
                  in = receivePacket.getData();
                  
                  
                  
                  id[0 = in[0;
                  
                  length[1 = in[1;
                  length[0 = in[2;
                  
                  check[0 = in[3;
                  
                  // Nachricht 0
                  
                  in0[3 = in[4;
                  in0[2 = in[5;
                  in0[1 = in[6;
                  in0[0 = in[7;
                  
                  // Nachricht 1
                  
                  in1[3 = in[8;
                  in1[2 = in[9;
                  in1[1 = in[10;
                  in1[0 = in[11;
                  
                  // Nachricht 2
                  
                  in2[3 = in[12;
                  in2[2 = in[13;
                  in2[1 = in[14;
                  in2[0 = in[15;
                  
                  // Nachricht 3
                  
                  in3[3 = in[16;
                  in3[2 = in[17;
                  in3[1 = in[18;
                  in3[0 = in[19;
                  
                  // Nachricht 4
                  
                  in4[3 = in[20;
                  in4[2 = in[21;
                  in4[1 = in[22;
                  in4[0 = in[23;
                  
                  // Nachricht 5
                  
                  in5[3 = in[24;
                  in5[2 = in[25;
                  in5[1 = in[26;
                  in5[0 = in[27;
                  
                  // Nachricht 6
                  
                  in6[3 = in[28;
                  in6[2 = in[29;
                  in6[1 = in[30;
                  in6[0 = in[31;
                  
                  // Nachricht 7
                  
                  in7[3 = in[32;
                  in7[2 = in[33;
                  in7[1 = in[34;
                  in7[0 = in[35;
                  
                  int[ out = new int[8;
                  
                  
                 
                 out[0 = byteToInt(in0);
                 out[1 = byteToInt(in1);
                 out[2 = byteToInt(in2);
                 out[3 = byteToInt(in3);
                 out[4 = byteToInt(in4);
                 out[5 = byteToInt(in5);
                 out[6 = byteToInt(in6);
                 out[7 = byteToInt(in7);
                 
                /* 
                 System.out.println("Nachricht ist bereit zum senden");
                 
                   System.out.println("ID: " + byteToInt(id));
                   System.out.println("Length: " + byteToInt(length));
                   System.out.println("Check Number: " + byteToInt(check));
                   System.out.println("In 0: " + out[0]);
                   System.out.println("In 1: " + out[1]);
                   System.out.println("In 2: " + out[2]);
                   System.out.println("In 3: " + out[3]);
                   System.out.println("In 4: " + out[4]);
                   System.out.println("In 5: " + out[5]);
                   System.out.println("In 6: " + out[6]);
                   System.out.println("In 7: " + out[7]);
                   */
                   
                   return out;}
      
   
/**
 * 
 * Sendet das mitgegebene byte[] über den Port port an die Ip ip
 * @param sendData
 * @throws SocketException
 * @throws UnknownHostException
 * @throws IOException 
 */</source-code>
          </source-codes>
        </operation>
        <operation id="of56ed9a923c54f729c6a9a2d62e76e88271" name="sendViewMessage" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="out" type="int" type-id="int" default-value="" />
            <parameter id="" name="ip" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="port" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws SocketException, UnknownHostException, IOException, InterruptedException{
   /*
       System.out.println("SENDEN Nachricht 0: " + out[0]);
       System.out.println("SENDEN Nachricht 1: " + out[1]);
       System.out.println("SENDEN Nachricht 2: " + out[2]);
       System.out.println("SENDEN Nachricht 3: " + out[3]);
       System.out.println("SENDEN Nachricht 4: " + out[4]);
       System.out.println("SENDEN Nachricht 5: " + out[5]);
       System.out.println("SENDEN Nachricht 6: " + out[6]);
       System.out.println("SENDEN Nachricht 7: " + out[7]);
       */
       
       byte[ sendData = new byte[36;
       
       byte[ id = new byte[1;
       byte[ length = new byte[2;
       byte[ check = new byte[1;

       byte[ out0 = new byte[4;
       byte[ out1 = new byte[4;
       byte[ out2 = new byte[4;
       byte[ out3 = new byte[4;
       byte[ out4 = new byte[4;
       byte[ out5 = new byte[4;
       byte[ out6 = new byte[4;
       byte[ out7 = new byte[4;
       
      
       length = intToByte(2, 36);
       
       out0 = intToByte(4, out[0);
       out1 = intToByte(4, out[1);
       out2 = intToByte(4, out[2);
       out3 = intToByte(4, out[3);
       out4 = intToByte(4, out[4);
       out5 = intToByte(4, out[5);
       out6 = intToByte(4, out[6);
       out7 = intToByte(4, out[7);
       
        //Nachricht id
       
        sendData[0 = 0;
        
        //Nachricht länge ( ist immer 36 Byte)
        
        sendData[1 = length[1;
        sendData[2 = 0; // length[0] ergibt 9, sollte aber 0 ergeben???
        
        // senData[3] steht weiter unten und kann erst nach erstellen der restlichen
        // Nachricht erstellt werden.
        
        //Nachricht 0
        
        sendData[4 = out0[3;
        sendData[5 = out0[2;
        sendData[6 = out0[1;
        sendData[7 = out0[0;
        
        //Nachricht 1
        
        sendData[8 = out1[3;
        sendData[9 = out1[2;
        sendData[10 = out1[1;
        sendData[11 = out1[0;
        
        //Nachricht 2
        
        sendData[12 = out2[3;
        sendData[13 = out2[2;
        sendData[14 = out2[1;
        sendData[15 = out2[0;
        
        //Nachricht 3
        
        sendData[16 = out3[3;
        sendData[17 = out3[2;
        sendData[18 = out3[1;
        sendData[19 = out3[0;
        
        //Nachricht 4
        
        sendData[20 = out4[3;
        sendData[21 = out4[2;
        sendData[22 = out4[1;
        sendData[23 = out4[0;
        
        //Nachricht 5
        
        sendData[24 = out5[3;
        sendData[25 = out5[2;
        sendData[26 = out5[1;
        sendData[27 = out5[0;
        
        //Nachricht 6
        
        sendData[28 = out6[3;
        sendData[29 = out6[2;
        sendData[30 = out6[1;
        sendData[31 = out6[0;
        
        //Nachricht 7
        
        sendData[32 = out7[3;
        sendData[33 = out7[2;
        sendData[34 = out7[1;
        sendData[35 = out7[0;
        
        byte[ nutzdaten = new byte[32;
        
        // Stellt die, für dei Prüfsumme relevanten Bytes zusammen
        
        for (int i = 0; i &lt; 32 ; i++){
            if (i != 2){
               // System.out.println(i);
                nutzdaten[i = sendData[i;}}
        
        // Berechnet die Prüfsumme
        
        byte[ temp = intToByte(1, checksum(nutzdaten, nutzdaten.length));
        
        // Nachricht Prüfsumme
        
       sendData[3 = temp[0;
       
       // Konsolenausgabe
       /*
        for (int i=0; i &lt; 36; i++ )
        {
       
       if ( i == 4 || i == 8 || i == 12 || i == 16 || i == 20 || i == 24 || i == 28 || i == 32)
       {
           System.out.println("-- Nachricht " + ((i/4) - 1) + " --");
       }
       
       System.out.println("OUTPUT " + i + ": "+ Array.getByte(sendData, i));
        }
        */
   // ------------------------------- SENDEN -----------------------------------
        
        DatagramSocket send = new DatagramSocket();
        InetAddress ipadress = InetAddress.getByName( ip );
        send.connect(ipadress, port);
        
        send.send(new DatagramPacket(sendData, sendData.length));
       
        send.disconnect();
        Thread.sleep(100);}
   
// ----------------------- Byte[] zu Integer -----------------------------------
   
/**
 * Wandelt ein byte[] in einen Interger um, es muss ds zu umwandelnde byte[] mitgegeben werden
 * @param in
 * @return 
 */</source-code>
          </source-codes>
        </operation>
        <operation id="o930dcce3983d495394ccc238e48c941c272" name="byteToInt" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="in" type="byte" type-id="byte" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
// byte[] -&gt; int
        int lenght = in.length;
        int number = 0;     
        for (int i = 0; i &lt; lenght; ++i){
            number |= (in[lenght-1-i &amp; 0xff) &lt;&lt; (i &lt;&lt; lenght-1);}

        return number;}
   
// ----------------------- Integer zu Byte[] -----------------------------------
 
   
   
/**
 * Wandelt einen Integer in einen byte[] um, es muss der zu umwandelnde Interger und die gewüscht bytelänge mitgegeben werden.
 * @param length
 * @param in
 * @return 
 */</source-code>
          </source-codes>
        </operation>
        <operation id="o85d0959dbb914fc9acd2b797e4c511d4272" name="intToByte" type="byte[]" type-id="byte[]" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="length" type="int" type-id="int" default-value="" />
            <parameter id="" name="in" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        byte[ data = new byte[length;

        // int -&gt; byte[]
        for (int i = 0; i &lt; length; ++i){
            int shift = i &lt;&lt; length-1; // i * 8
            data[length-1-i = (byte)((in &amp; (0xff &lt;&lt; shift)) &gt;&gt;&gt; shift);}
        return data;}
  
    
    
/**
 * Berechnet die Prüfsumme für das zu sendende byte[] (byte[3])
 * @param nutzdaten
 * @param nutzdatenLänge
 * @return 
 */</source-code>
          </source-codes>
        </operation>
        <operation id="odd2c0417280b450fb83355d5d8ff404c272" name="checksum" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="nutzdaten" type="byte" type-id="byte" default-value="" />
            <parameter id="" name="nutzdatenLänge" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{  
 
    int s0 = 0;
    
    for(int i = 0; i &lt; nutzdatenLänge; ++i){
      s0 = ( s0 + nutzdaten[i )%256;}  
    return ( 0xFF-s0 );}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di964952501849623084" cid="C025" type="class" name="Drive" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/27/2014 18:04:42">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a2e68fb1bf1b54acda97a7da9fd448ddb852" name="fc" type="FieldCommander" type-id="FieldCommander" visibility="package" abstract="false" virtual="false" />
        <attribute id="a2d65f01d1d584676b817d2ff8a468a0b852" name="comView" type="ComView" type-id="ComView" visibility="package" abstract="false" virtual="false" />
        <attribute id="a48afc45ecec647098dee9ade8c967802852" name="lcb" type="LaserControlledBreaking" type-id="LaserControlledBreaking" visibility="package" abstract="false" virtual="false" />
        <attribute id="af0169286507d4552bceee1b8b7a7e745852" name="startPosX" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="a4c6274eb368c4a91869afeb75000af18852" name="startPosY" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="afa4ecd9e58fe46e09751e1d865ad6f99852" name="startPosPhi" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="a562cbd8747e344c194604c50f09a1679852" name="tempTargetX" type="int" type-id="int" visibility="package" abstract="false" virtual="false" default-value="0" />
        <attribute id="a10afde8d0ac14b2fab6c5f5e60f41038852" name="tempTargetY" type="int" type-id="int" visibility="package" abstract="false" virtual="false" default-value="0" />
        <attribute id="aa5a5e948de134b569bc63bcefea54f8f852" name="viewX" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="a06d8e646a3de4662bb1d38e3c5069a09852" name="viewY" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="a5b78a7303a7f401f846c981f4cc767fd852" name="viewXrest" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="afdccc7ae6b574b75a2e58b300a2fee6f852" name="viewYrest" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="ada462700a3a34f46bacb65675e1b8b27852" name="endposreached" type="int" type-id="int" visibility="package" abstract="false" virtual="false" default-value="0" />
        <attribute id="a754d5f8fddd74c0d87fc48f16a05a753852" name="endCell" type="Cell" type-id="Cell" visibility="private" abstract="false" virtual="false" />
        <attribute id="a7b74476dbca04e5880c4f5b1083f401c852" name="startCell" type="Cell" type-id="Cell" visibility="private" abstract="false" virtual="false" />
        <attribute id="a6c7335042e2841dd98deffd93b265a6f852" name="phaseInt" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="a8ff66e2e3b02411cb0bb5c6523af8d63852" name="state" type="String" type-id="Uml.String" visibility="package" abstract="false" virtual="false" />
        <attribute id="a60a958a6033c4e57ab69bf3ef7b4c76d852" name="endPosDirLetter" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" />
        <attribute id="a45a0ae377fd044ffb588d2ed971d1290852" name="turnPhi" type="int" type-id="int" visibility="package" abstract="false" virtual="false" default-value="0" />
        <attribute id="a79ae3d5b66544fa0ac11ae947ab964d4852" name="obstacleOccured" type="Boolean" type-id="Uml.Boolean" visibility="package" abstract="false" virtual="false" default-value="false" />
        <attribute id="a2d7d68303d514783ae1132afceb53eab853" name="alternativeRoute" type="Boolean" type-id="Uml.Boolean" visibility="package" abstract="false" virtual="false" default-value="false" />
        <attribute id="ab5f4c03c569e4bdd82a9b1e7b144b455853" name="directionFree" type="boolean" type-id="boolean" visibility="package" abstract="false" virtual="false" default-value="true" />
        <attribute id="a1f41566f83ab4e9f8cd72402db05fd91853" name="beginning" type="boolean" type-id="boolean" visibility="package" abstract="false" virtual="false" default-value="true" />
      </attributes>
      <operations>
        <operation id="o1d66cdc2db204f8c90440225b8172be9853" name="Drive" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        this.comView = ComView.getInstance();
        this.fc = FieldCommander.getInstance();
        this.lcb = LaserControlledBreaking.getInstance();
        //this.sM = StateMachine.getInstance();
        lcb.start();}
    /*
     Pendenzen:
     Übergabe der Zielkoordinaten muss implementiert werden
     korrekturX und korrekturY müsen definiert werden!
     Wenn Soll und IST maximal 10 mm voneinander abweichen nach 20 Sek trotzdem step weiter.
     am Programmende Check 0 senden!
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o7f14be05139f4984a703e58e4f9af1d0853" name="run" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined"> throws InterruptedException{
        lcb.setRun(true);
        if (beginning == true){
            endposreached = 0;
            startPosX = this.startCell.getX();
            startPosY = this.startCell.getY();
            endTargetX = this.endCell.getX();
            endTargetY = this.endCell.getY();
            tempTargetX = endCell.getRealX() - startCell.getRealX();
            tempTargetY = endCell.getRealY() - startCell.getRealY();
            System.out.println(tempTargetX);
            System.out.println(tempTargetY);
            System.out.println(startCell.getX());
            System.out.println(startCell.getY());
            System.out.println(endCell.getX());
            System.out.println(endCell.getY());
            System.out.println("StartX" + startCell.getRealX());
            System.out.println("StartY" + startCell.getRealY());
            System.out.println("EndX" + endCell.getRealX());
            System.out.println("EndY" + endCell.getRealY());
            System.out.println(endCell.getDirLetter());
            beginning = false;}

        //tempTargetX = endTargetX - startPosX;
        //tempTargetY = endTargetY - startPosY;
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------- Starting in X direction ---------------------------------------------------------------------------------------
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        if ((((startPosY % 2) == 1) || startPosY == 0) &amp;&amp; (startPosX != endTargetX))

        //&lt;editor-fold defaultstate="collapsed" desc="Verfahren in X-Achse"&gt;
        //vergleicht, ob sich der Roboter in einem Gang aufhält, in dem er in X Richtig fahren kann{
            //&lt;editor-fold defaultstate="collapsed" desc="Ausrichtung nach X-Achse"&gt;
            if (startPosX &gt; endTargetX &amp;&amp; !(startPosPhi == 270)){
                sendTurnAngle("S");}
            if (startPosX &lt; endTargetX &amp;&amp; !(startPosPhi == 90)){
                sendTurnAngle("N");}
            //&lt;/editor-fold&gt;
            if (directionFree == true){
                if (((tempTargetX % (2 * fieldsize) == 0) &amp;&amp; (startCell.getX() % 2 == 1)) || ((tempTargetX % (2 * fieldsize) != 0) &amp;&amp; (startCell.getX() % 2 == 0))){
                    //verfahren win X wenn das Zielfeld nicht auf Maschinenhöhe ist
                    sendAndWait(tempTargetX, "X");
                    //v&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;Nicht so ganz - wenn Hinderniss koordinate anders Setzen
                    if (alternativeRoute == false){
                        startPosX = endTargetX;} else{
                        if (startPosPhi == 270){
                            runback("S");}
                        if (startPosPhi == 90){
                            runback("N");}}}
                if (((tempTargetX % (2 * fieldsize) != 0) &amp;&amp; (startCell.getX() % 2 == 1)) || ((tempTargetX % (2 * fieldsize) == 0) &amp;&amp; (startCell.getX() % 2 == 0))){
                    //&lt;editor-fold defaultstate="collapsed" desc="Verfahren in X wenn das Zeilfeld auf Maschinenhöhe ist"&gt;
                    if (startPosY == endTargetY){
                        sendAndWait(tempTargetX, "X");
                        if (alternativeRoute == false){
                            startPosX = endTargetX;} else{
                            if (startPosPhi == 270){
                                runback("S");}
                            if (startPosPhi == 90){
                                runback("N");}}} else{
                        if (tempTargetX &lt; 0){
                            tempTargetX = tempTargetX * (-1);

                            do{
                                // sM.readAndSendPhase();
                                // Mitgegebene Wete sind(int Check,int X,int Y,int Phi)
                                comView.setKoords((tempTargetX - (fieldsize - 1)), 0, 0);} while (comView.getReady() == 0);
                            if (alternativeRoute == false){
                                startPosX = endTargetX - 1;} else{
                                if (startPosPhi == 270){
                                    runback("S");}
                                if (startPosPhi == 90){
                                    runback("N");}}} else{

                            do{
                                // Mitgegebene Wete sind(int Check,int X,int Y,int Phi)
                                //   sM.readAndSendPhase();
                                comView.setKoords((tempTargetX - (fieldsize - 1)), 0, 0);} while (comView.getReady() == 0);
                            if (alternativeRoute == false){
                                startPosX = endTargetX;} else{
                                if (startPosPhi == 270){
                                    runback("S");}
                                if (startPosPhi == 90){
                                    runback("N");}}}}
                    //&lt;/editor-fold&gt;}} else{
                /*
                 }
                 if (endTargetX % 2 == 0)
                 {
                 //&lt;editor-fold defaultstate="collapsed" desc="Zurückfahren wenn in "Sackgasse""&gt;
                 check = 1;
                 do
                 {
                 turnPhi = 180;
                 comView.setKoords(check, 0, 0, turnPhi);
                 //check = 0;
                 //turn arround
                 } while (comView.getReady() == 0);
                 // Run a Field Back
                 check = 1;
                 do
                 {
                 comView.setKoords(check, korrekturX, 0, 0);
                 //check = 0;
                 } while (comView.getReady() == 0);
                 //&lt;/editor-fold&gt;
                 }
                 */}
            /*Hinderniss aufgetreten__________________________________
             metode um über LCB zu steuern!
             */
            //&lt;/editor-fold&gt;}

        //-----------------------------------------------------------------------------------------------------------------------------------------------
        //------------------------------- Starting in Y direction ---------------------------------------------------------------------------------------
        //-----------------------------------------------------------------------------------------------------------------------------------------------
        if ((startPosX % 2) == 1 &amp;&amp; (startPosY != endTargetY)){

            //&lt;editor-fold defaultstate="collapsed" desc="Ausrichtung nach Y-Achse"&gt;
            if (startPosY &gt; endTargetY &amp;&amp; !(startPosPhi == 0)){
                sendTurnAngle("W");}
            if (startPosY &lt; endTargetY &amp;&amp; !(startPosPhi == 180)){
                sendTurnAngle("E");}
            //&lt;/editor-fold&gt;
            if (directionFree == true){
                if (((tempTargetY % (2 * fieldsize) == 0) &amp;&amp; (startCell.getY() % 2 == 1)) || ((tempTargetY % (2 * fieldsize) != 0) &amp;&amp; (startCell.getY() % 2 == 0))){
                    //verfahren in Y wenn das Zielfeld nicht auf Maschinenhöhe ist
                    sendAndWait(tempTargetY, "Y");
                    if (alternativeRoute == false){
                        startPosY = endTargetY;} else{
                        if (startPosPhi == 0){
                            runback("W");}
                        if (startPosPhi == 180){
                            runback("E");}}}
                if (((tempTargetY % (2 * fieldsize) != 0) &amp;&amp; (startCell.getY() % 2 == 1)) || ((tempTargetY % (2 * fieldsize) == 0) &amp;&amp; (startCell.getY() % 2 == 0))){
                    //&lt;editor-fold defaultstate="collapsed" desc="Verfahren in Y wenn das Zeilfeld auf Maschinenhöhe ist"&gt;
                    if (startPosX == endTargetX){
                        sendAndWait(tempTargetY, "Y");
                        if (alternativeRoute == false){
                            startPosY = endTargetY;} else{
                            if (startPosPhi == 0){
                                runback("W");}
                            if (startPosPhi == 180){
                                runback("E");}}} else{
                        if (tempTargetY &lt; 0){
                            tempTargetY = tempTargetY * (-1);

                            do{
                                //   sM.readAndSendPhase();
                                // Mitgegebene Wete sind(int Check,int X,int Y,int Phi)
                                comView.setKoords((tempTargetY - (fieldsize - 1)), 0, 0);} while (comView.getReady() == 0);
                            if (alternativeRoute == false){
                                startPosY = endTargetY - 1;} else{
                                if (startPosPhi == 0){
                                    runback("W");}
                                if (startPosPhi == 180){
                                    runback("E");}}

                            do{
                                //       sM.readAndSendPhase();
                                // Mitgegebene Wete sind(int Check,int X,int Y,int Phi)
                                comView.setKoords((tempTargetY - (fieldsize - 1)), 0, 0);} while (comView.getReady() == 0);
                            if (alternativeRoute == false){
                                startPosY = endTargetY;} else{
                                /*
                                 RUNBACK
                                 */}}
                        //&lt;/editor-fold&gt;}} else{
//NOT SUPPORTED JET_______________________________________________________________________________________________________________________________________________________________________________________
               /*     if (endTargetX % 2 == 0)
                     {
                     //&lt;editor-fold defaultstate="collapsed" desc="Zurückfahren wenn in "Sackgasse""&gt;
                     check = 1;
                     do
                     {
                     turnPhi = 180;
                     comView.setKoords(check, 0, 0, turnPhi);
                     //check = 0;
                     //turn arround
                     } while (comView.getReady() == 0);
                     // Run a Field Back
                     check = 1;
                     do
                     {
                     comView.setKoords(check, korrekturX, 0, 0);
                     //check = 0;
                     } while (comView.getReady() == 0);
                     //&lt;/editor-fold&gt;
                     }*/}

                // Drehen richtung Maschine}}
        if (endTargetX == startPosX &amp;&amp; endTargetY == startPosY){
            //&lt;editor-fold defaultstate="collapsed" desc="An Zielposition zur Maschine drehen"&gt;
            if (endCell.getDirLetter() != null){
                sendTurnAngle(endCell.getDirLetter());}

            //&lt;/editor-fold&gt;
            endposreached = 1;
            startCell = endCell;
            lcb.setRun(false);

            beginning = true;}}
    //--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    //------------------------------------------------------- ENDE DER RUN METODE ----------------------------------------------------------------------------------------------------
    //--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</source-code>
          </source-codes>
        </operation>
        <operation id="oa4c80bc003d9494ab8d170f6acf06897859" name="goStart" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="currX" type="int" type-id="int" default-value="" />
            <parameter id="" name="currY" type="int" type-id="int" default-value="" />
            <parameter id="" name="dir" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws InterruptedException{
        lcb.setRun(false);
        sendAndWait(startCell.getRealY() - currY, "Y");
        sendTurnAngle(dir);
        if (startCell.getRealX() - currX &lt; 0){
            sendAndWait(-startCell.getRealX() + currX, "X");} else{
            sendAndWait(startCell.getRealX() - currX, "X");}}</source-code>
          </source-codes>
        </operation>
        <operation id="o3ca31d13ebe44158b237638e09953f79859" name="sendAndWait" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="targetposX" type="int" type-id="int" default-value="" />
            <parameter id="" name="travelDir" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws InterruptedException //Sendet Koordinaten ans Roboview und wartet darauf, dass das Roboview sein Ziel erreicht hat{

        int targetfieldX = targetposX;
        if (targetfieldX &lt; 0){
            targetfieldX = (-1) * targetfieldX;}
        do{
            if (obstacleOccured == true){
                switch (travelDir){
                    case "X":
                        viewX = comView.getxAktuell();
                        comView.setKoords(comView.getxAktuell(), 0, 0);
                        break;
                    case "Y":
                        viewY = comView.getyAktuell();
                        comView.setKoords(comView.getyAktuell(), 0, 0);
                        break;
                    default:}
                alternativeRoute = true;} else{
                //        sM.readAndSendPhase();
                // Mitgegebene Wete sind(int Check,int X,int Y,int Phi)
                comView.setKoords(targetfieldX, 0, 0);}} while (comView.getReady() == 0);
        do{
            comView.setGo(1);} while (comView.getEnde() == 0);
        comView.setGo(0);}</source-code>
          </source-codes>
        </operation>
        <operation id="ob5a6833b7caf41699134c27d1a7baa3e859" name="sendTurnAngle" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="getCase" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws InterruptedException //Metode zum Umrechnen von Absolut in Inkrementalkoordinaten Als Mitgabewert wird ein String mit N/E/S/W Verwendet{
        switch (getCase){
            case "N":
                lcb.setRun(false);

                do{
                    turnPhi = -(0 - startPosPhi + 90);
                    if (turnPhi &lt; - 180){
                        turnPhi = 360 + turnPhi;
                        /*
                         * if (turnPhi &gt;= 360)
                         {
                         turnPhi = turnPhi - 360;
                         }
                         */}

                    // Mitgegebene Wete sind(int Check,int X,int Y,int Phi)
                    //      sM.readAndSendPhase();
                    comView.setKoords(0, 0, turnPhi);} while (comView.getReady() == 0);
                do{
                    comView.setGo(1);} while (comView.getEnde() == 0);
                comView.setGo(0);
                startPosPhi = 90;
                lcb.setRun(true);
                break;
            case "E":
                lcb.setRun(false);

                do{
                    turnPhi = -(0 - startPosPhi + 180);
                    if (turnPhi &lt; 180){
                        turnPhi = -360 + turnPhi;
                        /*
                         if (turnPhi &gt;= 360)
                         {
                         turnPhi = turnPhi - 360;
                         }
                         * */}

                    //    sM.readAndSendPhase();
                    // Mitgegebene Wete sind(int Check,int X,int Y,int Phi)
                    comView.setKoords(0, 0, turnPhi);} while (comView.getReady() == 0);
                do{
                    comView.setGo(1);} while (comView.getEnde() == 0);
                comView.setGo(0);
                startPosPhi = 180;
                lcb.setRun(true);
                break;
            case "S":
                lcb.setRun(false);

                do{
                    turnPhi = -(0 - startPosPhi + 270);
                    if (turnPhi &lt; 180){
                        turnPhi = -360 + turnPhi;
                        /*
                         if (turnPhi &gt;= -360)
                         {
                         turnPhi = turnPhi - 360;
                         }
                         */}

                    //         sM.readAndSendPhase();
                    // Mitgegebene Wete sind(int Check,int X,int Y,int Phi)
                    comView.setKoords(0, 0, turnPhi);} while (comView.getReady() == 0);
                do{
                    comView.setGo(1);} while (comView.getEnde() == 0);
                comView.setGo(0);
                startPosPhi = 270;
                lcb.setRun(true);
                break;
            case "W":
                lcb.setRun(false);

                do{
                    turnPhi = -(0 - startPosPhi);
                    if (turnPhi &lt; 180){
                        turnPhi = -360 + turnPhi;
                        /*if (turnPhi &gt;= 360)
                         {
                         turnPhi = turnPhi - 360;
                         }*/}
                    //             sM.readAndSendPhase();
                    // Mitgegebene Wete sind(int Check,int X,int Y,int Phi)
                    comView.setKoords(0, 0, turnPhi);} while (comView.getReady() == 0);
                do{
                    comView.setGo(1);} while (comView.getEnde() == 0);
                comView.setGo(0);
                startPosPhi = 0;
                lcb.setRun(true);
                break;
            default:
                lcb.setRun(false);

                do{
                    turnPhi = (0 - startPosPhi + 270);
                    if (turnPhi &lt; - 180){
                        turnPhi = 360 + turnPhi;
                        if (turnPhi &gt;= 360){
                            turnPhi = turnPhi - 360;}}

                    // Mitgegebene Wete sind(int Check,int X,int Y,int Phi)
                    //           sM.readAndSendPhase();
                    comView.setKoords(0, 0, turnPhi);} while (comView.getReady() == 0);
                do{
                    comView.setGo(1);} while (comView.getEnde() == 0);
                comView.setGo(0);
                startPosPhi = 270;
                lcb.setRun(true);}}</source-code>
          </source-codes>
        </operation>
        <operation id="o5366da2c6d60436ba68eb3f8baf79042860" name="runback" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="facingdir" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws InterruptedException{

        switch (facingdir){
            case ("N"):
                sendTurnAngle("S");
                break;
            case ("E"):
                sendTurnAngle("W");
                break;
            case ("S"):
                sendTurnAngle("N");
                break;
            case ("W"):
                sendTurnAngle("E");
                break;}
        viewXrest = viewX;
        viewYrest = viewY;
        viewX = viewX % fieldsize;
        viewY = viewY % fieldsize;
        if (startPosX % 2 == 0){
            if ((viewXrest - viewX) % (2 * fieldsize) == 0){
                viewX = viewX + fieldsize;}}
        if (startPosX % 2 == 1){
            if ((viewXrest - viewX) % (2 * fieldsize) &gt; 0){
                viewX = viewX + fieldsize;}}
        if (startPosX % 2 == 1){
            if ((viewXrest - viewX) % (2 * fieldsize) &gt; 0){
                viewX = viewX + fieldsize;}}
        if (startPosY % 2 == 1){
            if ((viewYrest - viewY) % (2 * fieldsize) == 0){
                viewY = viewY + fieldsize;}}
        if (startPosY % 2 == 0){
            if ((viewYrest - viewY) % (2 * fieldsize) &gt; 0){
                viewY = viewY + fieldsize;}}
        switch (facingdir){
            case ("N"):
                sendAndWait(viewX, "X");
                break;
            case ("E"):
                sendAndWait(viewY, "Y");
                break;
            case ("S"):
                sendAndWait(viewX, "X");
                break;
            case ("W"):
                sendAndWait(viewY, "Y");
                break;}

        switch (facingdir){
            case ("N"):
                sendTurnAngle("N");
                break;
            case ("E"):
                sendTurnAngle("E");
                break;
            case ("S"):
                sendTurnAngle("S");
                break;
            case ("W"):
                sendTurnAngle("W");
                break;}}

    /*---------------------------------------------------------------------------------------------------------------------------
     ---------------------------------------------------- GET and SET -----------------------------------------------------------
     ----------------------------------------------------------------------------------------------------------------------------
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o2b8990474f074be0900af7e31395b363860" name="getEndPosReached" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return endposreached;}</source-code>
          </source-codes>
        </operation>
        <operation id="o86c4120cb8a34e93b16cc72a76e03358860" name="getStartPosX" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return startPosX;}</source-code>
          </source-codes>
        </operation>
        <operation id="o8e79496d3a1b42c7ab42146cb2c8ce68860" name="setStartPosX" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="startPosX" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.startPosX = startPosX;}</source-code>
          </source-codes>
        </operation>
        <operation id="o071acbb6617f4ee7be6265990ad2f306860" name="getStartPosY" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return startPosY;}</source-code>
          </source-codes>
        </operation>
        <operation id="o7f3fed6ce9834d229920792c7471a342860" name="setStartPosY" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="startPosY" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.startPosY = startPosY;}</source-code>
          </source-codes>
        </operation>
        <operation id="oc4b3281408524c9fb342e8b071ce860f860" name="getStartPosPhi" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return startPosPhi;}</source-code>
          </source-codes>
        </operation>
        <operation id="o7960776c23b649b389dea18c5a4b8ab9860" name="setStartPosPhi" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="startPhi" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.startPosPhi = startPhi;}</source-code>
          </source-codes>
        </operation>
        <operation id="o05d6e376a94943668a88d3f7bbfc4375860" name="setEndTarget" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="cell" type="Cell" type-id="Cell" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        endCell = cell;}</source-code>
          </source-codes>
        </operation>
        <operation id="odafc5f6cd8e6423a960d7ba2401cbd5b860" name="setStartCell" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="cell" type="Cell" type-id="Cell" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        startCell = cell;}</source-code>
          </source-codes>
        </operation>
        <operation id="o3ab56fda0ca84e0a8bbe86155023fbbf860" name="setStartCell" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="x" type="int" type-id="int" default-value="" />
            <parameter id="" name="y" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        startCell = fc.cell[x[y;}</source-code>
          </source-codes>
        </operation>
        <operation id="o57d3723a108049fea8bd90af0f60b852861" name="setEndTarget" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="x" type="int" type-id="int" default-value="" />
            <parameter id="" name="y" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        endCell = fc.cell[x[y;}</source-code>
          </source-codes>
        </operation>
        <operation id="o96a016ea72ab436995868c56998ddceb861" name="setEndTarget" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="machine" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        endCell = fc.machineMap.get(machine);}</source-code>
          </source-codes>
        </operation>
        <operation id="o8b7df2ff21e44ea3af3f533f0ba7e6e5861" name="setEndPosDirLetter" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="dirLetter" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.endPosDirLetter = dirLetter;}</source-code>
          </source-codes>
        </operation>
        <operation id="o94097ce548fb4d74b9e1eab2d4d463d1861" name="setNewTempTarget" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="x" type="int" type-id="int" default-value="" />
            <parameter id="" name="y" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        tempTargetX = x;
        tempTargetY = y;}</source-code>
          </source-codes>
        </operation>
        <operation id="o72c9f38b612c42e7b0693eb8beca5e19861" name="wayX" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="oldTarget" type="int" type-id="int" default-value="" />
            <parameter id="" name="newTarget" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        tempTargetX = oldTarget - newTarget;
        return tempTargetX;}</source-code>
          </source-codes>
        </operation>
        <operation id="o1836d97cada2429990e1ee66ffd8b46c861" name="wayY" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="oldTarget" type="int" type-id="int" default-value="" />
            <parameter id="" name="newTarget" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        tempTargetY = newTarget - oldTarget;
        return tempTargetY;}</source-code>
          </source-codes>
        </operation>
        <operation id="o26be794f4f6345efaa4bdfed3690cef6861" name="setObstacleOccured" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="obstacle" type="Boolean" type-id="Uml.Boolean" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        obstacleOccured = obstacle;}

    // --------------------------------------------------------------------------------------------------------------------------------------------------
    // ---------------------------------------------------- PSVM zum Testen - einfach auskommentieren im Verbund ----------------------------------------
    // --------------------------------------------------------------------------------------------------------------------------------------------------</source-code>
          </source-codes>
        </operation>
        <operation id="oc39e9996eac542769681accb2a71f893861" name="main" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws SocketException, IOException, InterruptedException{
        ComView comView = ComView.getInstance();
        comView.start();
        Drive drive = new Drive();
        drive.setStartCell(0, 0);
        drive.setStartPosPhi(180);
        //drive.runback("S");

        drive.setEndTarget(5, 0);
        do{
            drive.run();} while (drive.getEndPosReached() == 0);

        drive.setEndTarget(5, 4);
        drive.setStartPosPhi(0);
        do{
            drive.run();} while (drive.getEndPosReached() == 0);
        System.out.println("End");
        /*
         drive.setEndTarget(7, 7);
         do
         {
         drive.run();
         } while (drive.getEndPosReached() == 0);
         */}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di977642623923690571" cid="C026" type="class" name="LaserControlledBreaking" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/27/2014 18:04:42">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="ad2aa3e6c1eab478cbab2a12ff66845f7881" name="hindernisdistanz" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="ad8756a7e78f84597b8b43676e31e466e881" name="running" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" default-value="true" />
      </attributes>
      <operations>
        <operation id="o238d448e079b4c76ab0370579257f139881" name="isRun" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return running;}</source-code>
          </source-codes>
        </operation>
        <operation id="obdae3d52015d458c97c47fbe64d5fc3c881" name="setRun" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="run" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.running = run;}
    static Laser tim;
    private static LaserControlledBreaking instance;</source-code>
          </source-codes>
        </operation>
        <operation id="o7e455d233c864e5da147597c77a8a457881" name="getInstance" type="LaserControlledBreaking" type-id="LaserControlledBreaking" visibility="public" abstract="false" virtual="false" static="true">
          <source-codes>
            <source-code language="Undefined">{
        if (instance == null){
            instance = new LaserControlledBreaking();}
        return instance;}</source-code>
          </source-codes>
        </operation>
        <operation id="o548e5362ed1544d686d1e3ba0c1ee067881" name="LaserControlledBreaking" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        speedPercent = 100;
        hindernisdistanz = DEFAULT_DISTANCE;
        lastSpeedPercent = DEFAULT_PERCENT;
        tim = Laser.getInstance();}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oa3a95db2632846a88ba46c5a369c20d2881" name="run" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        while (true) //(running == true)   //didnt start after resetting{
            try{
                tim.getNewMeasurementData();} catch (IOException ex){
                Logger.getLogger(ComView.class.getName()).log(Level.SEVERE, null, ex);}
            hindernisdistanz = tim.getDistance(0);

            //hindernisdistanz = (int)(Math.random() * 5000); //Simulation des Laserwertes zum Test in main-Methode;
            speedPercent = (int) ((hindernisdistanz - MINDIST) * FACT);

            if (speedPercent &gt; lastSpeedPercent){
                speedPercent = lastSpeedPercent + 10;

                try{
                    Thread.sleep(100);} catch (InterruptedException ex){
                    Logger.getLogger(ComView.class.getName()).log(Level.SEVERE, null, ex);}}

            lastSpeedPercent = speedPercent;}}</source-code>
          </source-codes>
        </operation>
        <operation id="ob7333612b8b74d51ad72d96972acba63881" name="getBremsfaktor" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        if (running){            
            if (speedPercent &gt; 100){
                speedPercent = 100;} else if (speedPercent &lt; 0){
                speedPercent = 0;}} else{
            speedPercent = 100;}
        return speedPercent;}</source-code>
          </source-codes>
        </operation>
        <operation id="o20f8f6c0be824f0185347b538826c4fa882" name="main" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        LaserControlledBreaking lcb = new LaserControlledBreaking();
        lcb.start();
        int i = 0;
        while (true){

            try{
                sleep(500);} catch (InterruptedException ex){}
            if (i++ &gt; 5){
                lcb.setRun(false);
                System.out.println(lcb.getBremsfaktor() + "/" + lcb.isRun());
                try{
                    sleep(3000);
                    i = 0;} catch (InterruptedException ex){}
                lcb.setRun(true);}
            System.out.println(lcb.getBremsfaktor() + "/" + lcb.isRun());}}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di125420850973281171" cid="C027" type="class" name="JobController" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/27/2014 18:04:42">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a00cc9c68b119493697874b4df32f3aee926" name="fc" type="FieldCommander" type-id="FieldCommander" visibility="package" abstract="false" virtual="false" />
        <attribute id="aa982efa069af4f7db6f5bbb343042092926" name="hnd" type="Handler" type-id="Handler" visibility="package" abstract="false" virtual="false" />
        <attribute id="a1ae693e6e34f47789c75c10207c0a497926" name="roboNameIdx" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="af43be5d67e464097901ce4de77ccd9d1926" name="prodMachine" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" />
        <attribute id="aacb215ff32b340f98ea359cd60925f4a926" name="prodJob" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" />
        <attribute id="a0109b45e9b41492c96361740e0e53d96927" name="jobCounter" type="int" type-id="int" visibility="public" abstract="false" virtual="false" default-value="0" />
      </attributes>
      <operations>
        <operation id="o8fe7bdce012b45ae81e5dd87d02e034b927" name="getInstance" type="JobController" type-id="JobController" visibility="public" abstract="false" virtual="false" static="true">
          <source-codes>
            <source-code language="Undefined">{
        if (instance == null){
            instance = new JobController();}
        return instance;}</source-code>
          </source-codes>
        </operation>
        <operation id="ocb60db57496e4ef4b68c2034cae66201927" name="JobController" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        setRoboNameIdx("MrPink"); //Default name overwritten by Config-File
        fc = FieldCommander.getInstance();}</source-code>
          </source-codes>
        </operation>
        <operation id="o5ddcf14e6588498e88f5738f3bcbf3b5927" name="setNextExploJob" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined"> throws Exception{
        jobCounter++;
        if (explorationWays[ROUND[FIELDHALF[roboNameIdx[jobCounter == null){
            throw new Exception("no more Jobs for this robo");}}</source-code>
          </source-codes>
        </operation>
        <operation id="oe2bf9a615b0f45dabbfc8c1c1d59b87b927" name="getExploJob" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return explorationWays[ROUND[FIELDHALF[roboNameIdx[jobCounter;}

    /**
     * store received MachineList in ProdPhase into our own machineMap
     * 
     * @param mList (List of Machines; unsorted)
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ocfc0fe9638f8405cba1470240b885528927" name="setMachineTypesFromRefBox" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="mList" type="List" type-id="List" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        for (Machine m : mList)    //iterate through machines{
            Cell cell = fc.machineMap.get(m.getName());      //get Cell of act. machine
            if (cell != null){
                int mNr = cell.getMachineNr();
                cell.setmTyp(m.getType());
                fc.machineMap.put(m.getName(), cell);}}}

    /**
     * get the Machine for searched type
     *
     * @param mType in "T1" to "T5"
     * @return corresponding machine "M1" to "M24"
     * @author roa
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oc221273d5f5e422f94b67789a1ce1692927" name="getProdMachine" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="mType" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        for (String s : fc.machineMap.keySet())    //iterate through machines{
            Cell cell = fc.machineMap.get(s);   //get Cell of act. machine
            if (cell.getmTyp().equals(mType))    //compare searched Type{
                return s;                       //return corr. machine}}
        return null;                            //nothing found/error}</source-code>
          </source-codes>
        </operation>
        <operation id="oe6aed3bbf1634d0dbde94a15d59ba324927" name="getProdJob" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return prodJob;}

    /**
     * Decide which Job/Machine is perfect for the actual Robo //has to be
     * discuss with the strategy of Vincent
     *
     * @param product
     * @return Machine Name
     */
    /*    public void findActProdJobMachine()
     {
     switch (roboNameIdx)
     {
     case 0:
     //Pink producing P1 on T3
     //first T1 and first T2 for intermediate Products (S1/S2)                
     for (int i = 0; i &lt;= 24; i++)
     {
     Cell c;
     c = fc.machineMap.get("M" + i);
     //search next T1
     }
     break;
     case 1:
     //Brown producing P2 on T4
     //Second T1 and second T2 for his intermediate Products
     break;
     case 2:
     //Blond producing P3 on T5
     //No intermediate product
     break;
     default:
     }

     for (int i = 0; i &lt;= 10; i++)
     {
     Order order = hnd.orderList.get(i);

     switch (order.getProduct())
     {
     case P1:
     break;
     case P2:
     break;
     case P3:
     break;
     }
     }
     //finding matching machine for Typ/Robo corresponding to actual Order from refbox
     //just a demo because of missing Algorithm//algorithm to catch next 
     //handler.orderList.get();
     prodJob = "P3";
     prodMachine = "M9";
     }*/
    /**
     * returns the delivery Gate, if is open to deliver the requested Product
     *
     * @param product
     * @return DeliveryGate
     * @author roa
     *
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o13bc5dbb7d9b4c17b2c525356aec4060927" name="isProductDelGateOpen" type="DeliveryGate" type-id="DeliveryGate" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="product" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        for (Order order : hnd.orderList){   //Matches this product ?
            if (order.getProduct().name().equals(product)){   //more Products needed ?
                if (order.getQuantityRequested() &gt; 0){   //is the delivery gate already open
                    if (order.getDeliveryPeriodBegin() &lt;= hnd.game.getGameTime().getSec()){   //is the delivery gate still open in realistic time
                        if (order.getDeliveryPeriodEnd() &gt;= hnd.game.getGameTime().getSec() - REALISTICTIME){
                            return order.getDeliveryGate();}}}}}
        return null;}</source-code>
          </source-codes>
        </operation>
        <operation id="o7b658ab0f8734929bb62f807b897e5ca927" name="getStartCell" type="Cell" type-id="Cell" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        int x = startCell[FIELDHALF[roboNameIdx[0;
        int y = startCell[FIELDHALF[roboNameIdx[1;
        return fc.cell[x[y;}</source-code>
          </source-codes>
        </operation>
        <operation id="oc71193545a894d56a56995fe05325071927" name="setRoboNameIdx" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="roboName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        switch (roboName){
            case "MrPink":
                roboNameIdx = 0;
                break;
            case "MrBrown":
                roboNameIdx = 1;
                break;
            case "MrBlond":
                roboNameIdx = 2;
                break;
            default:
                roboNameIdx = -1;}}

    /**
     * Found the nearest opimal cell to the machine (LoadCell)
     *
     * @param machine the optimal cell and phi beside the machine
     * @return
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o2ae9787f0b214a0d8aa6862d50d4542f927" name="getLoadCellNearMachine" type="Cell" type-id="Cell" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="machine" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        int x, y;
        String loadDirection;
        Cell machineCell, loadCell;

        machineCell = fc.machineMap.get(machine);
        x = machineCell.getX();
        y = machineCell.getY();
        switch (machineCell.getDirLetter()){
            case "W":
                y--;
                loadDirection = "E";
                break;
            case "N":
                x++;
                loadDirection = "S";
                break;
            case "E":
                y++;
                loadDirection = "W";
                break;
            case "S":
                x--;
                loadDirection = "N";
                break;
            default:
                loadDirection = "S";}
        Cell.getPhiFromDirLetter(loadDirection);
        loadCell = fc.cell[x[y;
        loadCell.setDirection(Cell.getPhiFromDirLetter(loadDirection));
        return loadCell;}</source-code>
          </source-codes>
        </operation>
        <operation id="o50d1d5a22fe2486f8501e772f1db818e927" name="getRoboNameIdx" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return roboNameIdx;}</source-code>
          </source-codes>
        </operation>
        <operation id="oe8ae16c74579485384d6694a0ef60168927" name="setRoboNameIdx" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="roboNameIdx" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.roboNameIdx = roboNameIdx;}</source-code>
          </source-codes>
        </operation>
        <operation id="o17e4270f3e8744f289ef7e17cdf4c732927" name="main" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        try{
            JobController way = new JobController();
            way.setRoboNameIdx("MrPink");
            System.out.println("Start" + way.getStartCell());
            System.out.println(way.getProdMachine("T5"));
            while (true){
                System.out.println(way.getExploJob());
                way.setNextExploJob();}} catch (Exception ex){
            System.out.println(ex.getMessage());}}}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di116845819179110873" cid="C028" type="class" name="StateMachine" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/27/2014 18:04:43">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="ac1c52ea0ce344583a3656950e8d2d36130" name="running" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" />
        <attribute id="aa40186e30bff4cdf97c0da7cbf34a4c330" name="comView" type="ComView" type-id="ComView" visibility="private" abstract="false" virtual="false" />
        <attribute id="ab27fbeb11f414fedb4a135aa9dc4c47e30" name="way" type="JobController" type-id="JobController" visibility="private" abstract="false" virtual="false" />
        <attribute id="ad9851b7253f047ac936ea277a418e5b130" name="handler" type="Handler" type-id="Handler" visibility="private" abstract="false" virtual="false" />
        <attribute id="ac181c3a5d38b4433bce0a25d80eb0ae430" name="drive" type="Drive" type-id="Drive" visibility="private" abstract="false" virtual="false" />
        <attribute id="a6973161de6804622b57fca5830304ccb30" name="fc" type="FieldCommander" type-id="FieldCommander" visibility="private" abstract="false" virtual="false" />
        <attribute id="a46c661959f06447b987a57ec45e195d530" name="phase" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" />
        <attribute id="a0cf791e88f0b469fa2302f9aff257bab30" name="state" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" />
        <attribute id="a7eedc0dcf89a4fabb82dae252bdb86c830" name="exploStep" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" />
        <attribute id="a8f4a133ebfc24027ae082d037208577730" name="prodStep" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" />
        <attribute id="a5922ce8ce95a4a3ea87d5d048ce17a7530" name="ende" type="int" type-id="int" visibility="private" abstract="false" virtual="false" default-value="0" />
        <attribute id="afffe77d61f2f42dc9c2b75c78a39b24730" name="ready" type="int" type-id="int" visibility="private" abstract="false" virtual="false" default-value="0" />
        <attribute id="a7cb240cabeb047cf8b7111350fe1956b30" name="phaseInt" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="a5b94755fe7d6473abd87b86e3790e4ac30" name="prodCount" type="int" type-id="int" visibility="private" abstract="false" virtual="false" default-value="0" />
        <attribute id="a1ab962a9855b48bab39bfc5a9ce7784130" name="prodFinalStep" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" default-value="false" />
      </attributes>
      <operations>
        <operation id="o02c72a8174234045b988bcd23ff492df30" name="getInstance" type="StateMachine" type-id="StateMachine" visibility="public" abstract="false" virtual="false" static="true">
          <source-codes>
            <source-code language="Undefined">{
        return instance;}

    // Lampen Farben der Maschinen in der Explorationsphase</source-code>
          </source-codes>
        </operation>
        <operation id="o019a990a33c0424f90958e1cc9a518a530" name="StateMachine" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="handler" type="Handler" type-id="Handler" default-value="" />
            <parameter id="" name="way" type="JobController" type-id="JobController" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws InterruptedException{
        this.handler = handler;
        comView = ComView.getInstance();
        fc = FieldCommander.getInstance();
       
        this.way = way;

        instance = this;
         drive = new Drive();}</source-code>
          </source-codes>
        </operation>
        <operation id="o238c6663a90c4a29a03c007c5608c90f31" name="setRunning" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="running" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.running = running;}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oe5ebefbc3ad949768efc2bc34822693431" name="run" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        while (running){
            readAndSendPhase();

            try{
                Thread.sleep(500);} catch (InterruptedException ex){
                Logger.getLogger(StateMachine.class.getName()).log(Level.SEVERE, null, ex);}

            switch (state){
                case "INIT":
                    Main.log.info("INIT");
                    break;
                case "WAIT_START":
                    Main.log.info("WAIT_START");
                    break;
                case "RUNNING":
                    Main.log.info("RUNNING");
                    break;
                case "PAUSED":
                    Main.log.info("PAUSED");
                    try{
                        Thread.sleep(1000);} catch (InterruptedException ex){}
                    break;}

            switch (phase){
                case "PRE_GAME":
                    Main.log.info("PRE_GAME");
                    preGamePhase();
                    break;
                case "EXPLORATION":
                    Main.log.info("EXPLORATION");
                    try{
                        explorationPhase();} catch (InterruptedException ex){
                        Main.log.error("InterruptException in EXPLORATION");}
                    break;
                case "PRODUCTION":
                    try{
                        productionPhase();} catch (InterruptedException ex){
                        Main.log.error("InterruptException in PRODUCTION");}
                    break;
                case "POST_GAME":
                    postGame();
                    break;}}}</source-code>
          </source-codes>
        </operation>
        <operation id="o304d326ddf634d74ad8a7e50a41a760c31" name="readAndSendPhase" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        phase = handler.getPhase();
        state = handler.getState();

        if ("PRE_GAME".equals(phase)){
            phaseInt = 1;}
        if ("EXPLORATION".equals(phase)){
            phaseInt = 2;}
        if ("PRODUCTION".equals(phase)){
            phaseInt = 3;}
        if ("POST_GAME".equals(phase)){
            phaseInt = 4;}
        if ("PAUSED".equals(state)){
            phaseInt += 10;}
        if ("RUNNING".equals(state) &amp;&amp; phaseInt &gt; 10){
            phaseInt -= 10;}
        comView.setPhase(phaseInt);}</source-code>
          </source-codes>
        </operation>
        <operation id="o93f271151d734f8db0ddf341d3cca5ab31" name="preGamePhase" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        comView.setStation(0);
        comView.setKoords(0, 0, 0);
        exploStep = "START_ROBO";}</source-code>
          </source-codes>
        </operation>
        <operation id="o88507b6ded864601bbdd675b670970a831" name="explorationPhase" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined"> throws InterruptedException{
        switch (exploStep) //Step in ExploPhase{
            case "START_ROBO":

                Main.log.debug("************* STEP START_ROBO*****************");

                drive.setStartCell(fc.cell[1[1);
                drive.setStartPosPhi(180);
                drive.goStart(4480, 400, "E");
                drive.setStartPosPhi(180);

                exploStep = "TO_START";
                break;

            case "TO_START":

                drive.setEndTarget(way.getLoadCellNearMachine(way.getExploJob())); // setEndTarget wird auf die Zelle direkt vor der Maschine gestzt
                Main.log.debug(way.getExploJob());
                Main.log.debug(way.getLoadCellNearMachine(way.getExploJob()).getX());
                Main.log.debug(way.getLoadCellNearMachine(way.getExploJob()).getY());

                do{
                    drive.run();} while (drive.getEndPosReached() == 0);
                comView.setStation(0);
                Main.log.debug("************* STEP TO_START*****************");
                exploStep = "AT_STATION";
                break;

            case "AT_STATION":

                comView.setKoords(0, 0, 0);

                Main.log.debug("&gt;&gt;&gt;&gt; MASCHINE" + way.getExploJob() + " ERREICHT &lt;&lt;&lt;&lt;&lt;");

                comView.setStation(1); // es soll nun ins stationsanfahren gehen

                ready = comView.getReady();

                if (ready == 1) // zuerst wird der weg gesetzt und bis er die postiion erreicht hat muss die variable go gesendet werden
                // ready kommt erst wenn er an position angekommen ist... 110 ms später kommt dann ende{
                    Main.log.debug("READY OK");

                    while (ende == 0){
                        comView.setGo(1);
                        Thread.sleep(110);
                        ende = comView.getEnde();
                        Main.log.debug("in while schlaufe");
                        ready = 0;}
                    comView.setGo(0);
                    Thread.sleep(110);
                    exploStep = "BACK";
                    Main.log.debug("************* ENDE*****************");
                    ende = 0;}
                break;

            case "BACK":
                comView.setStation(0);
                Main.log.debug("backward");

                int[ lamp = comView.getLamp();
                Main.log.debug("************* STEP BACK*****************");

                handler.sendMachine(way.getExploJob(), lamp); // hier wird der string der aktuellen maschine an die refbox gesendet
                Main.log.debug("STATION: " + way.getExploJob() + String.valueOf(lamp));

                comView.setKoords(-BACKWAY, 0, 0);
                ready = comView.getReady();
                if (ready == 1) // zuerst wird der weg gesetzt und bis er die postiion erreicht hat muss die variable go gesendet werden
                // ready kommt erst wenn er an position angekommen ist... 110 ms später kommt dann ende{
                    Main.log.debug("READY OK");

                    while (ende == 0){
                        comView.setGo(1);
                        Thread.sleep(110);
                        ende = comView.getEnde();
                        Main.log.debug("in while schlaufe");
                        ready = 0;}
                    comView.setGo(0);
                    Thread.sleep(110);
                    exploStep = "NEXT";
                    Main.log.debug("************* ENDE*****************");
                    ende = 0;}

                break;

            case "NEXT":
                comView.setStation(0);
                try{
                    way.setNextExploJob(); // hier wird der job auf die nächste nummer gesetzt} catch (Exception ex){
                    //no more job for this robo}

                exploStep = "TO_START";

                break;

            default:
                Main.log.warn("!!!!! OUT OFF PROGRAM !!!!!");
                comView.setKoords(0, 0, 0);
                break;}}</source-code>
          </source-codes>
        </operation>
        <operation id="o6ca8b6ab8acc4ea6af73bb487026a0d331" name="productionPhase" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined"> throws InterruptedException{

        if (way.getRoboNameIdx() == 2){

            switch (prodStep)   //Step in production{

                case "START_ROBO":
                    comView.setPhase(2);

                    Main.log.debug("************* STEP PROD  START_ROBO*****************");

                    prodStep = "TO_START";

                    break;

                case "TO_START":
                    //hier muss irgendwie die aktuelle position abgefragt werden können --&gt; nach explo

                    Main.log.debug("************* STEP PROD  TO_START*****************");

                    drive.setEndTarget(fc.cell[6[0);  //zum puck

                    do{
                        drive.run();} while (drive.getEndPosReached() == 0);

                    prodStep = "GRAB_PUCK";

                    break;

                case "GRAB_PUCK":

                    comView.setKoords(0, 0, 0);

                    Main.log.debug("&gt;&gt;&gt;&gt; MASCHINE" + way.getProdMachine("T3") + " ERREICHT &lt;&lt;&lt;&lt;&lt;");

                    comView.setStation(3); // es soll nun ins stationsanfahren gehen

                    ready = comView.getReady();

                    if (ready == 1) // zuerst wird der weg gesetzt und bis er die postiion erreicht hat muss die variable go gesendet werden
                    // ready kommt erst wenn er an position angekommen ist... 110 ms später kommt dann ende{
                        Main.log.debug("READY OK");

                        while (ende == 0){

                            comView.setGo(1);
                            Thread.sleep(110);
                            ende = comView.getEnde();
                            Main.log.debug("in while schlaufe");
                            ready = 0;}

                        comView.setGo(0);
                        Thread.sleep(110);
                        prodStep = "DRIVE_TO_T5";
                        Main.log.debug("************* ENDE*****************");
                        ende = 0;}

                    break;

                case "DRIVE_TO_T5":

                    drive.setEndTarget(way.getLoadCellNearMachine(way.getProdMachine("T5")));
                    do{
                        drive.run();} while (drive.getEndPosReached() == 0);

                    prodStep = "PROD";

                    break;

                case "PROD":

                    comView.setKoords(0, 0, 0);

                    Main.log.debug("&gt;&gt;&gt;&gt; MASCHINE" + way.getProdMachine("T5") + " ERREICHT &lt;&lt;&lt;&lt;&lt;");

                    comView.setStation(4); // es soll nun ins stationsanfahren gehen

                    if (ready == 1){
                        Main.log.debug("READY OK");

                        while (ende == 0){
                            comView.setGo(1);
                            Thread.sleep(110);
                            ende = comView.getEnde();
                            ready = 0;}
                        comView.setGo(0);
                        Thread.sleep(110);}

                    comView.setStation(9); // after stationsanfahren stay to the machine and wait the end of the work

                    ready = comView.getReady();

                    if (ready == 1){
                        Main.log.debug("READY OK");

                        while (ende == 0){
                            comView.setGo(1);
                            Thread.sleep(110);
                            ende = comView.getEnde();
                            ready = 0;}

                        comView.setGo(0);
                        Thread.sleep(110);

                        if (way.isProductDelGateOpen("P3").getNumber() &gt; 0)   //Delivery signal for P3{
                            prodStep = "DELIVER";}

                        Main.log.debug("************* ENDE*****************");
                        ende = 0;
                        comView.setStation(5);}

                    break;

                case "TO_DELIVERY":
                    drive.setEndTarget(way.getLoadCellNearMachine("D1"));// Delivery Gate
                    do{
                        drive.run();} while (drive.getEndPosReached() == 0);

                    prodStep = "DELIVER";

                    break;

                case "DELIVER":

                    // DELIVER SEQUENCE
                    comView.setKoords(0, 0, 0);

                    Main.log.debug("&gt;&gt;&gt;&gt; MASCHINE DELIVERY ERREICHT &lt;&lt;&lt;&lt;&lt;");

                    comView.setStation(5);

                    ready = comView.getReady();

                    if (ready == 1){
                        Main.log.debug("READY OK");

                        while (ende == 0){

                            comView.setGo(1);
                            Thread.sleep(110);
                            ende = comView.getEnde();

                            ready = 0;}

                        comView.setGo(0);
                        Thread.sleep(110);
                        prodStep = "NEXT";
                        comView.setStation(3);
                        Main.log.debug("************* ENDE*****************");
                        ende = 0;}
                    break;

                case "NEXT":

                    comView.setKoords(-BACKWAY, 0, 0);

                    if (ready == 1){
                        Main.log.debug("READY OK");

                        while (ende == 0){

                            comView.setGo(1);
                            Thread.sleep(110);
                            ende = comView.getEnde();

                            ready = 0;}

                        comView.setGo(0);
                        Thread.sleep(110);}

                    prodStep = "START_ROBO";

                /**
                 * *****************************
                 * case "CHECK_RECYCLING": //Check every cell to serach for a
                 * machine with junk int k = 1, l = 1; do { do { k++; } while
                 * (); //if this cell contain junk l++; } while (); //if this
                 * cell contain junk break; *********************************
                 */
                default:
                    Main.log.debug("!!!!! OUT OFF PROGRAM !!!!!");
                    comView.setKoords(0, 0, 0);
                    break;}}

        //Production state machine for Pink and Blond
        if (way.getRoboNameIdx() == 1){

            switch (prodStep)   //Step in production{

                case "START_ROBO":
                    prodCount = 0;

                    comView.setPhase(2);

                    Main.log.debug("************* STEP PROD  START_ROBO*****************");

                    prodStep = "TO_START";
                    break;

                case "TO_START":
                    //hier muss irgendwie die aktuelle position abgefragt werden können --&gt; nach explo

                    Main.log.debug("************* STEP PROD  TO_START*****************");

                    drive.setEndTarget(fc.cell[6[0);  //zum puck

                    do{
                        drive.run();} while (drive.getEndPosReached() == 0);

                    prodStep = "GRAB_PUCK";
                    break;

                case "GRAB_PUCK":

                    comView.setKoords(0, 0, 0);

                    comView.setStation(3); // es soll nun ins stationsanfahren gehen

                    ready = comView.getReady();

                    if (ready == 1) // zuerst wird der weg gesetzt und bis er die postiion erreicht hat muss die variable go gesendet werden
                    // ready kommt erst wenn er an position angekommen ist... 110 ms später kommt dann ende{
                        Main.log.debug("READY OK");

                        while (ende == 0){

                            comView.setGo(1);
                            Thread.sleep(110);
                            ende = comView.getEnde();
                            Main.log.debug("in while schlaufe");
                            ready = 0;}

                        comView.setGo(0);
                        Thread.sleep(110);

                        prodStep = "DRIVE_TO_T";

                        Main.log.debug("************* ENDE*****************");
                        ende = 0;}
                    break;

                case "DRIVE_TO_T":

                    prodCount++;
                    /*Switch to select the machine to drive to*/
                    switch (prodCount){
                        case 1:
                            drive.setEndTarget(way.getLoadCellNearMachine(way.getProdMachine("T1")));
                            break;
                        case 2:
                            drive.setEndTarget(way.getLoadCellNearMachine(way.getProdMachine("T2")));
                            break;
                        case 3:
                            drive.setEndTarget(way.getLoadCellNearMachine(way.getProdMachine("T1")));
                            break;
                        case 4:
                            drive.setEndTarget(way.getLoadCellNearMachine(way.getProdMachine("T2")));
                            break;
                        case 5:
                            drive.setEndTarget(way.getLoadCellNearMachine(way.getProdMachine("T1")));
                            break;
                        case 6:
                            drive.setEndTarget(way.getLoadCellNearMachine(way.getProdMachine("T3")));
                            break;
                        case 7:
                            drive.setEndTarget(way.getLoadCellNearMachine(way.getProdMachine("T2")));
                            break;
                        case 8:
                            drive.setEndTarget(way.getLoadCellNearMachine(way.getProdMachine("T3")));
                            break;
                        case 9:
                            drive.setEndTarget(way.getLoadCellNearMachine(way.getProdMachine("T1")));
                            break;
                        case 10:
                            drive.setEndTarget(way.getLoadCellNearMachine(way.getProdMachine("T3")));
                            break;}
                    do{
                        drive.run();} while (drive.getEndPosReached() == 0);

                    prodStep = "PROD";

                    break;

                case "PROD":

                    comView.setKoords(0, 0, 0);
                    /*Switch to choose between the info to show*/
                    switch (prodCount){

                        case 1:
                            Main.log.debug("&gt;&gt;&gt;&gt; MASCHINE" + way.getProdMachine("T1") + " ERREICHT &lt;&lt;&lt;&lt;&lt;");
                            break;
                        case 2:
                            Main.log.debug("&gt;&gt;&gt;&gt; MASCHINE" + way.getProdMachine("T2") + " ERREICHT &lt;&lt;&lt;&lt;&lt;");
                            break;
                        case 3:
                            Main.log.debug("&gt;&gt;&gt;&gt; MASCHINE" + way.getProdMachine("T1") + " ERREICHT &lt;&lt;&lt;&lt;&lt;");
                            break;
                        case 4:
                            Main.log.debug("&gt;&gt;&gt;&gt; MASCHINE" + way.getProdMachine("T2") + " ERREICHT &lt;&lt;&lt;&lt;&lt;");
                            break;
                        case 5:
                            Main.log.debug("&gt;&gt;&gt;&gt; MASCHINE" + way.getProdMachine("T1") + " ERREICHT &lt;&lt;&lt;&lt;&lt;");
                            break;
                        case 6:
                            Main.log.debug("&gt;&gt;&gt;&gt; MASCHINE" + way.getProdMachine("T3") + " ERREICHT &lt;&lt;&lt;&lt;&lt;");
                            break;
                        case 7:
                            Main.log.debug("&gt;&gt;&gt;&gt; MASCHINE" + way.getProdMachine("T2") + " ERREICHT &lt;&lt;&lt;&lt;&lt;");
                            break;
                        case 8:
                            Main.log.debug("&gt;&gt;&gt;&gt; MASCHINE" + way.getProdMachine("T3") + " ERREICHT &lt;&lt;&lt;&lt;&lt;");
                            break;
                        case 9:
                            Main.log.debug("&gt;&gt;&gt;&gt; MASCHINE" + way.getProdMachine("T1") + " ERREICHT &lt;&lt;&lt;&lt;&lt;");
                            break;
                        case 10:
                            Main.log.debug("&gt;&gt;&gt;&gt; MASCHINE" + way.getProdMachine("T3") + " ERREICHT &lt;&lt;&lt;&lt;&lt;");
                            break;}
                    /*Switch to select between: 
                     Puck area = setStation(3);
                     Station work = setStation(4);
                     Delivery gate = setStation(5)*/
                    switch (prodCount){
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:

                            comView.setStation(4);
                            break;}
                    if (ready == 1){
                        Main.log.debug("READY OK");

                        while (ende == 0){
                            comView.setGo(1);
                            Thread.sleep(110);
                            ende = comView.getEnde();
                            ready = 0;}
                        comView.setGo(0);
                        Thread.sleep(110);}
                    /*Switch to select between: 
                     Move puck on left side = setStation(6);
                     Move puck on right side = setStation(7);
                     Move the puck on the machine = setStation(8);
                     Move the puck on the machine and wait = setStation(9)*/
                    switch (prodCount){
                        case 1:
                            comView.setStation(8);
                            break;
                        case 2:
                            comView.setStation(6);
                            break;
                        case 3:
                            break;
                        case 4:
                            comView.setStation(8);
                            break;
                        case 5:
                            comView.setStation(8);
                            break;
                        case 6:
                            if (prodFinalStep == true){} else{
                                comView.setStation(6);}
                            break;
                        case 7:
                            break;
                        case 8:
                            comView.setStation(7);
                            break;
                        case 9:
                            break;
                        case 10:
                            comView.setStation(8);
                            break;}

                    ready = comView.getReady();

                    if (ready == 1){
                        Main.log.debug("READY OK");

                        while (ende == 0){
                            comView.setGo(1);
                            Thread.sleep(110);
                            ende = comView.getEnde();
                            ready = 0;}

                        comView.setGo(0);
                        Thread.sleep(110);
                        switch (prodCount){
                            case 1:
                                prodStep = "TO_START";
                                break;

                            case 2:
                                prodStep = "DRIVE_TO_T";
                                break;

                            case 3:
                                prodStep = "DRIVE_TO_T";
                                break;

                            case 4:
                                prodStep = "TO_START";
                                break;

                            case 5:
                                if (prodFinalStep == true){
                                    prodStep = "DRIVE_TO_T";} else{
                                    prodStep = "TO_START";}
                                break;

                            case 6:
                                if (prodFinalStep == true){
                                    prodStep = "TO_DELIVERY";} else{
                                    prodStep = "DRIVE_TO_T";}
                                break;
                            case 7:
                                prodStep = "DRIVE_TO_T";
                                break;
                            case 8:
                                prodStep = "DRIVE_TO_T";
                                break;
                            case 9:
                                prodStep = "DRIVE_TO_T";
                                break;
                            case 10:
                                prodStep = "TO_START";
                                prodFinalStep = true;
                                prodCount = 0;
                                break;}
                        Main.log.debug("************* ENDE*****************");
                        ende = 0;
                        comView.setStation(5);}

                    break;

                case "TO_DELIVERY":
                    drive.setEndTarget(way.getLoadCellNearMachine("D1"));// Delivery Gate
                    do{
                        drive.run();} while (drive.getEndPosReached() == 0);

                    prodStep = "DELIVER";

                    break;

                case "DELIVER":

                    // DELIVER SEQUENCE
                    comView.setKoords(0, 0, 0);

                    Main.log.debug("&gt;&gt;&gt;&gt; MASCHINE DELIVERY ERREICHT &lt;&lt;&lt;&lt;&lt;");

                    comView.setStation(5);

                    ready = comView.getReady();

                    if (ready == 1){
                        Main.log.debug("READY OK");

                        while (ende == 0){

                            comView.setGo(1);
                            Thread.sleep(110);
                            ende = comView.getEnde();

                            ready = 0;}

                        comView.setGo(0);
                        Thread.sleep(110);
                        prodStep = "START_ROBO";
                        comView.setStation(3);
                        Main.log.debug("************* ENDE*****************");
                        ende = 0;
                        prodFinalStep = false;}
                    break;

                default:
                    Main.log.debug("!!!!! OUT OFF PROGRAM !!!!!");
                    comView.setKoords(0, 0, 0);
                    break;}}}</source-code>
          </source-codes>
        </operation>
        <operation id="o8982008df9d049e8a6d7c89954dadec634" name="postGame" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di424605936800322954" cid="C029" type="class" name="ComRefBox" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/27/2014 18:04:43">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a91eda82a131542f4916740b3157a160a55" name="client" type="ProtobufClient" type-id="ProtobufClient" visibility="public" abstract="false" virtual="false" />
        <attribute id="ad62fbc92feb54a94a5cf953447adc3d155" name="handler" type="Handler" type-id="Handler" visibility="public" abstract="false" virtual="false" />
        <attribute id="a1408240e39cb46daa3249b780c3229a055" name="peer" type="ProtobufBroadcastPeer" type-id="ProtobufBroadcastPeer" visibility="public" abstract="false" virtual="false" />
        <attribute id="a365a5391fa4f4c8faa332a7c0ea0393f55" name="gamePoints" type="int" type-id="int" visibility="public" abstract="false" virtual="false" />
        <attribute id="a93c714d766414e21bd8b8b394eeaf7f055" name="gamePhase" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" />
        <attribute id="a35c6f9c494154f678d2ea8315798c3a155" name="gameState" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" />
        <attribute id="aa6f53186c208429589ef5e7377ff031c55" name="hasTime" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" />
        <attribute id="a3aaff4d1f46f4446bf4ace87317c09e055" name="gameTime" type="int" type-id="int" visibility="public" abstract="false" virtual="false" />
      </attributes>
      <operations>
        <operation id="o76d755c1d0ba4e6b8d95c5dbd73a2fba55" name="ComRefBox" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="ip" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="portIn" type="int" type-id="int" default-value="" />
            <parameter id="" name="portOut" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        // --------------------------- Verbinden mit Refbox per UDP ----------------------------
        peer = new ProtobufBroadcastPeer(ip, portIn, portOut);
        handler = new Handler(peer);
        try{
            peer.start();} catch (IOException e){
            e.printStackTrace();}

        peer.register_handler(handler); // muss sicher erst nachher geschehen, da nachricht im handler sonst nicht an peer gehängt werden kann}</source-code>
          </source-codes>
        </operation>
        <operation id="o79d376f678ee47d7ad4b0fc107657dae55" name="addObserver" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="observer" type="Observer" type-id="Observer" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        handler.addObserver(observer);}

    /**
     * ?? event ??? ??? ??? refbox --&gt; controller Client-Server
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ofe46c5b421a246c3a6f7c0a4f198d57755" name="addAttentionMessage" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        peer.&lt;AttentionMessage&gt;add_message(AttentionMessage.class);}

    /**
     * ok periodisch 1sec ??? refbox --&gt; all P2P &amp; C-S
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o490ac49f39b84197bac64d699bc851fd55" name="addBeaconSignal" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        client.&lt;BeaconSignal&gt;add_message(BeaconSignal.class);}

    //?? periodisch? EVENT! ??? refbox --&gt; any       P2P &amp; C-S</source-code>
          </source-codes>
        </operation>
        <operation id="o831fcf6dc97b4dab8a527bff5b4f263555" name="addVersionInfo" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        peer.&lt;VersionInfo&gt;add_message(VersionInfo.class);}

    /**
     * ?? periodisch 1sec ??? refbox --&gt; robots PeerToPeer
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ob3612750c1aa491f8780d2e1720a880355" name="addExplorationInfo" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        peer.&lt;ExplorationInfo&gt;add_message(ExplorationInfo.class);}

    //ok periodisch 1sec ??? refbox --&gt; all          P2P &amp; C-S
    /**
     * Hört auf die Nachricht "GameState" werte: - Aktueller Punktestand -
     * Aktuelle Spielzeit (EXPLORATION: 0-180, PRODUCTION: 0-900) - Aktueller
     * Spiel Phase (PRE_GAME, EXPLORATION, PRODUCTION, POST_GAME) - Aktueller
     * Spiel Status (WAIT_STRT, RUNNING, PAUSED) - Ob noch Spielzeit vorhanden
     * ist.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o562b3bead0894320ae02316d87fe810755" name="addGameStateMessage" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        peer.&lt;GameState&gt;add_message(GameState.class);}

    /**
     * ok periodisch 0.25sec ??? refbox --&gt; all P2P &amp; C-S
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o48a07dac71d74458858565d9895f224055" name="addMachineInfo" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        peer.&lt;MachineInfo&gt;add_message(MachineInfo.class);}

    /**
     * ?? ??? 5sec ??? refbox --&gt; any P2P &amp; C-S
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o9bae7b8798564580b600ff50185dcc0755" name="addOrderInfo" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        peer.&lt;OrderInfo&gt;add_message(OrderInfo.class);}

    /**
     * ok periodisch 1sec ok refbox --&gt; controller Client-Server
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oe0077c4ded1348d9a5cb97bf1919875e55" name="addPuckInfo" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        peer.&lt;PuckInfo&gt;add_message(PuckInfo.class);}

    /**
     * ok periodisch 1sec ??? refbox --&gt; controller Client-Server
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o6505da541c11495ca69079230e0c452755" name="addRobotInfo" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        peer.&lt;RobotInfo&gt;add_message(RobotInfo.class);}

    /**
     *
     * @return Gibt den aktuellen Spiel Status zurück (WAIT_STRT, RUNNING,
     * PAUSED).
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o1bbd82693bf84f03b1d703ce4da86d2755" name="getState" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return handler.getState();}

    /**
     *
     * @return Gibt die aktuelle Spiel Phase zurück (PRE_GAME, EXPLORATION,
     * PRODUCTION, POST_GAME).
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o0f2263da4793495287bce3564e6068f455" name="getPhase" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return handler.getPhase();}

    /**
     *
     * @return Git an ob noch Spielzeit vorhanden ist.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o57668053a1dc49c6a1b633fd5a2c6d9955" name="getHasTime" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return handler.getHasTime();}

    /**
     *
     * @return Gibt die aktuelle Spielzeit zurück (EXPLORATION: 0-180,
     * PRODUCTION: 0-900).
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ob6b2174cc5d54c4f9f46028ee1ff35d255" name="getTime" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return handler.getTime();}

    /**
     *
     * @return Gibt den Aktuellen Punktestand zurück.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oc6c5f700d5d3439f9e9180ee51606c7256" name="getPoints" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return handler.getPoints();}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di733499238110261280" cid="C030" type="class" name="Handler" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/27/2014 18:04:43">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="abc928f18c8be46a68b42676a1d9dca12112" name="fc" type="FieldCommander" type-id="FieldCommander" visibility="package" abstract="false" virtual="false" />
        <attribute id="a69286ea58d654e00ab32da9cfe79ff07112" name="orderList" type="List&lt;Order&gt;" type-id="List&lt;Order&gt;" visibility="public" abstract="false" virtual="false" />
        <attribute id="ab050bad0d535440a80ace7c297be0de5112" name="game" type="GameState" type-id="GameState" visibility="public" abstract="false" virtual="false" />
        <attribute id="ac9add46662c84b99b5977cbaccfa0a3f112" name="mList" type="List&lt;Machine&gt;" type-id="List&lt;Machine&gt;" visibility="public" abstract="false" virtual="false" />
        <attribute id="ae36573f21ad942dfb552578e6c8fdab4112" name="gamePoints" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" />
        <attribute id="abe6cc17c8d5d4483bdfafa8efcfaf4d2112" name="gamePhase" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" />
        <attribute id="a3484c02f8243408897cf5af92ee1773b112" name="gameState" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" />
        <attribute id="aeeb93eb0037f4b19bcfe358033c78fee112" name="hasTime" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" />
        <attribute id="a6801f95ac3da458e875f78cd19de11c8112" name="gameTime" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" />
        <attribute id="aa5a2d3223f854305b202089feda086ee113" name="logMessage" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" />
        <attribute id="a49c58d60512a44378b65d11064c6ba74113" name="mTypLight" type="int[]" type-id="int[]" visibility="public" abstract="false" virtual="false" />
        <attribute id="a97c8fd6cd6b746c39e70c22c34c3f3f6113" name="peer" type="ProtobufBroadcastPeer" type-id="ProtobufBroadcastPeer" visibility="package" abstract="false" virtual="false" />
        <attribute id="a094ce88b94f74d19ab72cb7f0843be96113" name="machineTyp" type="String[]" type-id="String[]" visibility="public" abstract="false" virtual="false" />
      </attributes>
      <operations>
        <operation id="o867758c455ed4c658973d1ae8b4a87e4113" name="Handler" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="peer" type="ProtobufBroadcastPeer" type-id="ProtobufBroadcastPeer" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.peer = peer;
        logMessage = "Der Server wurde gestartet !!!";
        fc = FieldCommander.getInstance();}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o91d1b86eb90b48b29dd60405427c7072113" name="handle_message" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="in_msg" type="ByteBuffer" type-id="ByteBuffer" default-value="" />
            <parameter id="" name="msg" type="GeneratedMessage" type-id="GeneratedMessage" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        NanoSecondsTimestampProvider nstp = new NanoSecondsTimestampProvider();

        long ms = System.currentTimeMillis();
        long ns = nstp.currentNanoSecondsTimestamp();

        int sec = (int) (ms / 1000);
        long nsec = ns - (ms * 1000000L);

        TimeProtos.Time t = TimeProtos.Time.newBuilder().setSec(sec).setNsec(nsec).build();
        BeaconSignal bs = BeaconSignal.newBuilder().setTime(t).setSeq(1).setPeerName(Main.name).setNumber(0).setTeamName("Solidus").build();

        ProtobufMessage udpOut = new ProtobufMessage(2000, 1, bs);
        peer.enqueue(udpOut);
        //sendMachine("M1", "T4");
// -------------------------- Puck Info ----------------------------------------
        if (msg instanceof PuckInfo){
            byte[ array = new byte[in_msg.capacity();
            in_msg.rewind();
            in_msg.get(array);
            /*3 Lines above could be ev. replaced by 
             byte[] array=in_msg.array();
             has to be tested --&gt; replace in each Job*/
            PuckInfoProtos.PuckInfo info;

            try{
                info = PuckInfoProtos.PuckInfo.parseFrom(array);
                int count = info.getPucksCount();
                System.out.println("Number of pucks: " + count);
                List&lt;PuckInfoProtos.Puck&gt; pucks = info.getPucksList();
                for (int i = 0; i &lt; pucks.size(); i++){
                    PuckInfoProtos.Puck puck = pucks.get(i);
                    int id = puck.getId();
                    System.out.println("  puck ID: " + id);}} catch (InvalidProtocolBufferException e){
                e.printStackTrace();}}
// -------------------------------- Order Info ---------------------------------
        if (msg instanceof OrderInfo){
            byte[ array = new byte[in_msg.capacity();
            in_msg.rewind();
            in_msg.get(array);

            OrderInfoProtos.OrderInfo info;
            try{
                info = OrderInfoProtos.OrderInfo.parseFrom(array);

                orderList = info.getOrdersList();
                int length = orderList.size();

                for (int i = 0; i &lt; length; i++){
                    System.out.println("Order " + (i + 1) + ": " + orderList.get(i));}} catch (InvalidProtocolBufferException ex){
                Logger.getLogger(Handler.class.getName()).log(Level.SEVERE, null, ex);}}

// -------------------------------------   Game State   ------------------------------------------
// Gibt die Aktuelle Spielphase, Spielstatus, Spielzeit, die Punkte und ob noch Zeit vorhanden ist.
        if (msg instanceof GameState){
            byte[ array = new byte[in_msg.capacity();
            in_msg.rewind();
            in_msg.get(array);

            try{
                game = GameStateProtos.GameState.parseFrom(array);

                int points = game.getPoints();
                Phase phase = game.getPhase();
                State state = game.getState();
                TimeProtos.Time time = game.getGameTime();

                hasTime = game.hasGameTime() + "";

                setChanged();
                notifyObservers(send);

                gamePoints = points + "";
                gamePhase = phase.name();
                gameState = state.name();
                gameTime = time.getSec() + "";} catch (InvalidProtocolBufferException e){
                e.printStackTrace();}}

// -------------------------------- Machine Info ---------------------------------
        if (msg instanceof MachineInfo){
            System.out.println("MACHINE INFO");

            byte[ array = new byte[in_msg.capacity();
            in_msg.rewind();
            in_msg.get(array);

            try{
                MachineInfo mInfo;
                mInfo = MachineInfoProtos.MachineInfo.parseFrom(array);
                mList = mInfo.getMachinesList();
/*
                int length = mList.size();
                machineTyp = new String[length];
                for (int i = 0; i &lt; length; i++)
                {
                    Machine m = mList.get(i);
                    String name = m.getName();
                    String typ = m.getType();
                    Pose2D pose = m.getPose();

                    PuckState out = m.getOutput();
                    //PuckState in = m.getInputs(i);

                    machineTyp[i] = typ;
                    System.out.println("Maschine " + name + " ist Maschinentyp " + machineTyp[i]);
                }*/
                JobController.getInstance().setMachineTypesFromRefBox(mList);} catch (InvalidProtocolBufferException ex){
                Logger.getLogger(Handler.class.getName()).log(Level.SEVERE, null, ex);}

            /*    
             try
             {         
             int count = info.getMachinesCount();
             System.out.println("Anzahl Maschinen: " + count);
             List&lt;MachineInfoProtos.Machine&gt; machines = info.getMachinesList();
             
             MachineInfoProtos.Machine machine = machines.get(0);
            
             int inputsCount = machine.getInputsCount();
             List&lt;LightSpec&gt; lightlist = machine.getLightsList();                            
             }
             catch (InvalidProtocolBufferException ex)
             {
             Logger.getLogger(Handler.class.getName()).log(Level.SEVERE, null, ex);
             }
             */}
// -----------------------------------------------------------------------------------
// -------------------------------- Exploration Info ---------------------------------
// -----------------------------------------------------------------------------------
        if (msg instanceof ExplorationInfo){
            byte[ array = new byte[in_msg.capacity();
            in_msg.rewind();
            in_msg.get(array);

            ExplorationInfoProtos.ExplorationInfo info;

            try{
                info = ExplorationInfoProtos.ExplorationInfo.parseFrom(array);

                List&lt;ExplorationSignal&gt; slist = info.getSignalsList();
                for (int i = 0; i &lt; 5; i++){
                    ExplorationSignal m0 = slist.get(i);
                    mTypeDef[i[RED = m0.getLights(0).getState().getNumber();
                    mTypeDef[i[ORANGE = m0.getLights(1).getState().getNumber();
                    mTypeDef[i[GREEN = m0.getLights(2).getState().getNumber();}

// ------------------ Array[15] füllen: Station 1 - 3 platz 0 - 2... -----------
                mTypLight = new int[15;
                int m = 0;
                for (int i = 0; i &lt; 15; i += 3){
                    mTypLight[i = mTypeDef[m[RED;
                    mTypLight[i + 1 = mTypeDef[m[ORANGE;
                    mTypLight[i + 2 = mTypeDef[m[GREEN;
                    logMessage = "MTyp " + m + " =&gt; RED: " + mTypLight[i + " ORANGE: " + mTypLight[i + 1 + " GREEN: " + mTypLight[i + 2;
                    m++;}} catch (InvalidProtocolBufferException e){
                e.printStackTrace();}}

// -------------------------------- Beacon Signal ---------------------------------
        if (msg instanceof BeaconSignal){
            byte[ array = new byte[in_msg.capacity();
            in_msg.rewind();
            in_msg.get(array);}
        send[0 = gamePoints;
        send[1 = gamePhase;
        send[2 = gameState;
        send[3 = gameTime;
        send[4 = hasTime;
        send[5 = logMessage;
        setChanged();
        notifyObservers(send);}</source-code>
          </source-codes>
        </operation>
        <operation id="of02a67d301ae485ba78fd37c4ef60a22117" name="sendMachine" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="lamp" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        try{
            Thread.sleep(500);} catch (InterruptedException ex){
            Logger.getLogger(Handler.class.getName()).log(Level.SEVERE, null, ex);}

        String type = "";

        if (lamp[RED == mTypLight[0 &amp;&amp; lamp[ORANGE == mTypLight[1 &amp;&amp; lamp[GREEN == mTypLight[2){
            type = "T1";}
        if (lamp[RED == mTypLight[3 &amp;&amp; lamp[ORANGE == mTypLight[4 &amp;&amp; lamp[GREEN == mTypLight[5){
            type = "T2";}
        if (lamp[RED == mTypLight[6 &amp;&amp; lamp[ORANGE == mTypLight[7 &amp;&amp; lamp[GREEN == mTypLight[8){
            type = "T3";}
        if (lamp[RED == mTypLight[9 &amp;&amp; lamp[ORANGE == mTypLight[10 &amp;&amp; lamp[GREEN == mTypLight[11){
            type = "T4";}
        if (lamp[RED == mTypLight[12 &amp;&amp; lamp[ORANGE == mTypLight[13 &amp;&amp; lamp[GREEN == mTypLight[14){
            type = "T5";}
        fc.machineMap.get(name).setmTyp(type);// hier wird der jeweilige Maschinentyp in die entsprechende zelle (von der Map geholt) gespeichert

        try{
            Thread.sleep(1000);} catch (InterruptedException ex){
            Logger.getLogger(Handler.class.getName()).log(Level.SEVERE, null, ex);}
        MachineReportProtos.MachineReportEntry mi = MachineReportProtos.MachineReportEntry.newBuilder().setName(name).setType(type).build();
        //MachineReport mr = MachineReport.newBuilder().setMachines(1, mi).build();  //for just one Machine
        MachineReport mr = MachineReport.newBuilder().addMachines(mi).build();
        ProtobufMessage machineReport = new ProtobufMessage(2000, 61, mr);
        peer.enqueue(machineReport);}

    /**
     *
     * @return Gibt den aktuellen Spiel Status zurück (WAIT_STRT, RUNNING,
     * PAUSED).
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o725b6c4bb23a49788aa64204b980c244117" name="getState" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return gameState;}

    /**
     *
     * @return Gibt die aktuelle Spiel Phase zurück (PRE_GAME, EXPLORATION,
     * PRODUCTION, POST_GAME).
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o59279e691647451a9199aeedee2ede82117" name="getPhase" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return gamePhase;}

    /**
     *
     * @return Git an ob noch Spielzeit vorhanden ist.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o7e09c9d3e16743f89237d4041b05a7a6117" name="getHasTime" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return hasTime;}

    /**
     *
     * @return Gibt aktuelle Spielzeit zurück (EXPLORATION: 0-180, PRODUCTION:
     * 0-900).
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o840870b6853340d1adb2e908b84d619d117" name="getTime" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return gameTime;}

    /**
     *
     * @return Gibt den Aktuellen Punktestand zurück.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ofa489aafbb5645839b30307969f6555f117" name="getPoints" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return gamePoints;}

    /**
     *
     * @return Gibt die von edr Refbox zugewisenen Lichter der 5 Maschinentypen
     * zurück: array[15] array[0] - array[2] Maschinentyp 1: [0] = Rote Lampe,
     * [1] = Orange Lampe, [2] = Grüne Lampe...
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o574b3dd0ee55408ba8fef4f7648ea807117" name="getMachineTyp" type="int[]" type-id="int[]" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return mTypLight;}</source-code>
          </source-codes>
        </operation>
        <operation id="o2f4370088bc64e20a3b0296c32dac4a1117" name="main" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        /*ByteBuffer in_msg=new ByteBuffer();
         byte[] array = new byte[in_msg.capacity()];
         in_msg.rewind();
         in_msg.get(array);
         /*3 Lines above could be ev. replaced by 
         byte[] array=in_msg.array();
         has to be tested --&gt; replace in each Job*/

        //byte[] array = new byte[200];
        /*
         List&lt;Order&gt; orderList;
         OrderInfoProtos.OrderInfo info;
         try
         {            
         //info = OrderInfoProtos.OrderInfo.parseFrom(array);

         // orderList = info.getOrdersList();
         int length = orderList.size();

         for (int i = 0; i &lt; length; i++)
         {
         System.out.println("Order " + (i + 1) + ": " + orderList.get(i));
         }
         } catch (InvalidProtocolBufferException ex)
         {
         Logger.getLogger(Handler.class.getName()).log(Level.SEVERE, null, ex);
         }*/}}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di535883763640623351" cid="C031" type="class" name="Main" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/27/2014 18:04:43">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="ob9942e0658fa418795bb85c588f4affc136" name="org.apache.log4j.Logger.getRootLogger" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">
    static UserFrame frame;
    public static String refBoxIp;
    public static String refBoxPortIn = "4444";
    public static String refBoxPortOut = "4444";
    public static String name = "MrPink";
    static ComRefBox comRefBox;
    static ComView comView;
    static JobController way;
    static StateMachine sm;
    static FieldCommander fc;
    static File ipfile;
    static File portfile;
    static File namefile;
    static String relativ;

// ------------------------------   MAIN   -------------------------------------</source-code>
          </source-codes>
        </operation>
        <operation id="od65c8e3b0d5547a08602e8b21b1154ec136" name="main" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws FileNotFoundException, InterruptedException, IOException{
        //&lt;editor-fold defaultstate="collapsed" desc="comment"&gt;
// Logger instantieren, konfigurieren
        try{
            SimpleLayout layout = new SimpleLayout();
            ConsoleAppender consoleAppender = new ConsoleAppender(layout);
            log.addAppender(consoleAppender);
            FileAppender fileAppender = new FileAppender(layout, "logs/MeineLogDatei.log", false);
            log.addAppender(fileAppender);
            // ALL | DEBUG | INFO | WARN | ERROR | FATAL | OFF:
            log.setLevel(org.apache.log4j.Level.DEBUG);

            log.debug("Meine Debug-Meldung");
            log.info("Meine Info-Meldung");
            log.warn("Meine Warn-Meldung");
            log.error("Meine Error-Meldung");
            log.fatal("Meine Fatal-Meldung");} catch (Exception ex){
            System.out.println(ex);}
//&lt;/editor-fold&gt;

        fc = FieldCommander.getInstance();
        comView = ComView.getInstance();

        fc.setVisible(true);
        frame = new UserFrame();
        way = JobController.getInstance();

        try{
            ipfile = new File("C:/Robotino/iprefbox");
            namefile = new File("C:/Robotino/name");

            FileIO read = new FileIO();
            read.getText(ipfile);
            read.getText(namefile);

            refBoxIp = read.getText(ipfile);
            name = read.getText(namefile);
            way.setRoboNameIdx(read.getText(namefile));
            comRefBox = new ComRefBox(refBoxIp, Integer.valueOf(refBoxPortIn), Integer.valueOf(refBoxPortOut));
            //comRefBox = new ComRefBox(refBoxIp, refBoxPort, frame);
            comRefBox.addObserver(frame.panel);} catch (IOException ex){}}
// -----------------------------------------------------------------------------</source-code>
          </source-codes>
        </operation>
        <operation id="o5b02eaa2f4214a15ab825a1e4bfd37ae136" name="setIpRefbox" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="ip" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws FileNotFoundException, IOException{
        refBoxIp = ip;
        System.out.println(ip);
        FileWriter schreiber = new FileWriter(ipfile);
        schreiber.write(ip);
        schreiber.flush();}</source-code>
          </source-codes>
        </operation>
        <operation id="o1b790db4ef36484086b3557e23d27aa8136" name="setNameRobo" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="roboname" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws FileNotFoundException, IOException{
        name = roboname;
        FileWriter schreiber = new FileWriter(namefile);
        schreiber.write(roboname);
        schreiber.flush();}</source-code>
          </source-codes>
        </operation>
        <operation id="o7b764e3f33e344acb377c9f4a91bc2c6136" name="setPortRefbox" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="port" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws FileNotFoundException, IOException{
        refBoxPortIn = port;
        System.out.println(port);
        FileWriter schreiber = new FileWriter(portfile);
        schreiber.write(port);
        schreiber.flush();
        schreiber.close();}

// ------------------------------   START   ------------------------------------</source-code>
          </source-codes>
        </operation>
        <operation id="o79afe0f42d674eb8bc9514f06dc6ea6a136" name="startServer" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <source-codes>
            <source-code language="Undefined"> throws SocketException, IOException, InterruptedException{
        log.debug("Startbutton is clicked");

        sm = new StateMachine(comRefBox.handler, way);

// Nachrichten Refbox
        comRefBox.addGameStateMessage();
        comRefBox.addMachineInfo();
        comRefBox.addExplorationInfo();
        comRefBox.addOrderInfo();

// Start Robotinos
        //robo.start();
        comView.start();
        Thread.sleep(1000);
        sm.start();
        // Thread.sleep(500);
        sm.setRunning(true);}</source-code>
          </source-codes>
        </operation>
        <operation id="o974dfdb2c0444d309cdcf1a946f12971136" name="stopServer" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <source-codes>
            <source-code language="Undefined">{
        comView.run = false;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di504494496203164162" cid="C032" type="class" name="BasicInterpreter" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/27/2014 18:04:43">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a21e6dc8e574e4bb182bbcff1c2d86ece145" name="Tim" type="Communication" type-id="Communication" visibility="private" abstract="false" virtual="false" />
        <attribute id="ad91c134f332e4451bc27827be297942d145" name="Data" type="If_DataWriter" type-id="If_DataWriter" visibility="private" abstract="false" virtual="false" />
      </attributes>
      <operations>
        <operation id="o2f20c3a978a74aefa7d2a6f5ed0c3d8a145" name="BasicInterpreter" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{}
    
    //&lt;editor-fold defaultstate="collapsed" desc="Getter_And_Setter"&gt;</source-code>
          </source-codes>
        </operation>
        <operation id="o111d1d839eae4044861c9dec6616c9a8145" name="getMeasurementData" type="If_DataReader" type-id="If_DataReader" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return (If_DataReader) Data;}
//&lt;/editor-fold&gt;

    //&lt;editor-fold defaultstate="collapsed" desc="Private_Methods"&gt;
    /**
     * Analisiert das angekommene Byte auf Steuerzeichen (STX, ETX, SPACE) und
     * erzeugt/beendet entsprechend Messdaten und Segmente rsp. leitet die Daten
     * weiter.
     *
     * @param value zu analysierendes Byte
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o49ecfac030214d93a291618650dcba4a145" name="assignToState" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="value" type="byte" type-id="byte" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        switch (value){
            case STX://Erzeugen von neuem Messdaten-Objekt
                Data = new Data();
                break;
            case ETX://Abschliessen von Messdatenobjekt
                Data.release();
                break;
            case SPACE://Erzeugen von neuem Messdaten-Abschnitt
                Data.newSegment();
                break;
            default://Hinzufügen zu bestehendem Messdaten-Abschnitt in bestehendem -Objekt.
                Data.addByte(value);
                break;}}
//&lt;/editor-fold&gt;

    //&lt;editor-fold defaultstate="collapsed" desc="NewMeasurementListener"&gt;
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o8b01b8f79cf94586b9b7f6485ef7fd81145" name="newMeasurementValues" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="value" type="byte" type-id="byte" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        //System.out.println("BasicInterpreter Value: " + value);
        this.assignToState(value);}
//&lt;/editor-fold&gt;</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di110797824965581260" cid="C033" type="class" name="Communication" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/27/2014 18:04:43">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a1fa04aacd99e428684eccf94945b4e02161" name="ipAdress" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" />
        <attribute id="ae314a85cc81f4e9b8ceeda514ea611e6161" name="port" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="a10efbf5bc6bb4932874e4c72e6871b9c161" name="socket" type="Socket" type-id="Socket" visibility="private" abstract="false" virtual="false" />
        <attribute id="a59650ae4f21847c2bf07c37604a3f9ab161" name="request" type="OutputStream" type-id="OutputStream" visibility="private" abstract="false" virtual="false" />
        <attribute id="a1c4e91308ea44023946dde7384c6f167161" name="response" type="InputStream" type-id="InputStream" visibility="private" abstract="false" virtual="false" />
      </attributes>
      <operations>
        <operation id="of1d5f57c6aa34e5da259da3af13f7b6b161" name="Communication" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="ipAdress" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="port" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws IOException{
        this.ipAdress = ipAdress;
        this.port = port;

        socket = new Socket(this.ipAdress, this.port);
        request = socket.getOutputStream();
        response = socket.getInputStream();}

    //Methoden</source-code>
          </source-codes>
        </operation>
        <operation id="oeb9dbaa17f0b4584a146ecae0749a564161" name="singleMeasurement" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="Listener" type="NewMeasurementListener" type-id="NewMeasurementListener" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws IOException{
        if (socket != null)//Check: Parameter vorhanden?{
            //Wandeln String in Command-Byte[]
            byte[ command = this.interpretToCommand("sRN LMDscandata");

            //Request
            request.write(command);
            request.flush();

            //Response
            int temporaryData;//temporäre Daten um auf -1 zu testen (Ende der Daten)
            boolean endOfDataFlag;//true = Ende der Daten im Request-Objekt nicht erreicht, false = Ende
            
            BufferedReader buff = new BufferedReader(new InputStreamReader(response)); 
            
            do{
                Listener.newMeasurementValues((byte) buff.read());}
            while(buff.ready());
            //System.out.println("DONE!");
            /*do
            {
            temporaryData = response.read();
            
            endOfDataFlag = !(temporaryData == -1);
            System.out.println(temporaryData);
            if (endOfDataFlag)
            {
            Listener.newMeasurementValues((byte) temporaryData);
            }
            } while (endOfDataFlag);*/}}</source-code>
          </source-codes>
        </operation>
        <operation id="occ41d2a0546a4a22a611d82cb533f8c6161" name="startMeasurement" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="Listener" type="NewMeasurementListener" type-id="NewMeasurementListener" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{}</source-code>
          </source-codes>
        </operation>
        <operation id="o54407f410e2443dfa7c3eb617a7afe66161" name="stopMeasurement" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{}

    //&lt;editor-fold defaultstate="collapsed" desc="Getter_And_Setter"&gt;</source-code>
          </source-codes>
        </operation>
        <operation id="ob9d701c4b3734afd9e5ccfe40d2c99e5161" name="setIpAndPort" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="ipAdress" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="port" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.ipAdress = ipAdress;
        this.port = port;}</source-code>
          </source-codes>
        </operation>
        <operation id="o3b1320de237d4cc7926572a9086f71ea161" name="getIpAdress" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return this.ipAdress;}</source-code>
          </source-codes>
        </operation>
        <operation id="o9d289cf19b824e5ea29c3dcd38d6f115161" name="getPort" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return this.port;}
//&lt;/editor-fold&gt;

    //&lt;editor-fold defaultstate="collapsed" desc="Private_Methods"&gt;
    /**
     * Interpretiert einen normalen String und gibt ihn als Byte-Array im
     * ASCII-Zeichensatz aus. Ergänzt zudem den String mit einem vorangestellten
     * STX und einem ETX am Schluss. Kann verwendet werden um einen Befehl für
     * den Scanner in dies passende Form zu transformieren.
     *
     * @param interpret String der interpretiert werden soll
     * @return ASCII Byte-Array des Strings mit angehängetm &amp; nachfolgenden STX rsp. ETX
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o42322424836447f5a31953a71f5616f5161" name="interpretToCommand" type="byte[]" type-id="byte[]" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="interpret" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        final byte ASCII_STX = 2;
        final byte ASCII_ETX = 3;
        final byte ASCII_BR = 32;
        
        byte[ asciiTemp = interpret.getBytes(Charset.forName("US-ASCII"));
        byte[ ascii = new byte[asciiTemp.length + 2;
        
        for (int n = 1; n &lt; (ascii.length - 1); n++)//Alle ausser erstes &amp; letztes Byte{
            ascii[n = asciiTemp[n - 1;}
        
        ascii[0 = ASCII_STX;
        ascii[ascii.length - 1 = ASCII_ETX;
        
        return ascii;}
//&lt;/editor-fold&gt;</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di505117340565725154" cid="C034" type="class" name="Data" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/27/2014 18:04:43">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="aa76a010626ac4f83ac2e67e8f2853fea172" name="release" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" />
        <attribute id="a065d5cfb937943ddb6a9db94cd7436c4172" name="MeasurementDataList" type="ArrayList&lt;DataSegment&gt;" type-id="ArrayList&lt;DataSegment&gt;" visibility="private" abstract="false" virtual="false" />
        <attribute id="a2f947115a6a2461cadb6a854cb6eba98172" name="currentSegment" type="DataSegment" type-id="DataSegment" visibility="private" abstract="false" virtual="false" />
      </attributes>
      <operations>
        <operation id="o52c3168dd4e4425590f56b92ea8ef003172" name="Data" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        MeasurementDataList = new ArrayList&lt;&gt;();//Liste erzeugen, die die frisch erzeugten Segmente aufnimmt sobald diese abgeschlossen sind.
        currentSegment = new DataSegment(MAX_SIZE_SEGMENT);//Erzeugen von ERSTEM Daten-Segment das mit Daten befüllt werden kann
        release = false;}</source-code>
          </source-codes>
        </operation>
        <operation id="o85c764e75c4840938f4e4a5c925b4ecc172" name="printMeasurementDataList" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        int counter = 0;
        
        for(DataSegment segment : MeasurementDataList){
            System.out.print(counter+". Segment: ");
            for(char x: segment.getSegment()){
                System.out.print(x);}
            System.out.println();
            counter++;}}
    
    //&lt;editor-fold defaultstate="collapsed" desc="If_DataWriter"&gt;
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o18b86fd1b46644b0b498efb55926d6de172" name="addByte" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="data" type="byte" type-id="byte" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        currentSegment.addByte(data);}
    
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="odd196ddcdebf48d8bdf76b28f3dffdcd172" name="newSegment" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        currentSegment.releaseSegment();//Abschliessen von aktuellem Segment
        MeasurementDataList.add(currentSegment);//Aktuelles Segment in Liste aller Segmente geben
        currentSegment = new DataSegment(MAX_SIZE_SEGMENT);//Neues Segment erzeugen}
    
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o0d08db1bca154cb1a281952295c531a3172" name="release" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        currentSegment.releaseSegment();//Abschliessen von aktuellem Segment
        MeasurementDataList.add(currentSegment);//Aktuelles Segment in Pool aller Segmente geben
        release = true;
        //printMeasurementDataList();}
    
//&lt;/editor-fold&gt;
    //&lt;editor-fold defaultstate="collapsed" desc="If_DataReader"&gt;
    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o805f05a98bb6448583d2f4429577f08e172" name="getData" type="char[]" type-id="char[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="index" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        return MeasurementDataList.get(index).getSegment();}
//&lt;/editor-fold&gt;</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di433861472542648855" cid="C035" type="class" name="DataMask" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/27/2014 18:04:43">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="aa246752b99b741909e1c7d48876c697b199" name="data" type="If_DataReader" type-id="If_DataReader" visibility="private" abstract="false" virtual="false" />
        <attribute id="a676fade023cb4d51822910fbeadeed4a200" name="kommandoart" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" />
        <attribute id="ae2a2218d312945e3a10bff4773ef8400200" name="kommando" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" />
        <attribute id="a47ceae8d1f7441a7955cde7b47775525200" name="versionsnummer" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="a4b5903a4007b4a279ffd744a7d678be2200" name="geraetenummer" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="aa81069c443b943d79550bdb2f199a6be200" name="seriennummer" type="long" type-id="long" visibility="private" abstract="false" virtual="false" />
        <attribute id="a75fff2a5ba2e42ae8c0aacc02100cc40200" name="geraetestatus_1" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="aec587dce9fd94e53a45da67ddc06764b200" name="geraetestatus_2" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="a67b98aa33f324380907acdeb4c1e6623200" name="telegrammzaehler" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="a311cfda2026849689a8466318bf229dc200" name="scanzaehler" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="a43563c20d6f348e6991b760d2a647ebb200" name="einschaltdauer" type="long" type-id="long" visibility="private" abstract="false" virtual="false" />
        <attribute id="a9f25c27655a54d9a905cda60b3cd7fd0200" name="uebertragungsdauer" type="long" type-id="long" visibility="private" abstract="false" virtual="false" />
        <attribute id="a13099c551753414aab238b2133fd04d6200" name="eingangsstatus_1" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="ac04c70645d7f44cc9bf70c7a9b98c6a2200" name="eingangsstatus_2" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="a4c942fc8c8a748a098db79c120a98552200" name="ausgangsstatus_1" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="a72bdd1f6bb894e158cd47ee26b9b256e200" name="ausgangsstatus_2" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="a3a0be95a2c3444b08db48f49650ab966200" name="reserviert_A" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="a577b8c6ffa6e49f8bd81612a85ebbc8e200" name="scanfrequenz" type="long" type-id="long" visibility="private" abstract="false" virtual="false" />
        <attribute id="a0b194dd2c1974c1982f2257d398c0de5200" name="messfrequenz" type="long" type-id="long" visibility="private" abstract="false" virtual="false" />
        <attribute id="af13a030b22994074b0608790a9207cc1200" name="anzahl_drehgeber" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="a612827bea9e94b4db31732c551946a52200" name="anzahl_kanaele" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="aada501532b7b4164b17cadb20d1c20f2201" name="messdateninhalt" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" />
        <attribute id="a9ae464165cf0472296c25a8699fe0ff1201" name="skalierungsfaktor" type="long" type-id="long" visibility="private" abstract="false" virtual="false" />
        <attribute id="a8960e48743b747dd9f3f2a7b84bb433a201" name="skalierungsoffset" type="long" type-id="long" visibility="private" abstract="false" virtual="false" />
        <attribute id="ab6a06a275d6544fc99425b3969da05f8201" name="startwinkel" type="long" type-id="long" visibility="private" abstract="false" virtual="false" />
        <attribute id="acfcc04adfd0e4ab193217dc8e6822d9f201" name="winkelschrittweite" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="aebb6e146922e4613965cd08916e29496201" name="anzahl_daten" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
      </attributes>
      <operations>
        <operation id="of48f6c39e46d450eb9b04fef78372738201" name="DataMask" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="data" type="If_DataReader" type-id="If_DataReader" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.data = data;}


    //&lt;editor-fold defaultstate="collapsed" desc="Getter_Header"&gt;</source-code>
          </source-codes>
        </operation>
        <operation id="o54517d3df5d24e138e1d25c8634217ac201" name="getTelegrammzaehler" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined"> throws Exception{
        return interpretCharArrayAsInt(data.getData(TELEGRAMMZAEHLER));}</source-code>
          </source-codes>
        </operation>
        <operation id="oa3f620b532bd48118d12c92d9d227d5d201" name="getScanzaehler" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined"> throws Exception{
        return interpretCharArrayAsInt(data.getData(SCANZAEHLER));}</source-code>
          </source-codes>
        </operation>
        <operation id="o2ec953befa9a45dc8d21da5a02e93917201" name="getEinschaltdauer" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined"> throws Exception{
        return interpretCharArrayAsInt(data.getData(EINSCHALTDAUER));}</source-code>
          </source-codes>
        </operation>
        <operation id="o84a19d94695c4e9f8ba91adc6c4efb8b201" name="getUebertragungsdauer" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined"> throws Exception{
        return interpretCharArrayAsInt(data.getData(UEBERTRAGUNGSDAUER));}
//&lt;/editor-fold&gt;
    
    //&lt;editor-fold defaultstate="collapsed" desc="Getter_Distance"&gt;</source-code>
          </source-codes>
        </operation>
        <operation id="o7bba81c203bd4e67b73b23997eb0d646201" name="getSkalierungsfaktor" type="long" type-id="long" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return interpretCharArrayAsLong(data.getData(SKALIERUNGSFAKTOR));}</source-code>
          </source-codes>
        </operation>
        <operation id="od6694ec06a214072b942d2f7512a5aab201" name="getStartwinkel" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return interpretCharArrayAsString(data.getData(STARTWINKEL));}</source-code>
          </source-codes>
        </operation>
        <operation id="o84bf3dbe1cef45c095c5e850ced7fdcd201" name="getAnzahlDistanceDaten" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return interpretCharArrayAsInt(data.getData(ANZAHL_DISTANCE_DATEN));}</source-code>
          </source-codes>
        </operation>
        <operation id="o660e3b6061eb432fa5c028073f3f6a4c201" name="getDistance" type="int[]" type-id="int[]" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return charArrayToIntArray(getAnzahlDistanceDaten(), DISTANCE_DATEN);}
//&lt;/editor-fold&gt;
    
    //&lt;editor-fold defaultstate="collapsed" desc="Getter_RSSI"&gt;</source-code>
          </source-codes>
        </operation>
        <operation id="oc87965057c0b4380ba6efae047e9cf55201" name="getAnzahlRssiDaten" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return interpretCharArrayAsInt(data.getData(rssiPositionCalculator(ANZAHL_RSSI_DATEN)));}</source-code>
          </source-codes>
        </operation>
        <operation id="ofe8e3401c4344dfe917d0c1548d7718a201" name="getRssiData" type="int[]" type-id="int[]" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return charArrayToIntArray(getAnzahlRssiDaten(), rssiPositionCalculator(RSSI_DATEN));}
//&lt;/editor-fold&gt;


    //&lt;editor-fold defaultstate="collapsed" desc="Private_Methods"&gt;</source-code>
          </source-codes>
        </operation>
        <operation id="o88bd39fd243b402cbff1757ee6c3d011201" name="interpretCharArrayAsInt" type="int" type-id="int" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="charArray" type="char" type-id="char" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        return (int)interpretCharArrayAsLong(charArray);}</source-code>
          </source-codes>
        </operation>
        <operation id="obf3ec55ace4e43c482025b105de88270202" name="interpretCharArrayAsString" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="charArray" type="char" type-id="char" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        String tempString = "";

        for (char dataChar : charArray){
            tempString = tempString + dataChar;}

        return tempString;}</source-code>
          </source-codes>
        </operation>
        <operation id="o3f1018286f8b42a39e3631222ba39313202" name="interpretCharArrayAsLong" type="long" type-id="long" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="charArray" type="char" type-id="char" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        long tempLong = 0;
        int dezimalValency = 1;

        for (int countFor = (charArray.length - 1); countFor &gt;= 0; countFor--)//Umgekehrte Schlaufe, damit mit Char der tiefsten Wertung begonnen wird{
            if (!(Character.isDigit(charArray[countFor)))//Check: Ist eine Zahl?{
                //throw new Exception("MeasurementValues ERROR: Es wurde versucht ein Buchstaben als Int zu interpretieren.");}

            tempLong = tempLong + Character.getNumericValue(charArray[countFor) * dezimalValency;
            dezimalValency = dezimalValency * 16;}

        return tempLong;}

    /**
     * Wandelt einen Bereich der Daten (data) in ein Int-Array um. Kann
     * verwendet werden um die Distanz- &amp; RSSI-Werte in ein Ausgabefähiges
     * Format (int) zu kopieren.
     *
     * @param number Anzahl der Daten, die in ein Int-Array kopiert werden
     * sollen
     * @param startPoint Erstes Datenfeld, dass in das Array interpretiert
     * werden soll
     * @return Interpretierte Daten
     * @throws Exception Vom Umwandeln des Char-Arrays in einen Int (Nicht
     * unterstützte Zeichen).
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o227cbc3f10bf466abaabf5b05b2463bb202" name="charArrayToIntArray" type="int[]" type-id="int[]" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="number" type="int" type-id="int" default-value="" />
            <parameter id="" name="startPoint" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        int[ tempIntArray = new int[number;
        for (int countFor = 0; countFor &lt; tempIntArray.length; countFor++){
            tempIntArray[countFor = interpretCharArrayAsInt(data.getData(startPoint + countFor));}

        return tempIntArray;}

    /**
     * Gibt die Position für die Rssi-Daten zurück und rechnet dabei die variable Anzahl von Distance-Data ein.
     * @param rssiPosition Position des Rssi-Datenfeldes relativ
     * @return Position des rssi-Datenfeldes absolut
     * @throws Exception 
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o20eacbb3fbf8408086cd537dd99508f6202" name="rssiPositionCalculator" type="int" type-id="int" visibility="private" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="rssiPosition" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        return DISTANCE_DATEN + getAnzahlDistanceDaten() + rssiPosition;}
//&lt;/editor-fold&gt;

    /*public static void main(String[] args)
     {
     int doedel = 10;
     doedel--;
     System.out.println(doedel);
     doedel--;
     System.out.println(doedel);
    
     char[] testChar = new char[]{'F', 'F'};
     try
     {
     System.out.println(interpretCharArrayAsInt(testChar));
     } catch (Exception ex)
     {
     System.out.println(ex.getMessage());
     }
    
     char[] testChar2 = new char[]{'h', 'a', 'l', 'l', 'o'};
    
     System.out.println(interpretCharAsString(testChar2));
     }*/</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di541133972102783192" cid="C036" type="class" name="DataSegment" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/27/2014 18:04:43">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="aad56a6cc25ac4506baddea946d51d09f212" name="pointer" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="a4e4b4e920cbf44f4a554dafaed328287212" name="release" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" />
        <attribute id="a1be7d5e402124a4bb963e3f1f3be76be212" name="segment" type="char[]" type-id="char[]" visibility="private" abstract="false" virtual="false" />
      </attributes>
      <operations>
        <operation id="oae02f6cac59b4467ab4f43896b28bfb2212" name="DataSegment" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="maxSize" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        segment = new char[maxSize;
        pointer = 0;
        release = false;}
    
    //Methoden</source-code>
          </source-codes>
        </operation>
        <operation id="o8bca3623b28d414a9374b2e0073cacb0213" name="addByte" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="dataChar" type="byte" type-id="byte" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        segment[pointer = (char)dataChar;//Wird direkt in Char gecastet
        pointer++;}</source-code>
          </source-codes>
        </operation>
        <operation id="ofa617ce4945d42d188b95b4f970b0155213" name="releaseSegment" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        //Anpassen der Länge des Char Arrays auf minimalgrösse
        char[ tempSegment = new char[pointer;
        for(int countFor = 0; countFor &lt;tempSegment.length; countFor++){
            tempSegment[countFor = segment[countFor;}
        segment = tempSegment;//neue Referenz für segment
        tempSegment = null;//Refernez von tempSegment löschen
        release = true;}
    
    //Getter und Setter</source-code>
          </source-codes>
        </operation>
        <operation id="ob97a022557e541bab9eba3717cf67cc2213" name="getSegment" type="char[]" type-id="char[]" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
            return segment;}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di627646184123068517" cid="C037" type="class" name="Laser" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/27/2014 18:04:43">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="acc6a9e2569e2409a9339885aecec18cc239" name="tim" type="TiM55x" type-id="TiM55x" visibility="private" abstract="false" virtual="false" />
        <attribute id="ac674f0d1b3154843a64824e9cbb98a3c239" name="data" type="DataMask" type-id="DataMask" visibility="private" abstract="false" virtual="false" />
      </attributes>
      <operations>
        <operation id="oaa172d442caf4a6c902b11463779e133239" name="getInstance" type="Laser" type-id="Class:di757239640974862321" visibility="public" abstract="false" virtual="false" static="true">
          <source-codes>
            <source-code language="Undefined">{
        if (instance == null){
            try{
                instance = new Laser();} catch (IOException ex){
                Logger.getLogger(Laser.class.getName()).log(Level.SEVERE, null, ex);}}
        return instance;}
    //&lt;editor-fold defaultstate="collapsed" desc="VARIABLEN_OBJEKTE_KONSTANTEN"&gt;

    //Objekte//Lasermessgerät//aktuelles Datenset

//&lt;/editor-fold&gt;
    //&lt;editor-fold defaultstate="collapsed" desc="KONSTRUKTOREN"&gt;
    /**
     * Standart-Konstruktor. Baut eine Verbindung auf die IP-Adresse 192.168.0.1
     * über den Port 2112 auf (Werkseinstellungen TiM).
     *
     * @throws IOException Fehler, wenn unter der IP &amp; Port kein TiM
     * angesprochen werden konnte.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oa9e5b39ae84448e888f668477507eb7e239" name="Laser" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined"> throws IOException{
        tim = new TiM55x("169.254.87.60", 2112);
        this.getNewMeasurementData();}

    /**
     * Parametrierbarer Konstruktor. Versucht eine Verbindung auf die
     * entsprechende IP-Adresse über den entsprechenden Port aufzubauen.
     *
     * @param ipAdress Adresse des TiM55x
     * @param port Ausgabeport des TiM55x
     * @throws IOException IOException Fehler, wenn unter der IP &amp; Port kein TiM
     * angesprochen werden konnte.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="of675ef2464e2425d9fcb63e2080daa65239" name="Laser" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="ipAdress" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="port" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws IOException{
        tim = new TiM55x(ipAdress, port);
        this.getNewMeasurementData();//Fehlerquelle bei Verebung --&gt; Anpassen!}
//&lt;/editor-fold&gt;

    //&lt;editor-fold defaultstate="collapsed" desc="PUBLIC_METHODEN"&gt;
    /**
     * Es wird eine neue Messung getätigt und die Messdaten im internen Buffer
     * gespeichert.
     *
     * @throws IOException Probleme mit der Verbindung zum TiM
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o38da44c5f5824dc7a9f4f15edc04246c239" name="getNewMeasurementData" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined"> throws IOException{
        data = tim.singleMeassurement();}

    /**
     * Prüfen, ob in einer bestimmten Richtung keine Reflektion unterhalb einer
     * gegebenen Grenzen auftritt. Arbeitet mit den im internen Buffer
     * gespeicherten Messdaten.
     *
     * @param angle Richtungh in Grad. (Erlaubter Range: -135 bis +135)
     * @param distance Grenze in mm
     * @return wenn true = keine Reflektion, wenn false = Reflektion vorhanden
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o4d44ac4cf5f9488fb8dc631147678375239" name="directionFree" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="angle" type="int" type-id="int" default-value="" />
            <parameter id="" name="distance" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        if (checkAngleRange(angle) &amp;&amp; checkDistanceRange(0, 8000, distance))//Gültigkeitsprüfung{
            if (this.getDistance(angle) &gt;= distance || this.getDistance(angle) == 0)//Sonderfall: Wenn 0 = Keine Reflektion vorhanden Out of Range{
                return true;}}
        return false;}

    /**
     * Abfragen eines Distanzwertes im gegebenen Winkel. Liest die Daten aus dem internen Buffer aus.
     * @param angle Richtungh in Grad. (Erlaubter Range: -135 bis +135)
     * @return Distanzwert in mm. Falls = 0 ist keine Reflektion vorhanden. Falls = -1 ist der übergenen Winkel nicht erlaubt.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o563651c86e114c10bfab413dfb90706d239" name="getDistance" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="angle" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        if (checkAngleRange(angle)){
            return data.getDistance()[clientAngleToIndex(angle);}
        else{
            return -1;//Angle not in Range}}

    /**
     * Abfragen eines Reflektionwertes im gegebenen Winkel. Liest die Daten aus dem internen Buffer aus.
     * @param angle Richtungh in Grad. (Erlaubter Range: -135 bis +135)
     * @return Wert im Range 0 - 255. Falls = -1 ist der übergenen Winkel nicht erlaubt.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o28ced259fc074268bc4f7d2173ed8b5b239" name="getReflection" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="angle" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        if (checkAngleRange(angle)){
            return data.getRssiData()[clientAngleToIndex(angle);}
        else{
            return -1;//Angle not in Range}}
//&lt;/editor-fold&gt;

    //&lt;editor-fold defaultstate="collapsed" desc="PRIVATE_METHODEN"&gt;</source-code>
          </source-codes>
        </operation>
        <operation id="o38a9369d76294c039a33d17b751009cc239" name="clientAngleConverter" type="int" type-id="int" visibility="private" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="angle" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        return angle + 90;}</source-code>
          </source-codes>
        </operation>
        <operation id="o48ee4158131c43829cd35ac9e3110ffb240" name="clientAngleToIndex" type="int" type-id="int" visibility="private" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="angle" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        return clientAngleConverter(angle) + 45;}</source-code>
          </source-codes>
        </operation>
        <operation id="o106d5f5455a24ff09524706e46c18521240" name="checkAngleRange" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="angle" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        int range = 135;//Symetrisch
        return !(angle &lt; -range &amp;&amp; angle &gt; range);}</source-code>
          </source-codes>
        </operation>
        <operation id="oa5841cb67b014485ae8a11c8801ecf36240" name="checkDistanceRange" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="min" type="int" type-id="int" default-value="" />
            <parameter id="" name="max" type="int" type-id="int" default-value="" />
            <parameter id="" name="distance" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        return (distance &gt;= min &amp;&amp; distance &lt;= max);}
//&lt;/editor-fold&gt;</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di265950640429671675" cid="C038" type="class" name="MainTester" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/27/2014 18:04:43">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="o8b063576b9de4beca38a98a5846f3558248" name="main" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
       
                 tim = Laser.getInstance();
            
            System.out.println("Messwert: " + tim.getDistance(0));
            System.out.println("Reflektion: " + tim.getReflection(0));
            System.out.println("Grenze 5m: " + tim.directionFree(0, 5000));
            System.out.println("Grenze 30cm: " + tim.directionFree(0, 300));
            
            /*try
            {
            TiM55x Tim = new TiM55x("192.168.0.1", 2112);
            DataMask data = Tim.singleMeassurement();
            System.out.println("Anzahl Daten: " + data.getAnzahlDistanceDaten());
            
            int[] distance = data.getDistance();
            
            for(int countFor = 0; countFor &lt; distance.length; countFor++)
            {
            System.out.println(countFor + ". Distanz: " + distance[countFor]);
            }
            
            System.out.println("Startwinkel: " + data.getStartwinkel());
            
            int[] rssi = data.getRssiData();
            
            for(int countFor = 0; countFor &lt; rssi.length; countFor++)
            {
            System.out.println(countFor + ". RSSI: " + rssi[countFor]);
            }
            
            } catch (IOException ex)
            {
            Logger.getLogger(MainTester.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex)
            {
            Logger.getLogger(MainTester.class.getName()).log(Level.SEVERE, null, ex);
            }*/}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di262197235375173024" cid="C039" type="class" name="TiM55x" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/27/2014 18:04:43">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a4152d82e622e4468a9b57abe00e0b300258" name="TiM_Com" type="Communication" type-id="Communication" visibility="private" abstract="false" virtual="false" />
        <attribute id="ac86febbd23284fb7b5c7a8de1d8b46b1258" name="TiM_BasicInt" type="BasicInterpreter" type-id="BasicInterpreter" visibility="private" abstract="false" virtual="false" />
      </attributes>
      <operations>
        <operation id="o581d2f980b4e4b4290e28a38a57e1f22259" name="TiM55x" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="ipAdress" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="port" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws IOException{
        TiM_Com = new Communication(ipAdress, port);
        TiM_BasicInt = new BasicInterpreter();}
    
    //Messmethoden</source-code>
          </source-codes>
        </operation>
        <operation id="o792b943c49054565b7855db2d7cd851e259" name="singleMeassurement" type="DataMask" type-id="DataMask" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined"> throws IOException{
        TiM_Com.singleMeasurement(TiM_BasicInt);
        return new DataMask(TiM_BasicInt.getMeasurementData());}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di817694243310774422" cid="C040" type="class" name="InterfacePanel" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/27/2014 18:04:43">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="acaf609d3e74b4b53ade7773e4761924e286" name="logText" type="JTextArea" type-id="JTextArea" visibility="public" abstract="false" virtual="false" />
        <attribute id="a157ea3dd8d4d4c23a9f1600facd324b0286" name="scrollPane" type="JScrollPane" type-id="JScrollPane" visibility="package" abstract="false" virtual="false" />
        <attribute id="a7fcafb2e30364a378a411a00e0bb7030286" name="pointText" type="JTextArea" type-id="JTextArea" visibility="package" abstract="false" virtual="false" />
        <attribute id="aa8c57f1915c1493f9222fb29d2b44046286" name="stateText" type="JTextArea" type-id="JTextArea" visibility="package" abstract="false" virtual="false" />
        <attribute id="afd7b4cee1b5d406bb495f9662428ab6a287" name="phaseText" type="JTextArea" type-id="JTextArea" visibility="package" abstract="false" virtual="false" />
        <attribute id="a94d2db25119c4925870d004c7229a95a287" name="timeText" type="JTextArea" type-id="JTextArea" visibility="package" abstract="false" virtual="false" />
        <attribute id="a500e796fe4994481b9211b9359f05682287" name="logLabel" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="ac9e4b733dd43467497165d68cca1779d287" name="pointLabel" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="ac4baaa93847e418e984f3074620bd69a287" name="stateLabel" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="a27ddaf6c86094147bcae2dd1506677d7287" name="phaseLabel" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="a9a117df5c85043b8b5ae5db41f584671287" name="timeLabel" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="a5d5c8d0ba4d14459ae16dc2431ae0f07287" name="m1Label" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="a52d1f0844d2841b497ce4757d78009a6287" name="m2Label" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="a6ae3e257c8c64564bc9462f0130103fe287" name="m3Label" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="a0c1155f58c7f4cffbf9169648475dea0287" name="m4Label" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="aa985b8adf4a948dda3a4b2d4793ca906287" name="m5Label" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="af7487d922c5044e787000276a953a733287" name="m6Label" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="a7dad2f94370d46e19ff3f84ea6a93951287" name="m7Label" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="a7b7a4daa98bf45f3ba54fe99143a1ed4287" name="m8Label" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="aa31fe0b2d5c044268146b938225e86a6287" name="m9Label" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="ac192a82d70d7480ea4461cdaca2be437287" name="m10Label" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="a200a652bcea34c0cb653220f2ccb6509287" name="start" type="JButton" type-id="JButton" visibility="package" abstract="false" virtual="false" />
        <attribute id="a79e9318137c048ce84f325897a422d79287" name="stop" type="JButton" type-id="JButton" visibility="package" abstract="false" virtual="false" />
      </attributes>
      <operations>
        <operation id="odad72bf2572d4d67bbfa6c263f695752288" name="InterfacePanel" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="x" type="int" type-id="int" default-value="" />
            <parameter id="" name="y" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        setLayout(null);
        setSize(x, y);
        setLocation(0, 0);
        setBackground(Color.lightGray);

        /*
         m1Label = new JLabel("PUNKTE:");
         pointLabel.setSize(100, 45);
         pointLabel.setLocation(120, 0);
         */
        logText = new JTextArea();
        logText.setLineWrap(true);
        logText.setEditable(false);
        logText.setVisible(true);

        pointLabel = new JLabel("PUNKTE:");
        pointLabel.setSize(100, 45);
        pointLabel.setLocation(120, 0);

        pointText = new JTextArea();
        pointText.setLineWrap(true);
        pointText.setEditable(false);
        pointText.setVisible(true);
        pointText.setSize(100, 25);
        pointText.setLocation(120, 30);

        stateLabel = new JLabel("STATE:");
        stateLabel.setSize(100, 45);
        stateLabel.setLocation(10, 0);

        stateText = new JTextArea();
        stateText.setLineWrap(true);
        stateText.setEditable(false);
        stateText.setVisible(true);
        stateText.setSize(100, 25);
        stateText.setLocation(10, 30);

        phaseLabel = new JLabel("PHASE:");
        phaseLabel.setSize(100, 45);
        phaseLabel.setLocation(10, 50);

        phaseText = new JTextArea();
        phaseText.setLineWrap(true);
        phaseText.setEditable(false);
        phaseText.setVisible(true);
        phaseText.setSize(100, 25);
        phaseText.setLocation(10, 80);

        timeLabel = new JLabel("PHASE TIME:");
        timeLabel.setSize(100, 45);
        timeLabel.setLocation(10, 100);

        timeText = new JTextArea();
        timeText.setLineWrap(true);
        timeText.setEditable(false);
        timeText.setVisible(true);
        timeText.setSize(100, 25);
        timeText.setLocation(10, 130);

        start = new JButton();
        start.setText("START");
        start.setSize(100, 50);
        start.setLocation(10, 340);
        start.addMouseListener(this);

        stop = new JButton();
        stop.setText("STOP");
        stop.setSize(100, 50);
        stop.setLocation(110, 340);
        stop.addMouseListener(this);

        scrollPane = new JScrollPane(logText);
        scrollPane.setSize(370, 350);
        scrollPane.setLocation(400, 50);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);

        logLabel = new JLabel("LOG:");
        logLabel.setSize(100, 45);
        logLabel.setLocation(400, 10);

        add(stop);
        add(pointLabel);
        add(pointText);
        add(phaseLabel);
        add(stateLabel);
        add(timeLabel);
        add(logLabel);
        add(start);
        add(scrollPane, BorderLayout.CENTER);
        add(stateText);
        add(phaseText);
        add(timeText);
        setVisible(true);}

    /**
     *
     * @param in Schreibt die mitgegebene Nachricht in das Log-Fenster
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ocd0b0ab7253f4a01a0f9f3156b2b9f66288" name="printLog" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="in" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{       
        // Schreibt eine Nachricht in das Log-Fenster
        logText.append(in + "\n");
        scrollDown();}</source-code>
          </source-codes>
        </operation>
        <operation id="o37a41787f7a5440d8f69a95634f24421288" name="scrollDown" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        /*
         int max;
   
         max = scrollPane.getVerticalScrollBar().getMaximum();
         scrollPane.getVerticalScrollBar().setValue( max );
         scrollPane.repaint();
         */}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oeb877e84fcd041d0ba580110538b2cf7288" name="mouseClicked" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="e" type="MouseEvent" type-id="MouseEvent" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        if (e.getButton() == MouseEvent.BUTTON1){
            if (e.getClickCount() == 1){
                // connect
                if (e.getSource() == start){
                    try{
                        Main.startServer();} catch (InterruptedException ex){
                        Logger.getLogger(InterfacePanel.class.getName()).log(Level.SEVERE, null, ex);} catch (IOException ex){
                        Logger.getLogger(InterfacePanel.class.getName()).log(Level.SEVERE, null, ex);}}

                // disconect
                if (e.getSource() == stop){
                    Main.stopServer();}}}}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o7b756ca8da8f46909320c7842a399047288" name="mousePressed" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="e" type="MouseEvent" type-id="MouseEvent" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o56799bc2cf984b07b76d674f3120a10f288" name="mouseReleased" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="e" type="MouseEvent" type-id="MouseEvent" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o4f5acdea1ed24ea0a16006abd6ffa75b288" name="mouseEntered" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="e" type="MouseEvent" type-id="MouseEvent" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o23a0dcc98c6c4b84b6286ac339a5828f288" name="mouseExited" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="e" type="MouseEvent" type-id="MouseEvent" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o381d67cc75354cbc802e99de86a621c9288" name="stateChanged" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="e" type="ChangeEvent" type-id="ChangeEvent" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o6ad9e0ac8082483bae945bd208be68ab288" name="update" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="o" type="Observable" type-id="Observable" default-value="" />
            <parameter id="" name="arg" type="Object" type-id="Uml.Object" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        String[ send = (String[) arg;

        String gamePoints = send[0;
        String gamePhase = send[1;
        String gameState = send[2;
        String gameTime = send[3;
        
        printLog(send[5);

        pointText.setText(gamePoints);
        phaseText.setText(gamePhase);
        stateText.setText(gameState);
        timeText.setText(gameTime);}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di513980495205170134" cid="C041" type="class" name="RefboxFrame" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/27/2014 18:04:43">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a9a9bc93740f6474aa2bfd1d0b9911733296" name="sizeX" type="int" type-id="int" visibility="package" abstract="false" virtual="false" default-value="400" />
        <attribute id="a00df08c374184f27bde9bbb5134667d8296" name="sizeY" type="int" type-id="int" visibility="package" abstract="false" virtual="false" default-value="400" />
        <attribute id="aaca06a501fc14cf4bff6f0ecb13f5532296" name="applikation" type="JFrame" type-id="JFrame" visibility="package" abstract="false" virtual="false" />
        <attribute id="aa25928a656b84d028cc3284eb609db4c296" name="container" type="Container" type-id="Container" visibility="package" abstract="false" virtual="false" />
        <attribute id="a87fd4ea7a4844bf7b0c1aefc42693998296" name="panel" type="RefboxPanel" type-id="RefboxPanel" visibility="public" abstract="false" virtual="false" />
      </attributes>
      <operations>
        <operation id="o3b6d1ffb8ec64b66b7e441f404f9a530296" name="RefboxFrame" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="interfacePanel" type="InterfacePanel" type-id="InterfacePanel" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
          applikation = new JFrame("Refbox");
          container = applikation.getContentPane();
          
          panel = new RefboxPanel(sizeX, sizeY, this, interfacePanel);
      
          
          applikation.setSize(sizeX, sizeY);
          applikation.setLocation(100, 100);
          
          applikation.add(panel);
          applikation.setVisible(true);}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o3deaae90e1f64960ae09aa4257a4acd7296" name="actionPerformed" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="e" type="ActionEvent" type-id="ActionEvent" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di820478336170901562" cid="C042" type="class" name="RefboxPanel" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/27/2014 18:04:43">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a778c83d5da034c4a852969d851a84b56313" name="frame" type="RefboxFrame" type-id="RefboxFrame" visibility="package" abstract="false" virtual="false" />
        <attribute id="a87531ef4acfd4f1ca6bb8034e5274e60313" name="interfacePanel" type="InterfacePanel" type-id="InterfacePanel" visibility="package" abstract="false" virtual="false" />
      </attributes>
      <operations>
        <operation id="o546c1a75ba464affbc093fd55f75d5ff313" name="JTextField" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">
    JTextField port = new</source-code>
          </source-codes>
        </operation>
        <operation id="o8a261c1802554d82b87983011c2d1df8313" name="JTextField" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">
    JTextField roboname = new</source-code>
          </source-codes>
        </operation>
        <operation id="o0b256d95f3fb4e8ea057db9c6e218e12313" name="JTextField" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">

    JButton ok = new</source-code>
          </source-codes>
        </operation>
        <operation id="o84a56b5affa545aebdb3a68bb0f5339a313" name="JButton" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <source-codes />
        </operation>
        <operation id="o9849d3a3043f48c282fa6efd1ca88b4b313" name="RefboxPanel" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="sizeX" type="int" type-id="int" default-value="" />
            <parameter id="" name="sizeY" type="int" type-id="int" default-value="" />
            <parameter id="" name="frame" type="RefboxFrame" type-id="RefboxFrame" default-value="" />
            <parameter id="" name="interfacePanel" type="InterfacePanel" type-id="InterfacePanel" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.interfacePanel = interfacePanel;
        this.frame = frame;

        setLayout(null);
        setLocation(0, 0);
        setSize(sizeX, sizeY);
        setBackground(Color.ORANGE);

        ip.setText(Main.refBoxIp);
        ip.setLocation(200, 100);
        ip.setSize(180, 40);

        port.setText(Main.refBoxPortIn + "");
        port.setLocation(200, 150);
        port.setSize(180, 40);

        roboname.setText(Main.name);
        roboname.setLocation(200, 200);
        roboname.setSize(180, 40);

        portLabel.setSize(100, 45);
        portLabel.setLocation(100, 150);

        nameLabel.setSize(100, 45);
        nameLabel.setLocation(100, 200);

        ipLabel.setSize(100, 45);
        ipLabel.setLocation(100, 100);

        ok.setText("OK");
        ok.setSize(100, 50);
        ok.setLocation(10, 320);
        ok.addMouseListener(this);

        add(roboname);
        add(nameLabel);
        add(port);
        add(portLabel);
        add(ipLabel);
        add(ip);
        add(ok);
        setVisible(true);}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o44bfe41fbfed40aebcaf9207561f7139313" name="mouseClicked" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="e" type="MouseEvent" type-id="MouseEvent" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{

        if (e.getButton() == MouseEvent.BUTTON1){

            if (e.getClickCount() == 1){

                // Zulaufventil
                if (e.getSource() == ok){
                    try{
                        Main.setIpRefbox(ip.getText());
                        Main.setNameRobo(roboname.getText());
                        frame.applikation.dispose();
                        interfacePanel.printLog("Refbox-IP wurde auf " + Main.refBoxIp + ":" + Main.refBoxPortIn + " geändert!");} catch (IOException ex){}}}}}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="of8a4268b9a1c4c698062c138add40150313" name="mousePressed" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="e" type="MouseEvent" type-id="MouseEvent" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o17adce1e16aa4c159e1495b566b7d616313" name="mouseReleased" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="e" type="MouseEvent" type-id="MouseEvent" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o841f78a679344a12ad266a1d88f49e19313" name="mouseEntered" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="e" type="MouseEvent" type-id="MouseEvent" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o098923bfa5394d1896746c286f01db8f313" name="mouseExited" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="e" type="MouseEvent" type-id="MouseEvent" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di765611236651850310" cid="C043" type="class" name="UserFrame" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/27/2014 18:04:43">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a9aee38a3829f4ff1b0b298a60d4aa3af325" name="sizeX" type="int" type-id="int" visibility="package" abstract="false" virtual="false" default-value="800" />
        <attribute id="aa6dab60e28c047298e7d5dfd292a86ac325" name="sizeY" type="int" type-id="int" visibility="package" abstract="false" virtual="false" default-value="500" />
        <attribute id="a571dce55e8ee43ed8bf8093cd8f0b17b325" name="application" type="JFrame" type-id="JFrame" visibility="package" abstract="false" virtual="false" />
        <attribute id="a5c4d397d53ce494d947dd0940f4dcf5a325" name="container" type="Container" type-id="Container" visibility="package" abstract="false" virtual="false" />
        <attribute id="ac5149d370bb94f238987e33ac343bc82325" name="menuBar" type="JMenuBar" type-id="JMenuBar" visibility="package" abstract="false" virtual="false" />
        <attribute id="a0013cea74b6748659920dbe30ae10ea8325" name="opt" type="RefboxFrame" type-id="RefboxFrame" visibility="public" abstract="false" virtual="false" />
        <attribute id="ac21df51ee70c43cc8a779bd2bb9e16fc325" name="panel" type="InterfacePanel" type-id="InterfacePanel" visibility="public" abstract="false" virtual="false" />
      </attributes>
      <operations>
        <operation id="oafe017e059bd4139b95e6f5cbfbb44f4326" name="UserFrame" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        application = new JFrame("ServerSolidus");
        container = application.getContentPane();

        // Menüleiste erzeugen
        menuBar = new JMenuBar();

        // Menüelemente erzeugen
        fileMenu = new JMenu("Datei");
        optMenu = new JMenu("Optionen");

        // Untermenüelemente erzeugen
        exitItem = new JMenuItem("Beenden");
        exitItem.addActionListener(this);
        refboxItem = new JMenuItem("Refbox");
        refboxItem.addActionListener(this);
        roboItem = new JMenuItem("Robotino");
        roboItem.addActionListener(this);

        // Menüelemente hinzufügen
        menuBar.add(fileMenu);
        menuBar.add(optMenu);

        // Untermenüelemente hinzufügen
        fileMenu.add(exitItem);
        optMenu.add(refboxItem);
        optMenu.add(roboItem);

        // Textfeld erzeugen
        application.add(menuBar, BorderLayout.NORTH);
        application.setSize(sizeX, sizeY);
        application.setLocation(100, 100);
        application.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        panel = new InterfacePanel(sizeX, sizeY);

        application.add(panel);
        application.setVisible(true);}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o39394b7611994c68aef83eacf4a7c2f4326" name="actionPerformed" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="object" type="ActionEvent" type-id="ActionEvent" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{

        if (object.getSource() == exitItem){
            System.exit(0);}
        if (object.getSource() == refboxItem){
            opt = new RefboxFrame(panel);}
        if (object.getSource() == roboItem){}}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di294781392378462773" cid="C044" type="class" name="Cell" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/27/2014 18:04:43">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a18df1910b7a04248b67bd77f919c9777345" name="free" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" default-value="true" />
        <attribute id="a76d21956da91499ea2972a7be55adea5345" name="direction" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="a4866bbe36feb4752aa159e7dd0a60790345" name="x" type="int" type-id="int" visibility="private" abstract="false" virtual="false" default-value="0" />
        <attribute id="a710adc73c0bb4fe397e12a846ce204b1345" name="y" type="int" type-id="int" visibility="private" abstract="false" virtual="false" default-value="0" />
        <attribute id="a8883f5d5a74a431fbeb3445ae6fe4d63345" name="id" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" />
        <attribute id="adf124eef741e46b0824b900f375499b5345" name="mTyp" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" default-value="null" />
      </attributes>
      <operations>
        <operation id="od50cd5df00a141298e5b1ee77b585471345" name="Cell" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="x" type="int" type-id="int" default-value="" />
            <parameter id="" name="y" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.x = x;
        this.y = y;}</source-code>
          </source-codes>
        </operation>
        <operation id="o1b38f8a8116b4693bdcec52fec90a2ba345" name="isFree" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return free;}</source-code>
          </source-codes>
        </operation>
        <operation id="obbe3267704bf4bd3ace5423b435fe4bb345" name="setFree" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="free" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.free = free;}</source-code>
          </source-codes>
        </operation>
        <operation id="o7ce96b26985b447dacf6bc96a33adc7a346" name="getDirection" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return direction;}</source-code>
          </source-codes>
        </operation>
        <operation id="o8752791af9cb4fbf8261ae5b4677277a346" name="getRealY" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return realY;}</source-code>
          </source-codes>
        </operation>
        <operation id="o865526602af348a48cb9ff735a897685346" name="setRealY" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="realY" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.realY = realY;}</source-code>
          </source-codes>
        </operation>
        <operation id="o3b8c09ab67f244079b51cdbc47fed057346" name="getRealX" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return realX;}</source-code>
          </source-codes>
        </operation>
        <operation id="o7caecd571fbb4c9f85ce4eaf7af72bdd346" name="setRealX" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="realX" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.realX = realX;}</source-code>
          </source-codes>
        </operation>
        <operation id="odc595fb37e524650846ab035b41cf699346" name="setDirection" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="direction" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.direction = direction;}</source-code>
          </source-codes>
        </operation>
        <operation id="o0971abb5055a4e9caa796c7a877f9df5346" name="getX" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return x;}</source-code>
          </source-codes>
        </operation>
        <operation id="o63e846ae6d374707b1d7e88cdefe472c346" name="setX" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="xval" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.x = xval;}</source-code>
          </source-codes>
        </operation>
        <operation id="o7c1902264dce4f55aeac513b3e05866f346" name="getY" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return y;}</source-code>
          </source-codes>
        </operation>
        <operation id="o8b8d9b2251fd451d9f0de2ce254d90a2346" name="setY" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="yval" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.y = yval;}</source-code>
          </source-codes>
        </operation>
        <operation id="o0b70225bcb7a41958e5edd86b5932a6a346" name="getId" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return id;}</source-code>
          </source-codes>
        </operation>
        <operation id="o548dec31c0dd47c18ed842c429854437346" name="setId" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="id" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.id = id;}</source-code>
          </source-codes>
        </operation>
        <operation id="o3200be6469684297ad979bc4f3a474d9346" name="getMachineNr" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return Integer.parseInt(id.substring(1));  //Cut the first letter}</source-code>
          </source-codes>
        </operation>
        <operation id="oa253989110c54ab6bd23ef8ae100fdf8346" name="getmTyp" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return mTyp;}</source-code>
          </source-codes>
        </operation>
        <operation id="o856067a552054859a6fa49963b2a2a78346" name="setmTyp" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="mTyp" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.mTyp = mTyp;}</source-code>
          </source-codes>
        </operation>
        <operation id="o325ffea06aaa45c0aa64b0b402d125a8346" name="paint" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="g" type="Graphics" type-id="Graphics" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        if (free == true){
            g.setColor(Color.LIGHT_GRAY);} else{
            g.setColor(Color.red);}
        g.fillRect(0, 0, 50, 50);

        if (free == false &amp;&amp; direction == WEST){
            g.setColor(Color.BLACK);
            g.drawLine(15, 25, 35, 25); // start x,y ende x,y
            g.drawLine(25, 15, 25, 25);}
        if (free == false &amp;&amp; direction == EAST){
            g.setColor(Color.BLACK);
            g.drawLine(15, 25, 35, 25); // ---
            g.drawLine(25, 25, 25, 35);   // |}

        if (free == false &amp;&amp; direction == NORTH){
            g.setColor(Color.BLACK);
            g.drawLine(25, 25, 35, 25); // ---
            g.drawLine(25, 15, 25, 35);   // |}

        if (free == false &amp;&amp; direction == SOUTH){
            g.setColor(Color.BLACK);
            g.drawLine(15, 25, 25, 25); // ---
            g.drawLine(25, 15, 25, 35);   // |}
        if (!free){
            g.drawString(getDirLetter(), 35, 48);}
        g.setColor(Color.black);
        g.drawString(x + "/" + this.y, 5, 13);
        g.drawString(this.id, 5, 48);}</source-code>
          </source-codes>
        </operation>
        <operation id="o7b28c0b642494653a2fe284d4cc2eb43346" name="getDirLetter" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return getDirLetterFromPhi(direction);}</source-code>
          </source-codes>
        </operation>
        <operation id="o93e210dc15d847fa891f90597ffe574b346" name="getDirLetterFromPhi" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="direction" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        switch (direction){
            case 0:
                return "W";
            case 90:
                return "N";
            case 180:
                return "E";
            case 270:
                return "S";
            default:
                return "?";}}</source-code>
          </source-codes>
        </operation>
        <operation id="o8703fbf743ad48e1a8a7210fee903a28347" name="getPhiFromDirLetter" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="letter" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        switch (letter){
            case "W":
                return 0;
            case "N":
                return 90;
            case "E":
                return 180;
            case "S":
                return 270;
            default:
                return -1;}}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di779361365749906289" cid="C045" type="class" name="FieldCommander" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/27/2014 18:04:43">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a4798bde5680448a1bd01156479f3e334381" name="county" type="int" type-id="int" visibility="package" abstract="false" virtual="false" default-value="0" />
        <attribute id="acca3551ebd314b6eb06a4920299f1593381" name="countx" type="int" type-id="int" visibility="package" abstract="false" virtual="false" default-value="0" />
      </attributes>
      <operations>
        <operation id="obed7ede405ff48f6bf98e6e71256cfe4381" name="HashMap" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">    //Map for Machine-ID-Access

    /**
    * Singleton Pattern Constructor
    * @return the only instance to FieldCommander 
    */</source-code>
          </source-codes>
        </operation>
        <operation id="oa793f5d01f2a4f30b90cd5038a005076381" name="getInstance" type="FieldCommander" type-id="FieldCommander" visibility="public" abstract="false" virtual="false" static="true">
          <source-codes>
            <source-code language="Undefined">{
      if(instance==null){
        instance=new FieldCommander();}
      return instance;}</source-code>
          </source-codes>
        </operation>
        <operation id="obe169e8ad50b44c5a02966c57a49b44f381" name="FieldCommander" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        initFieldModel();
        initFieldGraphic();}</source-code>
          </source-codes>
        </operation>
        <operation id="o1639f0d3d76f4ffe8573a0698347fe6f381" name="initFieldGraphic" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        this.setLayout(null);
        this.setSize(1250, 700);
        this.addWindowListener(new WindowAdapter(){
            @Override
            public void windowClosing(WindowEvent e){
                System.exit(0);}});}</source-code>
          </source-codes>
        </operation>
        <operation id="o338529425dcb4607a399feef07b936b6381" name="initFieldModel" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        //&lt;editor-fold defaultstate="collapsed" desc="free cell definitions"&gt;
        for (int y = starty + 31; y &lt; 563; y = y + 56) // 50 von oben weg und dann in 56er schritten weiter{
            for (int x = 50 + 34; x &lt; 563 + startx - 50; x = x + 56) // 50 von der Seite weg und dann in 56er schritten{
                cell[countx[county = new Cell(countx, county);
                cell[countx[county.setLayout(null);
               // cell[countx][county].setX(x);
               // cell[countx][county].setY(y);
                cell[countx[county.setRealX(-(x + 25 - startx) * 10); // effektiver x wert setzten
                cell[countx[county.setRealY((y + 25 - starty) * 10); // effektiver y wert setzen
                cell[countx[county.setLocation(x, y); // hier gibst du lediglich den Offset von der Seite aus an
                cell[countx[county.setSize(50, 50); // hier die grösse des Panels ( da eine Zelle 0,5 m gross ist 50
                cell[countx[county.setId("");
                this.add(cell[countx[county);
                countx++;}
            countx = 0;
            county++;}
//&lt;/editor-fold&gt;

        //&lt;editor-fold defaultstate="collapsed" desc="Machine Definitions"&gt;
        setCell(10, 2, "M13", false, WEST);
        machineMap.put("M13", cell[10[2);

        setCell(10, 4, "M14", false, EAST);
        machineMap.put("M14", cell[10[4);

        setCell(10, 8, "R2", false, NORTH);
        machineMap.put("R2", cell[10[8);

        setCell(12, 2, "M15", false, NORTH);
        machineMap.put("M15", cell[12[2);

        setCell(12, 4, "M16", false, SOUTH);
        machineMap.put("M16", cell[12[4);
        setCell(12, 6, "M17", false, SOUTH);
        machineMap.put("M17", cell[12[6);

        setCell(14, 2, "M18", false, EAST);
        machineMap.put("M18", cell[14[2);

        setCell(14, 6, "M19", false, WEST);
        machineMap.put("M19", cell[14[6);

        setCell(14, 8, "M20", false, SOUTH);
        machineMap.put("M20", cell[14[8);
        setCell(16, 2, "M21", false, NORTH);
        machineMap.put("M21", cell[16[2);

        setCell(16, 4, "M22", false, EAST);
        machineMap.put("M22", cell[16[4);

        setCell(16, 8, "M23", false, WEST);
        machineMap.put("M23", cell[16[8);

        setCell(18, 8, "M24", false, WEST);
        machineMap.put("M15", cell[18[8);

        setCell(8, 2, "M1", false, WEST);
        machineMap.put("M1", cell[8[2);

        setCell(8, 4, "M2", false, EAST);
        machineMap.put("M2", cell[8[4);

        setCell(8, 8, "R1", false, SOUTH);
        machineMap.put("R1", cell[8[8);

        setCell(6, 2, "M3", false, SOUTH);
        machineMap.put("M3", cell[6[2);

        setCell(6, 4, "M4", false, NORTH);
        machineMap.put("M4", cell[6[4);

        setCell(6, 6, "M5", false, NORTH);
        machineMap.put("M5", cell[6[6);

        setCell(4, 2, "M6", false, EAST);
        machineMap.put("M6", cell[4[2);

        setCell(4, 6, "M7", false, WEST);
        machineMap.put("M7", cell[4[6);

        setCell(4, 8, "M8", false, NORTH);
        machineMap.put("M8", cell[4[8);

        setCell(0, 8, "M12", false, WEST);
        machineMap.put("M12", cell[0[8);

        setCell(2, 2, "M9", false, SOUTH);
        machineMap.put("M9", cell[2[2);

        setCell(2, 4, "M10", false, EAST);
        machineMap.put("M10", cell[2[4);

        setCell(2, 8, "M11", false, WEST);
        machineMap.put("M11", cell[2[8);
        
        
        setCell(6,0,"P1",true,EAST);
        setCell(12,0,"P2",true,EAST);// Puck cells
//&lt;/editor-fold&gt;}</source-code>
          </source-codes>
        </operation>
        <operation id="oc4abea24faf540978b26e9dc5fc8e7c5384" name="setCell" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="x" type="int" type-id="int" default-value="" />
            <parameter id="" name="y" type="int" type-id="int" default-value="" />
            <parameter id="" name="id" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="free" type="boolean" type-id="boolean" default-value="" />
            <parameter id="" name="dir" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        cell[x[y.setId(id);
        cell[x[y.setFree(free);
        cell[x[y.setDirection(dir);}</source-code>
          </source-codes>
        </operation>
        <operation id="oa9511bc163b44cedabb38dd02e3db3b1385" name="paint" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="g" type="Graphics" type-id="Graphics" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        g.setColor(Color.red);
        // Field Frame
        g.drawRect(startx, starty, 563, 563);
        g.drawRect(50, 50, 563, 563);

        // Pucks symbolisch
        g.fillOval(395 + 50 - 10, 50 + 10, 20, 20);
        g.fillOval(50 + 731 - 10, 50 + 10, 20, 20);
        
        //&lt;editor-fold defaultstate="collapsed" desc="Delivery Gates"&gt;
        g.setColor(Color.black);
        g.drawLine(50 + 20, 50 + 280, 50 + 35, 50 + 280);
        g.drawLine(50 + 20, 50 + 270, 50 + 20, 50 + 290);
        g.drawString("D1", 50 + 2, 50 + 250);

        g.drawLine(50 + 20, 50 + 245, 50 + 35, 50 + 245);
        g.drawLine(50 + 20, 50 + 235, 50 + 20, 50 + 255);
        g.drawString("D2", 50 + 2, 50 + 285);

        g.drawLine(50 + 20, 50 + 315, 50 + 35, 50 + 315);
        g.drawLine(50 + 20, 50 + 305, 50 + 20, 50 + 325);
        g.drawString("D3", 50 + 2, 50 + 320);

        g.drawLine(50 + 1125 - 20, 50 + 280, 50 + 1125 - 35, 50 + 280);
        g.drawLine(50 + 1125 - 20, 50 + 270, 50 + 1125 - 20, 50 + 290);
        g.drawString("D4", 50 + 1108, 50 + 250);

        g.drawLine(50 + 1125 - 20, 50 + 245, 50 + 1125 - 35, 50 + 245);
        g.drawLine(50 + 1125 - 20, 50 + 235, 50 + 1125 - 20, 50 + 255);
        g.drawString("D5", 50 + 1108, 50 + 285);

        g.drawLine(50 + 1125 - 20, 50 + 315, 50 + 1125 - 35, 50 + 315);
        g.drawLine(50 + 1125 - 20, 50 + 305, 50 + 1125 - 20, 50 + 325);
        g.drawString("D6", 50 + 1108, 50 + 320);
//&lt;/editor-fold&gt;}</source-code>
          </source-codes>
        </operation>
        <operation id="o60ad0dd6d5b64f989a806bd2310fd6e5385" name="main" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        FieldCommander f = new FieldCommander();

        f.setVisible(true);
        System.out.println(f.cell[5[1.getRealX());
            System.out.println(f.cell[5[1.getRealY());
// hier kann die Mittelpunktkoordianten des Panels abgefragt werden ( evtl brauchen wir noch eine Variable mehr mit dem Effektivwert )
        System.out.println(f.cell[5[4.getRealX());
            System.out.println(f.cell[5[4.getRealY());
       // System.out.println(f.cell[0][0].getRealY());
        //System.out.println(f.cell[0][0].getRealX());}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di816473057464069487" cid="C046" type="class" name="ComView" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/27/2014 18:04:43">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a6e6b557097204bfb9bedec2130d3015b407" name="counter" type="int" type-id="int" visibility="package" abstract="false" virtual="false" default-value="0" />
        <attribute id="af429978b7fe14c56b83bfdef493a15c3407" name="com" type="UDPServer" type-id="UDPServer" visibility="package" abstract="false" virtual="false" />
        <attribute id="a40c5f3c252a3451691473b98d7655b10407" name="serverSocket" type="DatagramSocket" type-id="DatagramSocket" visibility="package" abstract="false" virtual="false" />
        <attribute id="a8eaecfa6e7b44cfbaa096e6c4684f84b407" name="x" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="a4a37ff3e0bbc4eb98be89ab1b5775484407" name="y" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="af5812eae8861405e92800fa18c995ba1407" name="phi" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="a99c1f67b8efc43eebf274f4427e4d4ec407" name="check" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="a722eb6da6b5b4bb3b94f41c63db27803407" name="station" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="a09a1e4ca4081499fb9bb4c85ebf28aa1407" name="go" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="a2ba691a8ecc84217865c1d671565bbdd408" name="phase" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="ab3e2bf992de840949d8379aa76e2a494408" name="ready" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="ad51f7d391be84a38adf2fa759749b77f408" name="red" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="a250b02743943423cae0546b50555aa5c408" name="orange" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="a7d4cef407ac6467db601782c4ec748f6408" name="green" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="a0c0eff446d344721b0fdc92d7b6c3e9f408" name="ende" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="a6d4f9883287341a483f1d79661e342ac408" name="xAktuell" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="afe637a6172754bc9b436d13c69773f4a408" name="yAktuell" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="ac7afd5f0a28146879f3ffe21e5e6d59c408" name="run" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" default-value="true" />
      </attributes>
      <operations>
        <operation id="o55d34ff6190840d7ab91900d0f86b467408" name="getInstance" type="ComView" type-id="ComView" visibility="public" abstract="false" virtual="false" static="true">
          <source-codes>
            <source-code language="Undefined">{
        if (instance == null){
            instance = new ComView();}
        return instance;}</source-code>
          </source-codes>
        </operation>
        <operation id="o5f89183962664f35a11cc3d70447f5d8408" name="ComView" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        // this.laser = laser;
        // Reverentieren
        com = new UDPServer();
        breaking = LaserControlledBreaking.getInstance();

        // msg = new int[10];
        x = 0;
        y = 0;
        phi = 0;
        check = 0;
        station = 0;
        go = 0;
        phase = 0;

        ready = 0;
        red = 0;
        orange = 0;
        green = 0;
        ende = 0;
        xAktuell = 0;
        yAktuell = 0;}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o8f62649671c24b1cacbebd3e3da2a0a1408" name="run" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        while (run == true){
            try{
                serverSocket = new DatagramSocket(5000);
                int[ sendKoor ={
                    x, y, phi, station, phase, go, breaking.getBremsfaktor(), 0};

                com.sendViewMessage(sendKoor, "127.0.0.1", 5001);

                int[ msg = com.getViewMessagr(serverSocket);
                ready = msg[0;
                red = msg[1;
                orange = msg[2;
                green = msg[3;
                ende = msg[4;
                xAktuell = msg[5;
                yAktuell = msg[6;
                serverSocket.close();} catch (Exception ex){
                Logger.getLogger(ComView.class.getName()).log(Level.SEVERE, null, ex);}
            try{
                Thread.sleep(100);} catch (InterruptedException ex){
                Logger.getLogger(ComView.class.getName()).log(Level.SEVERE, null, ex);}}}</source-code>
          </source-codes>
        </operation>
        <operation id="o59c0840b7ce54093b29e5ed02248d532408" name="setGo" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="go" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.go = go;}

    /**
     * Gibt die zuletzt gelesenen Lampenfarben zurück: rot,orange,grün 0 = aus,
     * 1 = leuchtet, 2 = blinkt
     *
     * @return
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o6ad7e292824b4b51b4fd4eb4bbe869c5408" name="getLamp" type="int[]" type-id="int[]" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        int[ lamp ={
            red, orange, green};
        return lamp;}</source-code>
          </source-codes>
        </operation>
        <operation id="ob18af466c4054ac3ab3b889dd53b1b0d408" name="getReady" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        // System.out.println("&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; GET NOW READY &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;");
        return ready;}</source-code>
          </source-codes>
        </operation>
        <operation id="o2c213f7af31e478083d61efd488ebd97408" name="getEnde" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{

        //  System.out.println("Ende wurde empfagnen: " + ende);
        return ende;}

    /**
     * Gibt befehl die Station anzufahren 1/0
     *
     * @return
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ofe04a86267c54e2f8c970db2a7248262408" name="setStation" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="go" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{

        station = go;
        System.out.println(station);}</source-code>
          </source-codes>
        </operation>
        <operation id="o51ba90e02e764cc7acfa79baa593086c409" name="setKoords" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="x" type="int" type-id="int" default-value="" />
            <parameter id="" name="y" type="int" type-id="int" default-value="" />
            <parameter id="" name="phi" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{

        this.x = x;

        this.y = y;

        this.phi = phi;}</source-code>
          </source-codes>
        </operation>
        <operation id="o08cfacbc4c184c15bcb2af0916ff01ff409" name="getPhase" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return phase;}</source-code>
          </source-codes>
        </operation>
        <operation id="o92fac1acfed74cdb9c114534fb8ef738409" name="setPhase" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="phase" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.phase = phase;}</source-code>
          </source-codes>
        </operation>
        <operation id="o485e98db558a45feb05ff629d11a469f409" name="getxAktuell" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return xAktuell;}</source-code>
          </source-codes>
        </operation>
        <operation id="o5accd856af60488980060f984977d144409" name="getyAktuell" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return yAktuell;}</source-code>
          </source-codes>
        </operation>
        <operation id="o0252d0bf9b5643d1926e026d7d9afe5e409" name="main" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws IOException{
        // TiM55x_Solidus laser = new TiM55x_Solidus();
        ComView com = new ComView();
        com.start();}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di954114683534196262" cid="C047" type="class" name="FileIO" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/27/2014 18:04:43">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="o94c8e6f73719449dbb2c26444bb4cf11432" name="FileIO" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{}
    
    //**********************************************************************************************************
    //******                                        READ                                                   *****
    //**********************************************************************************************************</source-code>
          </source-codes>
        </operation>
        <operation id="obaf7c6f53f054131a28df290afec2bdb432" name="getText" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="file" type="File" type-id="File" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws FileNotFoundException, IOException, InterruptedException{
        

        FileReader leser = new FileReader(file);
        int length =(int) file.length();
        char[ temp = new char[length;
        
        while (file.exists() == false);{
            //Thread.sleep(50);}
        
        leser.read(temp);
        leser.close();
        String out = String.valueOf(temp);

        return out;}</source-code>
          </source-codes>
        </operation>
        <operation id="oce8fbe5871994710b1fd4f4aea8d1389432" name="getLastChar" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="file" type="File" type-id="File" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws FileNotFoundException, IOException, InterruptedException{
        
        
        FileReader leser = new FileReader(file);
        int length =(int) file.length();
        char[ temp = new char[length;
        
        while (file.exists() == false);{
            //Thread.sleep(50);}
        
        leser.read(temp);
        leser.close();
        char temp2 = temp[length-1;
        String out = String.valueOf(temp2);

        return out;}
     
     /**
      * 
      * @param file
      * @return
      * @throws FileNotFoundException
      * @throws IOException 
      * Gibt den zweit letzten char[] platz zurück.
      * Da das Programm RoboView beim schreiben in ein Textdokument immer noch
      * einen Zeilenumbruch anfügt, muss der zweitletzte char[] gelesen werden
      * um das letzte Zeichen zu bekommen.
      */</source-code>
          </source-codes>
        </operation>
        <operation id="o4e28340de00a4fd89c1a309c9688735d432" name="getSecendLastChar" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="file" type="File" type-id="File" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws FileNotFoundException, IOException, InterruptedException{
        
        
        FileReader leser = new FileReader(file);
        int length =(int) file.length();
        char[ temp = new char[length;
        
        while (file.exists() == false);{
            //Thread.sleep(50);}
        leser.read(temp);
        leser.close();
        char temp2 = temp[length-3;
        String out = String.valueOf(temp2);

        return out;}
    
   
    
    
    
    
    //**********************************************************************************************************
    //******                                        WRITH                                                  *****
    //**********************************************************************************************************

    
    
    // Dokument schreiben mit String</source-code>
          </source-codes>
        </operation>
        <operation id="oaace43c4dade46f8a4e0427a6138587d432" name="setText" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="temp" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="file" type="File" type-id="File" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws FileNotFoundException, IOException, InterruptedException{

        FileWriter schreiber = new FileWriter(file);
        
        while (file.exists() == false);{
            //Thread.sleep(50);}
        schreiber.write(temp);
        schreiber.flush();
        schreiber.close();}</source-code>
          </source-codes>
        </operation>
        <operation id="o1969d9a966994ff8bd242e56da062367433" name="setOnlyNumber" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="temp" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="file" type="File" type-id="File" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws FileNotFoundException, IOException, InterruptedException{
            String chnge1 = ",";
            String chnge2 = "[";
            String chnge3 = "]";
        
// --------------------------   entfernt ","   ---------------------------------
            
            char[ stringArray1 = temp.toCharArray();
            String temp1 = "";
        
            for(int i = 0; i &lt; stringArray1.length; i++){
            
                if(String.valueOf(stringArray1[i).equals(chnge1) == false){
                    temp1 += String.valueOf(stringArray1[i).toString();}}
            
// --------------------------   entfernt "["   ---------------------------------
            
            char[ stringArray2 = temp1.toCharArray();
            String temp2 = "";
        
            for(int i = 0; i &lt; stringArray2.length; i++){
            
                if(String.valueOf(stringArray2[i).equals(chnge2) == false){
                    temp2 += String.valueOf(stringArray2[i).toString();}}
            
// --------------------------   entfernt "]"   ---------------------------------
            
            char[ stringArray3 = temp2.toCharArray();
            String out = "";
        
            for(int i = 0; i &lt; stringArray3.length; i++){
            
                if(String.valueOf(stringArray3[i).equals(chnge3) == false){
                    out += String.valueOf(stringArray3[i).toString();}}
            
            setText(out, file);}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di385645271335572176" cid="C048" type="class" name="UDPServer" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/27/2014 18:04:43">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="o7a0056b2875b47c2982d2f5f3e109db3475" name="getViewMessagr" type="int[]" type-id="int[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="serverSocket" type="DatagramSocket" type-id="DatagramSocket" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws Exception{
          
          
        
         
        byte[ receiveData = new byte[36; //
        byte[ in = new byte[36;

// bytes[] der seperaten Komponenten der zu lesenden Nachricht.
        
        byte[ id = new byte[1;
        byte[ length = new byte[2;
        byte[ check = new byte[1;

        byte[ in0 = new byte[4;
        byte[ in1 = new byte[4;
        byte[ in2 = new byte[4;
        byte[ in3 = new byte[4;
        byte[ in4 = new byte[4;
        byte[ in5 = new byte[4;
        byte[ in6 = new byte[4;
        byte[ in7 = new byte[4;
            
        DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
        serverSocket.receive(receivePacket);
                 
                 
       /* for (int i=0; i &lt; 36; i++ )
        {
            System.out.println("INPUT " + i + ": "+Array.getByte(receiveData, i));
        }*/
   
                  //String sentence = new String( receivePacket.getData());
                  in = receivePacket.getData();
                  
                  
                  
                  id[0 = in[0;
                  
                  length[1 = in[1;
                  length[0 = in[2;
                  
                  check[0 = in[3;
                  
                  // Nachricht 0
                  
                  in0[3 = in[4;
                  in0[2 = in[5;
                  in0[1 = in[6;
                  in0[0 = in[7;
                  
                  // Nachricht 1
                  
                  in1[3 = in[8;
                  in1[2 = in[9;
                  in1[1 = in[10;
                  in1[0 = in[11;
                  
                  // Nachricht 2
                  
                  in2[3 = in[12;
                  in2[2 = in[13;
                  in2[1 = in[14;
                  in2[0 = in[15;
                  
                  // Nachricht 3
                  
                  in3[3 = in[16;
                  in3[2 = in[17;
                  in3[1 = in[18;
                  in3[0 = in[19;
                  
                  // Nachricht 4
                  
                  in4[3 = in[20;
                  in4[2 = in[21;
                  in4[1 = in[22;
                  in4[0 = in[23;
                  
                  // Nachricht 5
                  
                  in5[3 = in[24;
                  in5[2 = in[25;
                  in5[1 = in[26;
                  in5[0 = in[27;
                  
                  // Nachricht 6
                  
                  in6[3 = in[28;
                  in6[2 = in[29;
                  in6[1 = in[30;
                  in6[0 = in[31;
                  
                  // Nachricht 7
                  
                  in7[3 = in[32;
                  in7[2 = in[33;
                  in7[1 = in[34;
                  in7[0 = in[35;
                  
                  int[ out = new int[8;
                  
                  
                 
                 out[0 = byteToInt(in0);
                 out[1 = byteToInt(in1);
                 out[2 = byteToInt(in2);
                 out[3 = byteToInt(in3);
                 out[4 = byteToInt(in4);
                 out[5 = byteToInt(in5);
                 out[6 = byteToInt(in6);
                 out[7 = byteToInt(in7);
                 
                /* 
                 System.out.println("Nachricht ist bereit zum senden");
                 
                   System.out.println("ID: " + byteToInt(id));
                   System.out.println("Length: " + byteToInt(length));
                   System.out.println("Check Number: " + byteToInt(check));
                   System.out.println("In 0: " + out[0]);
                   System.out.println("In 1: " + out[1]);
                   System.out.println("In 2: " + out[2]);
                   System.out.println("In 3: " + out[3]);
                   System.out.println("In 4: " + out[4]);
                   System.out.println("In 5: " + out[5]);
                   System.out.println("In 6: " + out[6]);
                   System.out.println("In 7: " + out[7]);
                   */
                   
                   return out;}
      
   
/**
 * 
 * Sendet das mitgegebene byte[] über den Port port an die Ip ip
 * @param sendData
 * @throws SocketException
 * @throws UnknownHostException
 * @throws IOException 
 */</source-code>
          </source-codes>
        </operation>
        <operation id="o8e0ce51e6a6a4246b6b9bddd0a6ceabf481" name="sendViewMessage" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="out" type="int" type-id="int" default-value="" />
            <parameter id="" name="ip" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="port" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws SocketException, UnknownHostException, IOException, InterruptedException{
   /*
       System.out.println("SENDEN Nachricht 0: " + out[0]);
       System.out.println("SENDEN Nachricht 1: " + out[1]);
       System.out.println("SENDEN Nachricht 2: " + out[2]);
       System.out.println("SENDEN Nachricht 3: " + out[3]);
       System.out.println("SENDEN Nachricht 4: " + out[4]);
       System.out.println("SENDEN Nachricht 5: " + out[5]);
       System.out.println("SENDEN Nachricht 6: " + out[6]);
       System.out.println("SENDEN Nachricht 7: " + out[7]);
       */
       
       byte[ sendData = new byte[36;
       
       byte[ id = new byte[1;
       byte[ length = new byte[2;
       byte[ check = new byte[1;

       byte[ out0 = new byte[4;
       byte[ out1 = new byte[4;
       byte[ out2 = new byte[4;
       byte[ out3 = new byte[4;
       byte[ out4 = new byte[4;
       byte[ out5 = new byte[4;
       byte[ out6 = new byte[4;
       byte[ out7 = new byte[4;
       
      
       length = intToByte(2, 36);
       
       out0 = intToByte(4, out[0);
       out1 = intToByte(4, out[1);
       out2 = intToByte(4, out[2);
       out3 = intToByte(4, out[3);
       out4 = intToByte(4, out[4);
       out5 = intToByte(4, out[5);
       out6 = intToByte(4, out[6);
       out7 = intToByte(4, out[7);
       
        //Nachricht id
       
        sendData[0 = 0;
        
        //Nachricht länge ( ist immer 36 Byte)
        
        sendData[1 = length[1;
        sendData[2 = 0; // length[0] ergibt 9, sollte aber 0 ergeben???
        
        // senData[3] steht weiter unten und kann erst nach erstellen der restlichen
        // Nachricht erstellt werden.
        
        //Nachricht 0
        
        sendData[4 = out0[3;
        sendData[5 = out0[2;
        sendData[6 = out0[1;
        sendData[7 = out0[0;
        
        //Nachricht 1
        
        sendData[8 = out1[3;
        sendData[9 = out1[2;
        sendData[10 = out1[1;
        sendData[11 = out1[0;
        
        //Nachricht 2
        
        sendData[12 = out2[3;
        sendData[13 = out2[2;
        sendData[14 = out2[1;
        sendData[15 = out2[0;
        
        //Nachricht 3
        
        sendData[16 = out3[3;
        sendData[17 = out3[2;
        sendData[18 = out3[1;
        sendData[19 = out3[0;
        
        //Nachricht 4
        
        sendData[20 = out4[3;
        sendData[21 = out4[2;
        sendData[22 = out4[1;
        sendData[23 = out4[0;
        
        //Nachricht 5
        
        sendData[24 = out5[3;
        sendData[25 = out5[2;
        sendData[26 = out5[1;
        sendData[27 = out5[0;
        
        //Nachricht 6
        
        sendData[28 = out6[3;
        sendData[29 = out6[2;
        sendData[30 = out6[1;
        sendData[31 = out6[0;
        
        //Nachricht 7
        
        sendData[32 = out7[3;
        sendData[33 = out7[2;
        sendData[34 = out7[1;
        sendData[35 = out7[0;
        
        byte[ nutzdaten = new byte[32;
        
        // Stellt die, für dei Prüfsumme relevanten Bytes zusammen
        
        for (int i = 0; i &lt; 32 ; i++){
            if (i != 2){
               // System.out.println(i);
                nutzdaten[i = sendData[i;}}
        
        // Berechnet die Prüfsumme
        
        byte[ temp = intToByte(1, checksum(nutzdaten, nutzdaten.length));
        
        // Nachricht Prüfsumme
        
       sendData[3 = temp[0;
       
       // Konsolenausgabe
       /*
        for (int i=0; i &lt; 36; i++ )
        {
       
       if ( i == 4 || i == 8 || i == 12 || i == 16 || i == 20 || i == 24 || i == 28 || i == 32)
       {
           System.out.println("-- Nachricht " + ((i/4) - 1) + " --");
       }
       
       System.out.println("OUTPUT " + i + ": "+ Array.getByte(sendData, i));
        }
        */
   // ------------------------------- SENDEN -----------------------------------
        
        DatagramSocket send = new DatagramSocket();
        InetAddress ipadress = InetAddress.getByName( ip );
        send.connect(ipadress, port);
        
        send.send(new DatagramPacket(sendData, sendData.length));
       
        send.disconnect();
        Thread.sleep(100);}
   
// ----------------------- Byte[] zu Integer -----------------------------------
   
/**
 * Wandelt ein byte[] in einen Interger um, es muss ds zu umwandelnde byte[] mitgegeben werden
 * @param in
 * @return 
 */</source-code>
          </source-codes>
        </operation>
        <operation id="o4a004c92bed7495397b31f2eaf13f532482" name="byteToInt" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="in" type="byte" type-id="byte" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
// byte[] -&gt; int
        int lenght = in.length;
        int number = 0;     
        for (int i = 0; i &lt; lenght; ++i){
            number |= (in[lenght-1-i &amp; 0xff) &lt;&lt; (i &lt;&lt; lenght-1);}

        return number;}
   
// ----------------------- Integer zu Byte[] -----------------------------------
 
   
   
/**
 * Wandelt einen Integer in einen byte[] um, es muss der zu umwandelnde Interger und die gewüscht bytelänge mitgegeben werden.
 * @param length
 * @param in
 * @return 
 */</source-code>
          </source-codes>
        </operation>
        <operation id="o1d9d7e37294946999a3b9887af62da2f482" name="intToByte" type="byte[]" type-id="byte[]" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="length" type="int" type-id="int" default-value="" />
            <parameter id="" name="in" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        byte[ data = new byte[length;

        // int -&gt; byte[]
        for (int i = 0; i &lt; length; ++i){
            int shift = i &lt;&lt; length-1; // i * 8
            data[length-1-i = (byte)((in &amp; (0xff &lt;&lt; shift)) &gt;&gt;&gt; shift);}
        return data;}
  
    
    
/**
 * Berechnet die Prüfsumme für das zu sendende byte[] (byte[3])
 * @param nutzdaten
 * @param nutzdatenLänge
 * @return 
 */</source-code>
          </source-codes>
        </operation>
        <operation id="o0d4f27aebb6a4d26ac52eaecf2f99db9482" name="checksum" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="nutzdaten" type="byte" type-id="byte" default-value="" />
            <parameter id="" name="nutzdatenLänge" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{  
 
    int s0 = 0;
    
    for(int i = 0; i &lt; nutzdatenLänge; ++i){
      s0 = ( s0 + nutzdaten[i )%256;}  
    return ( 0xFF-s0 );}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di496661953338594605" cid="C003" type="class" name="JobController" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/30/2014 22:45:43">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a964b68be24824bb09ba916b10f0d4c59616" name="fc" type="FieldCommander" type-id="FieldCommander" visibility="package" abstract="false" virtual="false" />
        <attribute id="aa49d052b73f14668828c8c2804489952616" name="hnd" type="Handler" type-id="Handler" visibility="package" abstract="false" virtual="false" />
        <attribute id="aa7ee9e7488534b8e91139b56892b5557616" name="roboNameIdx" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="a70d75e4ae25e4cb6ab7d1d2ae728e6ea617" name="prodMachine" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" />
        <attribute id="ac3c4cdabbc4b49789c252ce2f83d623c617" name="prodJob" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" />
        <attribute id="a07e6e7a39b7c43efa67854ed9ddd69a2617" name="jobCounter" type="int" type-id="int" visibility="public" abstract="false" virtual="false" default-value="0" />
      </attributes>
      <operations>
        <operation id="od2c22e6919d545cc9bd32f3e0865a5a8617" name="getInstance" type="JobController" type-id="JobController" visibility="public" abstract="false" virtual="false" static="true">
          <source-codes>
            <source-code language="Undefined">{
        if (instance == null){
            instance = new JobController();}
        return instance;}</source-code>
          </source-codes>
        </operation>
        <operation id="o0e630f098bf542939d6c6cb657861d36617" name="JobController" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        setRoboNameIdx("MrPink"); //Default name overwritten by Config-File
        fc = FieldCommander.getInstance();}</source-code>
          </source-codes>
        </operation>
        <operation id="o1d61e80aaa2542d982602f3b5cd08254617" name="setNextExploJob" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined"> throws Exception{
        jobCounter++;
        if (explorationWays[ROUND[FIELDHALF[roboNameIdx[jobCounter == null){
            throw new Exception("no more Jobs for this robo");}}</source-code>
          </source-codes>
        </operation>
        <operation id="o5ff4b2a5f328497191082c12c15d2ae6617" name="getExploJob" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return explorationWays[ROUND[FIELDHALF[roboNameIdx[jobCounter;}

    /**
     * store received MachineList in ProdPhase into our own machineMap
     * 
     * @param mList (List of Machines; unsorted)
     */</source-code>
          </source-codes>
        </operation>
        <operation id="obfa4a9e81a114e8785ccd74ac34e98d1617" name="setMachineTypesFromRefBox" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="mList" type="List" type-id="List" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        for (Machine m : mList)    //iterate through machines{
            Cell cell = fc.machineMap.get(m.getName());      //get Cell of act. machine
            if (cell != null){
                int mNr = cell.getMachineNr();
                cell.setmTyp(m.getType());
                fc.machineMap.put(m.getName(), cell);}}}

    /**
     * get the Machine for searched type
     *
     * @param mType in "T1" to "T5"
     * @return corresponding machine "M1" to "M24"
     * @author roa
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o70eaebecd9ab4a789cf6100810a06571617" name="getProdMachine" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="mType" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        for (String s : fc.machineMap.keySet())    //iterate through machines{
            Cell cell = fc.machineMap.get(s);   //get Cell of act. machine
            if (cell.getmTyp().equals(mType))    //compare searched Type{
                return s;                       //return corr. machine}}
        return null;                            //nothing found/error}</source-code>
          </source-codes>
        </operation>
        <operation id="oce386b60f4e549e2ada3c8143c97310b617" name="getProdJob" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return prodJob;}

    /**
     * Decide which Job/Machine is perfect for the actual Robo //has to be
     * discuss with the strategy of Vincent
     *
     * @param product
     * @return Machine Name
     */
    /*    public void findActProdJobMachine()
     {
     switch (roboNameIdx)
     {
     case 0:
     //Pink producing P1 on T3
     //first T1 and first T2 for intermediate Products (S1/S2)                
     for (int i = 0; i &lt;= 24; i++)
     {
     Cell c;
     c = fc.machineMap.get("M" + i);
     //search next T1
     }
     break;
     case 1:
     //Brown producing P2 on T4
     //Second T1 and second T2 for his intermediate Products
     break;
     case 2:
     //Blond producing P3 on T5
     //No intermediate product
     break;
     default:
     }

     for (int i = 0; i &lt;= 10; i++)
     {
     Order order = hnd.orderList.get(i);

     switch (order.getProduct())
     {
     case P1:
     break;
     case P2:
     break;
     case P3:
     break;
     }
     }
     //finding matching machine for Typ/Robo corresponding to actual Order from refbox
     //just a demo because of missing Algorithm//algorithm to catch next 
     //handler.orderList.get();
     prodJob = "P3";
     prodMachine = "M9";
     }*/
    /**
     * returns the delivery Gate, if is open to deliver the requested Product
     *
     * @param product
     * @return DeliveryGate
     * @author roa
     *
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o86340a7be15f437e8c1549b0445a5e27617" name="isProductDelGateOpen" type="DeliveryGate" type-id="DeliveryGate" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="product" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        for (Order order : hnd.orderList){   //Matches this product ?
            if (order.getProduct().name().equals(product)){   //more Products needed ?
                if (order.getQuantityRequested() &gt; 0){   //is the delivery gate already open
                    if (order.getDeliveryPeriodBegin() &lt;= hnd.game.getGameTime().getSec()){   //is the delivery gate still open in realistic time
                        if (order.getDeliveryPeriodEnd() &gt;= hnd.game.getGameTime().getSec() - REALISTICTIME){
                            return order.getDeliveryGate();}}}}}
        return null;}</source-code>
          </source-codes>
        </operation>
        <operation id="o841678fc43a84f9aafdf3ae14997f523617" name="getStartCell" type="Cell" type-id="Cell" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        int x = startCell[FIELDHALF[roboNameIdx[0;
        int y = startCell[FIELDHALF[roboNameIdx[1;
        return fc.cell[x[y;}</source-code>
          </source-codes>
        </operation>
        <operation id="o35cbc6357df64840ab580fff150a5cd0617" name="setRoboNameIdx" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="roboName" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        switch (roboName){
            case "MrPink":
                roboNameIdx = 0;
                break;
            case "MrBrown":
                roboNameIdx = 1;
                break;
            case "MrBlond":
                roboNameIdx = 2;
                break;
            default:
                roboNameIdx = -1;}}

    /**
     * Found the nearest opimal cell to the machine (LoadCell)
     *
     * @param machine the optimal cell and phi beside the machine
     * @return
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o450bc14b8e8a479682fb8309caddf668617" name="getLoadCellNearMachine" type="Cell" type-id="Cell" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="machine" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        int x, y;
        String loadDirection;
        Cell machineCell, loadCell;

        machineCell = fc.machineMap.get(machine);
        x = machineCell.getX();
        y = machineCell.getY();
        switch (machineCell.getDirLetter()){
            case "W":
                y--;
                loadDirection = "E";
                break;
            case "N":
                x++;
                loadDirection = "S";
                break;
            case "E":
                y++;
                loadDirection = "W";
                break;
            case "S":
                x--;
                loadDirection = "N";
                break;
            default:
                loadDirection = "S";}
        Cell.getPhiFromDirLetter(loadDirection);
        loadCell = fc.cell[x[y;
        loadCell.setDirection(Cell.getPhiFromDirLetter(loadDirection));
        return loadCell;}</source-code>
          </source-codes>
        </operation>
        <operation id="o898de8bcf60a4ab09b1e31034ebd1513617" name="getRoboNameIdx" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return roboNameIdx;}</source-code>
          </source-codes>
        </operation>
        <operation id="o980a050feaf3450ca7d7acd8f3e48089617" name="setRoboNameIdx" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="roboNameIdx" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.roboNameIdx = roboNameIdx;}</source-code>
          </source-codes>
        </operation>
        <operation id="o68e339c5c535448f983fe649bfd20857617" name="main" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        try{
            JobController way = new JobController();
            way.setRoboNameIdx("MrPink");
            System.out.println("Start" + way.getStartCell());
            System.out.println(way.getProdMachine("T5"));
            while (true){
                System.out.println(way.getExploJob());
                way.setNextExploJob();}} catch (Exception ex){
            System.out.println(ex.getMessage());}}}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di418157854680675789" cid="C004" type="class" name="StateMachine" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/30/2014 22:45:43">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a82a04204c86946f38c2fcfc766e6b360653" name="running" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" />
        <attribute id="aceee6a7843ec4305b7ded5933150dfe4653" name="comView" type="ComView" type-id="ComView" visibility="private" abstract="false" virtual="false" />
        <attribute id="ae9c265d79ec84a2b97dedbc4908e398d653" name="way" type="JobController" type-id="JobController" visibility="private" abstract="false" virtual="false" />
        <attribute id="aae187912a5e444b0a915e702e6942381653" name="handler" type="Handler" type-id="Handler" visibility="private" abstract="false" virtual="false" />
        <attribute id="a46c24184e54e4c4e9c9eab441ab4e709654" name="drive" type="Drive" type-id="Drive" visibility="private" abstract="false" virtual="false" />
        <attribute id="a22e1767988fa4829a0614ff431f171b3654" name="fc" type="FieldCommander" type-id="FieldCommander" visibility="private" abstract="false" virtual="false" />
        <attribute id="a442693e59d6a4270b3e07b5dc926cac0654" name="phase" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" />
        <attribute id="ab58b527f29144e609ea301830c74e965654" name="state" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" />
        <attribute id="a9b432da1814841feb77e44920a6567af654" name="exploStep" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" />
        <attribute id="aeaf98d8e49e0467eaef2dfdb5d915db5654" name="prodStep" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" />
        <attribute id="a04a162ae52d04a6181252cc887124abd654" name="ende" type="int" type-id="int" visibility="private" abstract="false" virtual="false" default-value="0" />
        <attribute id="afdb95724ef024b4a8d5ae76762a17d17654" name="ready" type="int" type-id="int" visibility="private" abstract="false" virtual="false" default-value="0" />
        <attribute id="a52148e316e8d4f699196fcf0974c8f26654" name="phaseInt" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="ae53d85f0cba14749ab11d91b6f040883654" name="prodCount" type="int" type-id="int" visibility="private" abstract="false" virtual="false" default-value="0" />
        <attribute id="ab06a161147894668aecbedd1c0cad71e654" name="prodFinalStep" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" default-value="false" />
        <attribute id="a175e16101f324174a71d14ec42b19cfe654" name="firstProd" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" default-value="true" />
      </attributes>
      <operations>
        <operation id="o2a72deafed714d86a11ff5c4b66f8dc3654" name="getInstance" type="StateMachine" type-id="StateMachine" visibility="public" abstract="false" virtual="false" static="true">
          <source-codes>
            <source-code language="Undefined">{
        return instance;}

    // Lampen Farben der Maschinen in der Explorationsphase</source-code>
          </source-codes>
        </operation>
        <operation id="o89645b64a1154d9884651cd21449d8f4654" name="StateMachine" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="handler" type="Handler" type-id="Handler" default-value="" />
            <parameter id="" name="way" type="JobController" type-id="JobController" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws InterruptedException{
        this.handler = handler;
        comView = ComView.getInstance();
        fc = FieldCommander.getInstance();

        this.way = way;

        instance = this;
        drive = new Drive();}</source-code>
          </source-codes>
        </operation>
        <operation id="o5d0443a236934d6fa690efbf20f40d41654" name="setRunning" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="running" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.running = running;}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oaea61ca512f54cf58152046ba27292a7654" name="run" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        while (running){
            readAndSendPhase();

            try{
                Thread.sleep(500);} catch (InterruptedException ex){
                Logger.getLogger(StateMachine.class.getName()).log(Level.SEVERE, null, ex);}

            switch (state){
                case "INIT":
                    Main.log.info("INIT");
                    break;
                case "WAIT_START":
                    Main.log.info("WAIT_START");
                    break;
                case "RUNNING":
                    Main.log.info("RUNNING");
                    break;
                case "PAUSED":
                    Main.log.info("PAUSED");
                    try{
                        Thread.sleep(1000);} catch (InterruptedException ex){}
                    break;}

            switch (phase){
                case "PRE_GAME":
                    Main.log.info("PRE_GAME");
                    preGamePhase();
                    break;
                case "EXPLORATION":
                    Main.log.info("EXPLORATION");
                    try{
                        explorationPhase();} catch (InterruptedException ex){
                        Main.log.error("InterruptException in EXPLORATION");}
                    break;
                case "PRODUCTION":

                    if (firstProd){
                        prodStep = "START_ROBO";}

                    this.firstProd = false;

                    try{
                        productionPhase();} catch (InterruptedException ex){
                        Main.log.error("InterruptException in PRODUCTION");}
                    break;
                case "POST_GAME":
                    postGame();
                    break;}}}</source-code>
          </source-codes>
        </operation>
        <operation id="of2cef76967b54853bd2a40f23706b80b654" name="readAndSendPhase" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        phase = handler.getPhase();
        state = handler.getState();

        if ("PRE_GAME".equals(phase)){
            phaseInt = 1;}
        if ("EXPLORATION".equals(phase)){
            phaseInt = 2;}
        if ("PRODUCTION".equals(phase)){
            phaseInt = 3;}
        if ("POST_GAME".equals(phase)){
            phaseInt = 4;}
        if ("PAUSED".equals(state)){
            phaseInt += 10;}
        if ("RUNNING".equals(state) &amp;&amp; phaseInt &gt; 10){
            phaseInt -= 10;}
        comView.setPhase(phaseInt);}</source-code>
          </source-codes>
        </operation>
        <operation id="o448f2c9c52a64828be6e53e8489fc21f654" name="preGamePhase" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        comView.setStation(0);
        comView.setKoords(0, 0, 0);
        exploStep = "START_ROBO";}</source-code>
          </source-codes>
        </operation>
        <operation id="o6efd2c26656b4be3990a31783245ce1a654" name="explorationPhase" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined"> throws InterruptedException{
        switch (exploStep) //Step in ExploPhase{
            case "START_ROBO":

                Main.log.debug("************* STEP START_ROBO*****************");

                drive.setStartCell(way.getStartCell());
                drive.setStartPosPhi(180);
                drive.goStart(STARTX, STARTY, STARTPHI);
                drive.setStartPosPhi(180);

                exploStep = "TO_START";
                break;

            case "TO_START":

                drive.setEndTarget(way.getLoadCellNearMachine(way.getExploJob())); // setEndTarget wird auf die Zelle direkt vor der Maschine gestzt
                Main.log.debug(way.getExploJob());
                Main.log.debug(way.getLoadCellNearMachine(way.getExploJob()).getX());
                Main.log.debug(way.getLoadCellNearMachine(way.getExploJob()).getY());

                do{
                    drive.run();} while (drive.getEndPosReached() == 0);
                comView.setStation(0);
                Main.log.debug("************* STEP TO_START*****************");
                exploStep = "AT_STATION";
                break;

            case "AT_STATION":

                comView.setKoords(0, 0, 0);

                Main.log.debug("&gt;&gt;&gt;&gt; MASCHINE" + way.getExploJob() + " ERREICHT &lt;&lt;&lt;&lt;&lt;");

                comView.setStation(1); // es soll nun ins stationsanfahren gehen

                ready = comView.getReady();

                if (ready == 1) // zuerst wird der weg gesetzt und bis er die postiion erreicht hat muss die variable go gesendet werden
                // ready kommt erst wenn er an position angekommen ist... 110 ms später kommt dann ende{
                    Main.log.debug("READY OK");

                    while (ende == 0){
                        comView.setGo(1);
                        Thread.sleep(110);
                        ende = comView.getEnde();
                        Main.log.debug("in while schlaufe");
                        ready = 0;}
                    comView.setGo(0);
                    Thread.sleep(110);
                    exploStep = "BACK";
                    Main.log.debug("************* ENDE*****************");
                    ende = 0;}
                break;

            case "BACK":
                comView.setStation(0);
                Main.log.debug("backward");

                int[ lamp = comView.getLamp();
                Main.log.debug("************* STEP BACK*****************");

                handler.sendMachine(way.getExploJob(), lamp); // hier wird der string der aktuellen maschine an die refbox gesendet
                Main.log.debug("STATION: " + way.getExploJob() + String.valueOf(lamp));

                comView.setKoords(-BACKWAY, 0, 0);
                ready = comView.getReady();
                if (ready == 1) // zuerst wird der weg gesetzt und bis er die postiion erreicht hat muss die variable go gesendet werden
                // ready kommt erst wenn er an position angekommen ist... 110 ms später kommt dann ende{
                    Main.log.debug("READY OK");

                    while (ende == 0){
                        comView.setGo(1);
                        Thread.sleep(110);
                        ende = comView.getEnde();
                        Main.log.debug("in while schlaufe");
                        ready = 0;}
                    comView.setGo(0);
                    Thread.sleep(110);
                    exploStep = "NEXT";
                    Main.log.debug("************* ENDE*****************");
                    ende = 0;}

                break;

            case "NEXT":
                comView.setStation(0);
                try{
                    way.setNextExploJob(); // hier wird der job auf die nächste nummer gesetzt} catch (Exception ex){
                    //no more job for this robo}

                exploStep = "TO_START";

                break;

            default:
                Main.log.warn("!!!!! OUT OFF PROGRAM !!!!!");
                comView.setKoords(0, 0, 0);
                break;}}</source-code>
          </source-codes>
        </operation>
        <operation id="o6200bcdefbcd4d528260c0cdb0f01091654" name="productionPhase" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined"> throws InterruptedException{
        readAndSendPhase();
        if (way.getRoboNameIdx() == 2){

            switch (prodStep) //Step in production{

                case "START_ROBO":

                    drive.setStartPosPhi(180);

                    Main.log.debug("************* STEP PROD  START_ROBO*****************");
                    drive.setStartCell(fc.cell[1[1);  //zum puck

                    prodStep = "TO_START";

                    break;

                case "TO_START":
                    //hier muss irgendwie die aktuelle position abgefragt werden können --&gt; nach explo

                    Main.log.debug("************* STEP PROD  TO_START*****************");
                    comView.setStation(10);
                    drive.setEndTarget(fc.cell[6[1);  //zum puck

                    do{
                        drive.run();} while (drive.getEndPosReached() == 0);

                    prodStep = "GRAB_PUCK";

                    break;

                case "GRAB_PUCK":
                    comView.setKoords(0, 0, 0);

                    //  Main.log.debug("&gt;&gt;&gt;&gt; MASCHINE" + way.getProdMachine("T3") + " ERREICHT &lt;&lt;&lt;&lt;&lt;");
                    comView.setStation(3); // es soll nun ins stationsanfahren gehen

                    ready = comView.getReady();
                    if (ready == 1){
                        Main.log.debug("READY OK");

                        while (ende == 0){
                            comView.setGo(1);
                            Thread.sleep(110);
                            ende = comView.getEnde();
                            ready = 0;}

                        comView.setGo(0);
                        Thread.sleep(110);
                        prodStep = "EMPTY";
                        comView.setStation(10);

                        /*if (ready == 1) // zuerst wird der weg gesetzt und bis er die postiion erreicht hat muss die variable go gesendet werden
                         // ready kommt erst wenn er an position angekommen ist... 110 ms später kommt dann ende
                         {

                         Main.log.debug("READY OK");
                         comView.setGo(1);
                       
                         drive.setEndTarget(4, 1);
                         while (drive.getEndPosReached() == 0) {
                         drive.run();
                         }


                         Thread.sleep(110);
                         prodStep = "EMPTY";
                         Main.log.debug("************* ENDE*****************");
                         ende = 0;
                         * */}

                    break;
                case "EMPTY":
                    prodStep = "DRIVE_TO_T5";
                    break;

                case "DRIVE_TO_T5":
                    Main.log.debug("************* DRIVE TO T5*****************");
                    drive.setStartCell(fc.cell[6[1);
                    drive.setStartPosPhi(180);
                    //drive.setEndTarget(way.getLoadCellNearMachine(way.getProdMachine("T5")));
                    drive.setEndTarget(way.getLoadCellNearMachine("M3"));

                    do{
                        drive.run();} while (drive.getEndPosReached() == 0);

                    comView.setStation(4);

                    prodStep = "PROD";

                    break;

                case "PROD":

                    comView.setKoords(0, 0, 0);
                    Thread.sleep(3000);
                    //   Main.log.debug("&gt;&gt;&gt;&gt; MASCHINE" + way.getProdMachine("T5") + " ERREICHT &lt;&lt;&lt;&lt;&lt;");
                    comView.setStation(9); // after stationsanfahren stay to the machine and wait the end of the work
                    // es soll nun ins stationsanfahren gehen
                    ready = comView.getReady();
                    if (ready == 1){
                        Main.log.debug("READY OK");

                        while (ende == 0){
                            comView.setGo(1);
                            Thread.sleep(110);
                            ende = comView.getEnde();
                            ready = 0;}
                        comView.setGo(0);
                        ende = 0;
                        Thread.sleep(110);

                        prodStep = "BLA";}
                    break;

                case "BLA":

                    ready = comView.getReady();

                    if (ready == 1){
                        Main.log.debug("READY OK");

                        while (ende == 0){
                            comView.setGo(1);
                            Thread.sleep(110);
                            ende = comView.getEnde();
                            ready = 0;}

                        comView.setGo(0);
                        Thread.sleep(110);

                        Main.log.debug("************* ENDE*****************");
                        ende = 0;
                        comView.setStation(10);
                        prodStep = "TO_DELIVERY";}

                    // if (way.isProductDelGateOpen("P3").getNumber() &gt;=1 ) //Delivery signal for P3
                    //{
                    //}
                    break;

                case "TO_DELIVERY":
                    drive.setEndTarget(fc.cell[1[5);// Delivery Gate

                    do{
                        drive.run();} while (drive.getEndPosReached() == 0);

                    prodStep = "DELIVER";

                    break;

                case "DELIVER":

                    // DELIVER SEQUENCE
                    comView.setKoords(0, 0, 0);

                    Main.log.debug("&gt;&gt;&gt;&gt; MASCHINE DELIVERY ERREICHT &lt;&lt;&lt;&lt;&lt;");

                    comView.setStation(5);

                    ready = comView.getReady();

                    if (ready == 1){
                        Main.log.debug("READY OK");

                        while (ende == 0){

                            comView.setGo(1);
                            Thread.sleep(110);
                            ende = comView.getEnde();

                            ready = 0;}
                        ende = 0;

                        comView.setGo(0);
                        Thread.sleep(110);
                        prodStep = "NEXT";
                        comView.setStation(10);

                        ende = 0;}
                    break;

                case "NEXT":

                    comView.setKoords(-BACKWAY, 0, 0);

                    ready = comView.getReady();

                    if (ready == 1){
                        Main.log.debug("READY OK");

                        while (ende == 0){

                            comView.setGo(1);
                            Thread.sleep(110);
                            ende = comView.getEnde();

                            ready = 0;}

                        comView.setGo(0);
                        Thread.sleep(110);
                        ende = 0;
                        prodStep = "TO_START";}

                    break;

                /**
                 * *****************************
                 * case "CHECK_RECYCLING": //Check every cell to serach for a
                 * machine with junk int k = 1, l = 1; do { do { k++; } while
                 * (); //if this cell contain junk l++; } while (); //if this
                 * cell contain junk break; *********************************
                 */
                default:
                    Main.log.debug("!!!!! OUT OFF PROGRAM !!!!!");
                    comView.setKoords(0, 0, 0);
                    break;}}

        //Production state machine for Pink and Blond
        if (way.getRoboNameIdx() == 1){

            switch (prodStep) //Step in production{

                case "START_ROBO":
                    prodCount = 0;

                    comView.setPhase(2);

                    Main.log.debug("************* STEP PROD  START_ROBO*****************");

                    prodStep = "TO_START";
                    break;

                case "TO_START":
                    //hier muss irgendwie die aktuelle position abgefragt werden können --&gt; nach explo

                    Main.log.debug("************* STEP PROD  TO_START*****************");

                    drive.setEndTarget(fc.cell[6[0);  //zum puck

                    do{
                        drive.run();} while (drive.getEndPosReached() == 0);

                    prodStep = "GRAB_PUCK";
                    break;

                case "GRAB_PUCK":

                    comView.setKoords(0, 0, 0);

                    comView.setStation(3); // es soll nun ins stationsanfahren gehen

                    ready = comView.getReady();

                    if (ready == 1) // zuerst wird der weg gesetzt und bis er die postiion erreicht hat muss die variable go gesendet werden
                    // ready kommt erst wenn er an position angekommen ist... 110 ms später kommt dann ende{
                        Main.log.debug("READY OK");

                        while (ende == 0){

                            comView.setGo(1);
                            Thread.sleep(110);
                            ende = comView.getEnde();
                            Main.log.debug("in while schlaufe");
                            ready = 0;}

                        comView.setGo(0);
                        Thread.sleep(110);

                        prodStep = "DRIVE_TO_T";

                        Main.log.debug("************* ENDE*****************");
                        ende = 0;}
                    break;

                case "DRIVE_TO_T":

                    prodCount++;
                    /*Switch to select the machine to drive to*/
                    switch (prodCount){
                        case 1:
                            drive.setEndTarget(way.getLoadCellNearMachine(way.getProdMachine("T1")));
                            break;
                        case 2:
                            drive.setEndTarget(way.getLoadCellNearMachine(way.getProdMachine("T2")));
                            break;
                        case 3:
                            drive.setEndTarget(way.getLoadCellNearMachine(way.getProdMachine("T1")));
                            break;
                        case 4:
                            drive.setEndTarget(way.getLoadCellNearMachine(way.getProdMachine("T2")));
                            break;
                        case 5:
                            drive.setEndTarget(way.getLoadCellNearMachine(way.getProdMachine("T1")));
                            break;
                        case 6:
                            drive.setEndTarget(way.getLoadCellNearMachine(way.getProdMachine("T3")));
                            break;
                        case 7:
                            drive.setEndTarget(way.getLoadCellNearMachine(way.getProdMachine("T2")));
                            break;
                        case 8:
                            drive.setEndTarget(way.getLoadCellNearMachine(way.getProdMachine("T3")));
                            break;
                        case 9:
                            drive.setEndTarget(way.getLoadCellNearMachine(way.getProdMachine("T1")));
                            break;
                        case 10:
                            drive.setEndTarget(way.getLoadCellNearMachine(way.getProdMachine("T3")));
                            break;}
                    do{
                        drive.run();} while (drive.getEndPosReached() == 0);

                    prodStep = "PROD";

                    break;

                case "PROD":

                    comView.setKoords(0, 0, 0);
                    /*Switch to choose between the info to show*/
                    switch (prodCount){

                        case 1:
                            Main.log.debug("&gt;&gt;&gt;&gt; MASCHINE" + way.getProdMachine("T1") + " ERREICHT &lt;&lt;&lt;&lt;&lt;");
                            break;
                        case 2:
                            Main.log.debug("&gt;&gt;&gt;&gt; MASCHINE" + way.getProdMachine("T2") + " ERREICHT &lt;&lt;&lt;&lt;&lt;");
                            break;
                        case 3:
                            Main.log.debug("&gt;&gt;&gt;&gt; MASCHINE" + way.getProdMachine("T1") + " ERREICHT &lt;&lt;&lt;&lt;&lt;");
                            break;
                        case 4:
                            Main.log.debug("&gt;&gt;&gt;&gt; MASCHINE" + way.getProdMachine("T2") + " ERREICHT &lt;&lt;&lt;&lt;&lt;");
                            break;
                        case 5:
                            Main.log.debug("&gt;&gt;&gt;&gt; MASCHINE" + way.getProdMachine("T1") + " ERREICHT &lt;&lt;&lt;&lt;&lt;");
                            break;
                        case 6:
                            Main.log.debug("&gt;&gt;&gt;&gt; MASCHINE" + way.getProdMachine("T3") + " ERREICHT &lt;&lt;&lt;&lt;&lt;");
                            break;
                        case 7:
                            Main.log.debug("&gt;&gt;&gt;&gt; MASCHINE" + way.getProdMachine("T2") + " ERREICHT &lt;&lt;&lt;&lt;&lt;");
                            break;
                        case 8:
                            Main.log.debug("&gt;&gt;&gt;&gt; MASCHINE" + way.getProdMachine("T3") + " ERREICHT &lt;&lt;&lt;&lt;&lt;");
                            break;
                        case 9:
                            Main.log.debug("&gt;&gt;&gt;&gt; MASCHINE" + way.getProdMachine("T1") + " ERREICHT &lt;&lt;&lt;&lt;&lt;");
                            break;
                        case 10:
                            Main.log.debug("&gt;&gt;&gt;&gt; MASCHINE" + way.getProdMachine("T3") + " ERREICHT &lt;&lt;&lt;&lt;&lt;");
                            break;}
                    /*Switch to select between: 
                     Puck area = setStation(3);
                     Station work = setStation(4);
                     Delivery gate = setStation(5)*/
                    switch (prodCount){
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:

                            comView.setStation(4);
                            break;}
                    if (ready == 1){
                        Main.log.debug("READY OK");

                        while (ende == 0){
                            comView.setGo(1);
                            Thread.sleep(110);
                            ende = comView.getEnde();
                            ready = 0;}
                        comView.setGo(0);
                        Thread.sleep(110);}
                    /*Switch to select between: 
                     Move puck on left side = setStation(6);
                     Move puck on right side = setStation(7);
                     Move the puck on the machine = setStation(8);
                     Move the puck on the machine and wait = setStation(9)*/
                    switch (prodCount){
                        case 1:
                            comView.setStation(8);
                            break;
                        case 2:
                            comView.setStation(6);
                            break;
                        case 3:
                            break;
                        case 4:
                            comView.setStation(8);
                            break;
                        case 5:
                            comView.setStation(8);
                            break;
                        case 6:
                            if (prodFinalStep == true){} else{
                                comView.setStation(6);}
                            break;
                        case 7:
                            break;
                        case 8:
                            comView.setStation(7);
                            break;
                        case 9:
                            break;
                        case 10:
                            comView.setStation(8);
                            break;}

                    ready = comView.getReady();

                    if (ready == 1){
                        Main.log.debug("READY OK");

                        while (ende == 0){
                            comView.setGo(1);
                            Thread.sleep(110);
                            ende = comView.getEnde();
                            ready = 0;}

                        comView.setGo(0);
                        Thread.sleep(110);
                        switch (prodCount){
                            case 1:
                                prodStep = "TO_START";
                                break;

                            case 2:
                                prodStep = "DRIVE_TO_T";
                                break;

                            case 3:
                                prodStep = "DRIVE_TO_T";
                                break;

                            case 4:
                                prodStep = "TO_START";
                                break;

                            case 5:
                                if (prodFinalStep == true){
                                    prodStep = "DRIVE_TO_T";} else{
                                    prodStep = "TO_START";}
                                break;

                            case 6:
                                if (prodFinalStep == true){
                                    prodStep = "TO_DELIVERY";} else{
                                    prodStep = "DRIVE_TO_T";}
                                break;
                            case 7:
                                prodStep = "DRIVE_TO_T";
                                break;
                            case 8:
                                prodStep = "DRIVE_TO_T";
                                break;
                            case 9:
                                prodStep = "DRIVE_TO_T";
                                break;
                            case 10:
                                prodStep = "TO_START";
                                prodFinalStep = true;
                                prodCount = 0;
                                break;}
                        Main.log.debug("************* ENDE*****************");
                        ende = 0;
                        comView.setStation(5);}

                    break;

                case "TO_DELIVERY":
                    drive.setEndTarget(way.getLoadCellNearMachine("D1"));// Delivery Gate
                    do{
                        drive.run();} while (drive.getEndPosReached() == 0);

                    prodStep = "DELIVER";

                    break;

                case "DELIVER":

                    // DELIVER SEQUENCE
                    comView.setKoords(0, 0, 0);

                    Main.log.debug("&gt;&gt;&gt;&gt; MASCHINE DELIVERY ERREICHT &lt;&lt;&lt;&lt;&lt;");

                    comView.setStation(5);

                    ready = comView.getReady();

                    if (ready == 1){
                        Main.log.debug("READY OK");

                        while (ende == 0){

                            comView.setGo(1);
                            Thread.sleep(110);
                            ende = comView.getEnde();

                            ready = 0;}

                        comView.setGo(0);
                        Thread.sleep(110);
                        prodStep = "START_ROBO";
                        comView.setStation(3);
                        Main.log.debug("************* ENDE*****************");
                        ende = 0;
                        prodFinalStep = false;}
                    break;

                default:
                    Main.log.debug("!!!!! OUT OFF PROGRAM !!!!!");
                    comView.setKoords(0, 0, 0);
                    break;}}}</source-code>
          </source-codes>
        </operation>
        <operation id="ocbfc3376fd934f27916e6865909b1cd1656" name="postGame" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di212162522139756969" cid="C005" type="class" name="ComRefBox" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/30/2014 22:45:43">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a42705a6f637f4f0e9db50cf03b9e8aa5664" name="client" type="ProtobufClient" type-id="ProtobufClient" visibility="public" abstract="false" virtual="false" />
        <attribute id="a8f5677b86d88413499c87a45e8bc04fd664" name="handler" type="Handler" type-id="Handler" visibility="public" abstract="false" virtual="false" />
        <attribute id="afe00a483fa6e4cd39dcba3ac47c87d20664" name="peer" type="ProtobufBroadcastPeer" type-id="ProtobufBroadcastPeer" visibility="public" abstract="false" virtual="false" />
        <attribute id="a5bea1b1e548e45ef83953d4685fd5596664" name="gamePoints" type="int" type-id="int" visibility="public" abstract="false" virtual="false" />
        <attribute id="a3cbbe959e60e4804b51da804e6f86166664" name="gamePhase" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" />
        <attribute id="ad59ccc7878e64c9db960ea8a4d05b869664" name="gameState" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" />
        <attribute id="a2030e226d34342f3ae381cebe0e194d5664" name="hasTime" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" />
        <attribute id="a113c0d55a3d54519894208ef03d847da664" name="gameTime" type="int" type-id="int" visibility="public" abstract="false" virtual="false" />
      </attributes>
      <operations>
        <operation id="of13c59bd80634dc5bffa18c7cd14c1d9664" name="ComRefBox" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="ip" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="portIn" type="int" type-id="int" default-value="" />
            <parameter id="" name="portOut" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        // --------------------------- Verbinden mit Refbox per UDP ----------------------------
        peer = new ProtobufBroadcastPeer(ip, portIn, portOut);
        handler = new Handler(peer);
        try{
            peer.start();} catch (IOException e){
            e.printStackTrace();}

        peer.register_handler(handler); // muss sicher erst nachher geschehen, da nachricht im handler sonst nicht an peer gehängt werden kann}</source-code>
          </source-codes>
        </operation>
        <operation id="o959490105ca44c628f31afca0db8c2d0664" name="addObserver" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="observer" type="Observer" type-id="Observer" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        handler.addObserver(observer);}

    /**
     * ?? event ??? ??? ??? refbox --&gt; controller Client-Server
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o3f12e07aa0fd4694bb5f096d7477ff8d664" name="addAttentionMessage" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        peer.&lt;AttentionMessage&gt;add_message(AttentionMessage.class);}

    /**
     * ok periodisch 1sec ??? refbox --&gt; all P2P &amp; C-S
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o3650333fca054ac9a4d85456592a1cd0664" name="addBeaconSignal" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        client.&lt;BeaconSignal&gt;add_message(BeaconSignal.class);}

    //?? periodisch? EVENT! ??? refbox --&gt; any       P2P &amp; C-S</source-code>
          </source-codes>
        </operation>
        <operation id="o72b53db487e74b96ab68d6a4fa1327eb664" name="addVersionInfo" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        peer.&lt;VersionInfo&gt;add_message(VersionInfo.class);}

    /**
     * ?? periodisch 1sec ??? refbox --&gt; robots PeerToPeer
     */</source-code>
          </source-codes>
        </operation>
        <operation id="of181a6bd521c44819e96e83a514a6e51664" name="addExplorationInfo" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        peer.&lt;ExplorationInfo&gt;add_message(ExplorationInfo.class);}

    //ok periodisch 1sec ??? refbox --&gt; all          P2P &amp; C-S
    /**
     * Hört auf die Nachricht "GameState" werte: - Aktueller Punktestand -
     * Aktuelle Spielzeit (EXPLORATION: 0-180, PRODUCTION: 0-900) - Aktueller
     * Spiel Phase (PRE_GAME, EXPLORATION, PRODUCTION, POST_GAME) - Aktueller
     * Spiel Status (WAIT_STRT, RUNNING, PAUSED) - Ob noch Spielzeit vorhanden
     * ist.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o20fa41985ccc4522bf8fa43372ce440a664" name="addGameStateMessage" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        peer.&lt;GameState&gt;add_message(GameState.class);}

    /**
     * ok periodisch 0.25sec ??? refbox --&gt; all P2P &amp; C-S
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o8f01d633116b401883316c9f49b91b0a664" name="addMachineInfo" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        peer.&lt;MachineInfo&gt;add_message(MachineInfo.class);}

    /**
     * ?? ??? 5sec ??? refbox --&gt; any P2P &amp; C-S
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o7a53bb2454324850891dc23af01a3671664" name="addOrderInfo" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        peer.&lt;OrderInfo&gt;add_message(OrderInfo.class);}

    /**
     * ok periodisch 1sec ok refbox --&gt; controller Client-Server
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o09c939ff89114b7885a07be0107858c7664" name="addPuckInfo" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        peer.&lt;PuckInfo&gt;add_message(PuckInfo.class);}

    /**
     * ok periodisch 1sec ??? refbox --&gt; controller Client-Server
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o03646687508a4f59b403ba89f7f31551664" name="addRobotInfo" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        peer.&lt;RobotInfo&gt;add_message(RobotInfo.class);}

    /**
     *
     * @return Gibt den aktuellen Spiel Status zurück (WAIT_STRT, RUNNING,
     * PAUSED).
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o3fdafaa43c4f4283a9cadc9e86543eca664" name="getState" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return handler.getState();}

    /**
     *
     * @return Gibt die aktuelle Spiel Phase zurück (PRE_GAME, EXPLORATION,
     * PRODUCTION, POST_GAME).
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o168f515001644c91b15bb27284fb04b9664" name="getPhase" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return handler.getPhase();}

    /**
     *
     * @return Git an ob noch Spielzeit vorhanden ist.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o7b2490bf5c2e44a7824d5be10442cdbe664" name="getHasTime" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return handler.getHasTime();}

    /**
     *
     * @return Gibt die aktuelle Spielzeit zurück (EXPLORATION: 0-180,
     * PRODUCTION: 0-900).
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o8cfc5c8aad98440496c90f2ff32cb23b664" name="getTime" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return handler.getTime();}

    /**
     *
     * @return Gibt den Aktuellen Punktestand zurück.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oedf869e2805046c1b0dc2d98fa4f9cd3664" name="getPoints" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return handler.getPoints();}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di120782845618495851" cid="C006" type="class" name="Handler" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/30/2014 22:45:43">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a8a8f796d3d6d445bb7e96dc0ecf6d2c1685" name="fc" type="FieldCommander" type-id="FieldCommander" visibility="package" abstract="false" virtual="false" />
        <attribute id="a30f7332c9b8f49c6b1eb50487ca367a7685" name="orderList" type="List&lt;Order&gt;" type-id="List&lt;Order&gt;" visibility="public" abstract="false" virtual="false" />
        <attribute id="afca7296258884560a3f16c2567757cc1685" name="game" type="GameState" type-id="GameState" visibility="public" abstract="false" virtual="false" />
        <attribute id="a16592bc651154fef9470ba4062a01bd8685" name="mList" type="List&lt;Machine&gt;" type-id="List&lt;Machine&gt;" visibility="public" abstract="false" virtual="false" />
        <attribute id="a8a14243fc2b3403f850be299fea45886685" name="gamePoints" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" />
        <attribute id="a59904048620142659d4e5c999110da71685" name="gamePhase" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" />
        <attribute id="a0de470affd4f4a95a7a25e9928daf567685" name="gameState" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" />
        <attribute id="a5135905cf9e0455aa44c028bc7dfd6a8685" name="hasTime" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" />
        <attribute id="a7b9f5e50127d4cef94fad1798fb7bc68685" name="gameTime" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" />
        <attribute id="aa2614366cbf741b68a98ff00297d3077685" name="logMessage" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" />
        <attribute id="a428222e3f3a7491189c934220babb5cc685" name="mTypLight" type="int[]" type-id="int[]" visibility="public" abstract="false" virtual="false" />
        <attribute id="a7855836f22fd44bcb826363cf2f0fde0685" name="peer" type="ProtobufBroadcastPeer" type-id="ProtobufBroadcastPeer" visibility="package" abstract="false" virtual="false" />
        <attribute id="a7bc5f7f9bb974e1885840f39e5adfcec685" name="machineTyp" type="String[]" type-id="String[]" visibility="public" abstract="false" virtual="false" />
      </attributes>
      <operations>
        <operation id="o714c954c1f2d4c8d9373834784080c21685" name="Handler" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="peer" type="ProtobufBroadcastPeer" type-id="ProtobufBroadcastPeer" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.peer = peer;
        logMessage = "Der Server wurde gestartet !!!";
        fc = FieldCommander.getInstance();}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="odc4fa74dea124f2883d3ea3691ffc724685" name="handle_message" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="in_msg" type="ByteBuffer" type-id="ByteBuffer" default-value="" />
            <parameter id="" name="msg" type="GeneratedMessage" type-id="GeneratedMessage" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        NanoSecondsTimestampProvider nstp = new NanoSecondsTimestampProvider();

        long ms = System.currentTimeMillis();
        long ns = nstp.currentNanoSecondsTimestamp();

        int sec = (int) (ms / 1000);
        long nsec = ns - (ms * 1000000L);

        TimeProtos.Time t = TimeProtos.Time.newBuilder().setSec(sec).setNsec(nsec).build();
        BeaconSignal bs = BeaconSignal.newBuilder().setTime(t).setSeq(1).setPeerName(Main.name).setNumber(0).setTeamName("Solidus").build();

        ProtobufMessage udpOut = new ProtobufMessage(2000, 1, bs);
        peer.enqueue(udpOut);
        //sendMachine("M1", "T4");
// -------------------------- Puck Info ----------------------------------------
        if (msg instanceof PuckInfo){
            byte[ array = new byte[in_msg.capacity();
            in_msg.rewind();
            in_msg.get(array);
            /*3 Lines above could be ev. replaced by 
             byte[] array=in_msg.array();
             has to be tested --&gt; replace in each Job*/
            PuckInfoProtos.PuckInfo info;

            try{
                info = PuckInfoProtos.PuckInfo.parseFrom(array);
                int count = info.getPucksCount();
                System.out.println("Number of pucks: " + count);
                List&lt;PuckInfoProtos.Puck&gt; pucks = info.getPucksList();
                for (int i = 0; i &lt; pucks.size(); i++){
                    PuckInfoProtos.Puck puck = pucks.get(i);
                    int id = puck.getId();
                    System.out.println("  puck ID: " + id);}} catch (InvalidProtocolBufferException e){
                e.printStackTrace();}}
// -------------------------------- Order Info ---------------------------------
        if (msg instanceof OrderInfo){
            byte[ array = new byte[in_msg.capacity();
            in_msg.rewind();
            in_msg.get(array);

            OrderInfoProtos.OrderInfo info;
            try{
                info = OrderInfoProtos.OrderInfo.parseFrom(array);

                orderList = info.getOrdersList();
                int length = orderList.size();

                for (int i = 0; i &lt; length; i++){
                    System.out.println("Order " + (i + 1) + ": " + orderList.get(i));}} catch (InvalidProtocolBufferException ex){
                Logger.getLogger(Handler.class.getName()).log(Level.SEVERE, null, ex);}}

// -------------------------------------   Game State   ------------------------------------------
// Gibt die Aktuelle Spielphase, Spielstatus, Spielzeit, die Punkte und ob noch Zeit vorhanden ist.
        if (msg instanceof GameState){
            byte[ array = new byte[in_msg.capacity();
            in_msg.rewind();
            in_msg.get(array);

            try{
                game = GameStateProtos.GameState.parseFrom(array);

                int points = game.getPoints();
                Phase phase = game.getPhase();
                State state = game.getState();
                TimeProtos.Time time = game.getGameTime();

                hasTime = game.hasGameTime() + "";

                setChanged();
                notifyObservers(send);

                gamePoints = points + "";
                gamePhase = phase.name();
                gameState = state.name();
                gameTime = time.getSec() + "";} catch (InvalidProtocolBufferException e){
                e.printStackTrace();}}

// -------------------------------- Machine Info ---------------------------------
        if (msg instanceof MachineInfo){
            System.out.println("MACHINE INFO");

            byte[ array = new byte[in_msg.capacity();
            in_msg.rewind();
            in_msg.get(array);

            try{
                MachineInfo mInfo;
                mInfo = MachineInfoProtos.MachineInfo.parseFrom(array);
                mList = mInfo.getMachinesList();
/*
                int length = mList.size();
                machineTyp = new String[length];
                for (int i = 0; i &lt; length; i++)
                {
                    Machine m = mList.get(i);
                    String name = m.getName();
                    String typ = m.getType();
                    Pose2D pose = m.getPose();

                    PuckState out = m.getOutput();
                    //PuckState in = m.getInputs(i);

                    machineTyp[i] = typ;
                    System.out.println("Maschine " + name + " ist Maschinentyp " + machineTyp[i]);
                }*/
                JobController.getInstance().setMachineTypesFromRefBox(mList);} catch (InvalidProtocolBufferException ex){
                Logger.getLogger(Handler.class.getName()).log(Level.SEVERE, null, ex);}

            /*    
             try
             {         
             int count = info.getMachinesCount();
             System.out.println("Anzahl Maschinen: " + count);
             List&lt;MachineInfoProtos.Machine&gt; machines = info.getMachinesList();
             
             MachineInfoProtos.Machine machine = machines.get(0);
            
             int inputsCount = machine.getInputsCount();
             List&lt;LightSpec&gt; lightlist = machine.getLightsList();                            
             }
             catch (InvalidProtocolBufferException ex)
             {
             Logger.getLogger(Handler.class.getName()).log(Level.SEVERE, null, ex);
             }
             */}
// -----------------------------------------------------------------------------------
// -------------------------------- Exploration Info ---------------------------------
// -----------------------------------------------------------------------------------
        if (msg instanceof ExplorationInfo){
            byte[ array = new byte[in_msg.capacity();
            in_msg.rewind();
            in_msg.get(array);

            ExplorationInfoProtos.ExplorationInfo info;

            try{
                info = ExplorationInfoProtos.ExplorationInfo.parseFrom(array);

                List&lt;ExplorationSignal&gt; slist = info.getSignalsList();
                for (int i = 0; i &lt; 5; i++){
                    ExplorationSignal m0 = slist.get(i);
                    mTypeDef[i[RED = m0.getLights(0).getState().getNumber();
                    mTypeDef[i[ORANGE = m0.getLights(1).getState().getNumber();
                    mTypeDef[i[GREEN = m0.getLights(2).getState().getNumber();}

// ------------------ Array[15] füllen: Station 1 - 3 platz 0 - 2... -----------
                mTypLight = new int[15;
                int m = 0;
                for (int i = 0; i &lt; 15; i += 3){
                    mTypLight[i = mTypeDef[m[RED;
                    mTypLight[i + 1 = mTypeDef[m[ORANGE;
                    mTypLight[i + 2 = mTypeDef[m[GREEN;
                    logMessage = "MTyp " + m + " =&gt; RED: " + mTypLight[i + " ORANGE: " + mTypLight[i + 1 + " GREEN: " + mTypLight[i + 2;
                    m++;}} catch (InvalidProtocolBufferException e){
                e.printStackTrace();}}

// -------------------------------- Beacon Signal ---------------------------------
        if (msg instanceof BeaconSignal){
            byte[ array = new byte[in_msg.capacity();
            in_msg.rewind();
            in_msg.get(array);}
        send[0 = gamePoints;
        send[1 = gamePhase;
        send[2 = gameState;
        send[3 = gameTime;
        send[4 = hasTime;
        send[5 = logMessage;
        setChanged();
        notifyObservers(send);}</source-code>
          </source-codes>
        </operation>
        <operation id="o8c2de2e76f3747d4a5be9f7fd5ce3a75686" name="sendMachine" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="name" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="lamp" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        try{
            Thread.sleep(500);} catch (InterruptedException ex){
            Logger.getLogger(Handler.class.getName()).log(Level.SEVERE, null, ex);}

        String type = "";

        if (lamp[RED == mTypLight[0 &amp;&amp; lamp[ORANGE == mTypLight[1 &amp;&amp; lamp[GREEN == mTypLight[2){
            type = "T1";}
        if (lamp[RED == mTypLight[3 &amp;&amp; lamp[ORANGE == mTypLight[4 &amp;&amp; lamp[GREEN == mTypLight[5){
            type = "T2";}
        if (lamp[RED == mTypLight[6 &amp;&amp; lamp[ORANGE == mTypLight[7 &amp;&amp; lamp[GREEN == mTypLight[8){
            type = "T3";}
        if (lamp[RED == mTypLight[9 &amp;&amp; lamp[ORANGE == mTypLight[10 &amp;&amp; lamp[GREEN == mTypLight[11){
            type = "T4";}
        if (lamp[RED == mTypLight[12 &amp;&amp; lamp[ORANGE == mTypLight[13 &amp;&amp; lamp[GREEN == mTypLight[14){
            type = "T5";}
        fc.machineMap.get(name).setmTyp(type);// hier wird der jeweilige Maschinentyp in die entsprechende zelle (von der Map geholt) gespeichert

        try{
            Thread.sleep(1000);} catch (InterruptedException ex){
            Logger.getLogger(Handler.class.getName()).log(Level.SEVERE, null, ex);}
        MachineReportProtos.MachineReportEntry mi = MachineReportProtos.MachineReportEntry.newBuilder().setName(name).setType(type).build();
        //MachineReport mr = MachineReport.newBuilder().setMachines(1, mi).build();  //for just one Machine
        MachineReport mr = MachineReport.newBuilder().addMachines(mi).build();
        ProtobufMessage machineReport = new ProtobufMessage(2000, 61, mr);
        peer.enqueue(machineReport);}

    /**
     *
     * @return Gibt den aktuellen Spiel Status zurück (WAIT_STRT, RUNNING,
     * PAUSED).
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o5a23c78cb95543c0941e44fcc5f10173686" name="getState" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return gameState;}

    /**
     *
     * @return Gibt die aktuelle Spiel Phase zurück (PRE_GAME, EXPLORATION,
     * PRODUCTION, POST_GAME).
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o2b0976178fdd481797dc1157c2fb08b3686" name="getPhase" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return gamePhase;}

    /**
     *
     * @return Git an ob noch Spielzeit vorhanden ist.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o2d2b82e1cd8742fc9d1805e76ab60740686" name="getHasTime" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return hasTime;}

    /**
     *
     * @return Gibt aktuelle Spielzeit zurück (EXPLORATION: 0-180, PRODUCTION:
     * 0-900).
     */</source-code>
          </source-codes>
        </operation>
        <operation id="of5702487e9a7489b927f6fbd98ed7f42686" name="getTime" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return gameTime;}

    /**
     *
     * @return Gibt den Aktuellen Punktestand zurück.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o04c21d5769df4fb2896223b752613226686" name="getPoints" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return gamePoints;}

    /**
     *
     * @return Gibt die von edr Refbox zugewisenen Lichter der 5 Maschinentypen
     * zurück: array[15] array[0] - array[2] Maschinentyp 1: [0] = Rote Lampe,
     * [1] = Orange Lampe, [2] = Grüne Lampe...
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o06aaa1e2740e4f6295e997245d096e3f686" name="getMachineTyp" type="int[]" type-id="int[]" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return mTypLight;}</source-code>
          </source-codes>
        </operation>
        <operation id="o94e06d8323834d1f95fd7cd2e3745a23687" name="main" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        /*ByteBuffer in_msg=new ByteBuffer();
         byte[] array = new byte[in_msg.capacity()];
         in_msg.rewind();
         in_msg.get(array);
         /*3 Lines above could be ev. replaced by 
         byte[] array=in_msg.array();
         has to be tested --&gt; replace in each Job*/

        //byte[] array = new byte[200];
        /*
         List&lt;Order&gt; orderList;
         OrderInfoProtos.OrderInfo info;
         try
         {            
         //info = OrderInfoProtos.OrderInfo.parseFrom(array);

         // orderList = info.getOrdersList();
         int length = orderList.size();

         for (int i = 0; i &lt; length; i++)
         {
         System.out.println("Order " + (i + 1) + ": " + orderList.get(i));
         }
         } catch (InvalidProtocolBufferException ex)
         {
         Logger.getLogger(Handler.class.getName()).log(Level.SEVERE, null, ex);
         }*/}}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di142105050129845236" cid="C007" type="class" name="Laser" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/30/2014 22:45:43">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a16802c1dc7984ca79aa0d59a738fb82b694" name="tim" type="TiM55x" type-id="TiM55x" visibility="private" abstract="false" virtual="false" />
        <attribute id="ab212f4aa8249408c97dba6fab7b008b4694" name="data" type="DataMask" type-id="DataMask" visibility="private" abstract="false" virtual="false" />
      </attributes>
      <operations>
        <operation id="o2c27d9be86064a328258435577d3ef1f694" name="getInstance" type="Laser" type-id="Class:di757239640974862321" visibility="public" abstract="false" virtual="false" static="true">
          <source-codes>
            <source-code language="Undefined">{
        if (instance == null){
            try{
                instance = new Laser();} catch (IOException ex){
                Logger.getLogger(Laser.class.getName()).log(Level.SEVERE, null, ex);}}
        return instance;}
    //&lt;editor-fold defaultstate="collapsed" desc="VARIABLEN_OBJEKTE_KONSTANTEN"&gt;

    //Objekte//Lasermessgerät//aktuelles Datenset

//&lt;/editor-fold&gt;
    //&lt;editor-fold defaultstate="collapsed" desc="KONSTRUKTOREN"&gt;
    /**
     * Standart-Konstruktor. Baut eine Verbindung auf die IP-Adresse 192.168.0.1
     * über den Port 2112 auf (Werkseinstellungen TiM).
     *
     * @throws IOException Fehler, wenn unter der IP &amp; Port kein TiM
     * angesprochen werden konnte.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oecbafa0987fd4010b3bbac93b6fdc426694" name="Laser" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined"> throws IOException{
        tim = new TiM55x("169.254.87.60", 2112);
        this.getNewMeasurementData();}

    /**
     * Parametrierbarer Konstruktor. Versucht eine Verbindung auf die
     * entsprechende IP-Adresse über den entsprechenden Port aufzubauen.
     *
     * @param ipAdress Adresse des TiM55x
     * @param port Ausgabeport des TiM55x
     * @throws IOException IOException Fehler, wenn unter der IP &amp; Port kein TiM
     * angesprochen werden konnte.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ob1bd663efcb44dc0955bd4fca8e15cb4694" name="Laser" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="ipAdress" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="port" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws IOException{
        tim = new TiM55x(ipAdress, port);
        this.getNewMeasurementData();//Fehlerquelle bei Verebung --&gt; Anpassen!}
//&lt;/editor-fold&gt;

    //&lt;editor-fold defaultstate="collapsed" desc="PUBLIC_METHODEN"&gt;
    /**
     * Es wird eine neue Messung getätigt und die Messdaten im internen Buffer
     * gespeichert.
     *
     * @throws IOException Probleme mit der Verbindung zum TiM
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o06ae3a5d7c8642d6a383b6b097e030b6694" name="getNewMeasurementData" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined"> throws IOException{
        data = tim.singleMeassurement();}

    /**
     * Prüfen, ob in einer bestimmten Richtung keine Reflektion unterhalb einer
     * gegebenen Grenzen auftritt. Arbeitet mit den im internen Buffer
     * gespeicherten Messdaten.
     *
     * @param angle Richtungh in Grad. (Erlaubter Range: -135 bis +135)
     * @param distance Grenze in mm
     * @return wenn true = keine Reflektion, wenn false = Reflektion vorhanden
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o42501bec9b0042f9865a68f77a4c3763694" name="directionFree" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="angle" type="int" type-id="int" default-value="" />
            <parameter id="" name="distance" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        if (checkAngleRange(angle) &amp;&amp; checkDistanceRange(0, 8000, distance))//Gültigkeitsprüfung{
            if (this.getDistance(angle) &gt;= distance || this.getDistance(angle) == 0)//Sonderfall: Wenn 0 = Keine Reflektion vorhanden Out of Range{
                return true;}}
        return false;}

    /**
     * Abfragen eines Distanzwertes im gegebenen Winkel. Liest die Daten aus dem internen Buffer aus.
     * @param angle Richtungh in Grad. (Erlaubter Range: -135 bis +135)
     * @return Distanzwert in mm. Falls = 0 ist keine Reflektion vorhanden. Falls = -1 ist der übergenen Winkel nicht erlaubt.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o3bf3906979104b308892d61cd18a885b694" name="getDistance" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="angle" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        if (checkAngleRange(angle)){
            return data.getDistance()[clientAngleToIndex(angle);}
        else{
            return -1;//Angle not in Range}}

    /**
     * Abfragen eines Reflektionwertes im gegebenen Winkel. Liest die Daten aus dem internen Buffer aus.
     * @param angle Richtungh in Grad. (Erlaubter Range: -135 bis +135)
     * @return Wert im Range 0 - 255. Falls = -1 ist der übergenen Winkel nicht erlaubt.
     */</source-code>
          </source-codes>
        </operation>
        <operation id="o2a327cd7f40e4aeaa7905f591086a4ad694" name="getReflection" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="angle" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        if (checkAngleRange(angle)){
            return data.getRssiData()[clientAngleToIndex(angle);}
        else{
            return -1;//Angle not in Range}}
//&lt;/editor-fold&gt;

    //&lt;editor-fold defaultstate="collapsed" desc="PRIVATE_METHODEN"&gt;</source-code>
          </source-codes>
        </operation>
        <operation id="o0837c2b72dd4413ea187a7181832cc7f694" name="clientAngleConverter" type="int" type-id="int" visibility="private" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="angle" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        return angle + 90;}</source-code>
          </source-codes>
        </operation>
        <operation id="o013a465e013340ba8661365624862eb8694" name="clientAngleToIndex" type="int" type-id="int" visibility="private" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="angle" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        return clientAngleConverter(angle) + 45;}</source-code>
          </source-codes>
        </operation>
        <operation id="oef9e94266acf4e1faf6373442119b1f8694" name="checkAngleRange" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="angle" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        int range = 135;//Symetrisch
        return !(angle &lt; -range &amp;&amp; angle &gt; range);}</source-code>
          </source-codes>
        </operation>
        <operation id="ocd327287c14542f792fd7153d106b425694" name="checkDistanceRange" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="min" type="int" type-id="int" default-value="" />
            <parameter id="" name="max" type="int" type-id="int" default-value="" />
            <parameter id="" name="distance" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        return (distance &gt;= min &amp;&amp; distance &lt;= max);}
//&lt;/editor-fold&gt;</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di775687013593733444" cid="C008" type="class" name="InterfacePanel" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/30/2014 22:45:43">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="abb6566f512e84077bfcbcae1da337e49704" name="logText" type="JTextArea" type-id="JTextArea" visibility="public" abstract="false" virtual="false" />
        <attribute id="aea4c19d5fef14090809e60cd2e9dba8b704" name="scrollPane" type="JScrollPane" type-id="JScrollPane" visibility="package" abstract="false" virtual="false" />
        <attribute id="a610ab2e65bcc4ffeb50357c5aa5e544f704" name="pointText" type="JTextArea" type-id="JTextArea" visibility="package" abstract="false" virtual="false" />
        <attribute id="a1e48b1341ce044e9a3001fb2526be01b704" name="stateText" type="JTextArea" type-id="JTextArea" visibility="package" abstract="false" virtual="false" />
        <attribute id="a07a233caa1eb4c5285fad07277b28e98704" name="phaseText" type="JTextArea" type-id="JTextArea" visibility="package" abstract="false" virtual="false" />
        <attribute id="a789d4d966bc0463ab74cc5ed4a1d8dd3704" name="timeText" type="JTextArea" type-id="JTextArea" visibility="package" abstract="false" virtual="false" />
        <attribute id="a1bf844129e1a481d90c3c12daae2e4f9704" name="logLabel" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="a6483b34829cf4c38b2369afb617a67d9704" name="pointLabel" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="ab2f7c9efda1f4b7892010ae9e374dab6704" name="stateLabel" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="a0e3409dcba674a5287cbb71256ddc229704" name="phaseLabel" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="a820edabf05944de3b16564838bdfb3d3704" name="timeLabel" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="a8dbb4b335faf48138b613dd3ff3af574704" name="m1Label" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="ae68d955558de4829bf484d04ee977a15704" name="m2Label" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="a0caf9bbef91b417ab4eb952bbce75f4b704" name="m3Label" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="aa6ad8aa34f7e495faaf93e77e66c8a0c704" name="m4Label" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="a0fea50a63202402c84d269634be95600704" name="m5Label" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="a93a084f74d6c4c70ac51ad2e86224906704" name="m6Label" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="a5d24d62c82a54ac28862b4f650dec404704" name="m7Label" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="a94bfe5e5eaea43d3a9ba52fb6909984b704" name="m8Label" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="a33c21721878e4ba09babcac84dbca67d704" name="m9Label" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="abfe56053297040aeb2067eb9dcb66ca2704" name="m10Label" type="JLabel" type-id="JLabel" visibility="package" abstract="false" virtual="false" />
        <attribute id="aaf75cea63c534d4093f364c4dde9d582704" name="start" type="JButton" type-id="JButton" visibility="package" abstract="false" virtual="false" />
        <attribute id="a9004b1af41dd481fb9303d0bc344638e704" name="stop" type="JButton" type-id="JButton" visibility="package" abstract="false" virtual="false" />
      </attributes>
      <operations>
        <operation id="o6c7027ea601a4f39adafea8556f8e517704" name="InterfacePanel" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="x" type="int" type-id="int" default-value="" />
            <parameter id="" name="y" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        setLayout(null);
        setSize(x, y);
        setLocation(0, 0);
        setBackground(Color.lightGray);

        /*
         m1Label = new JLabel("PUNKTE:");
         pointLabel.setSize(100, 45);
         pointLabel.setLocation(120, 0);
         */
        logText = new JTextArea();
        logText.setLineWrap(true);
        logText.setEditable(false);
        logText.setVisible(true);

        pointLabel = new JLabel("PUNKTE:");
        pointLabel.setSize(100, 45);
        pointLabel.setLocation(120, 0);

        pointText = new JTextArea();
        pointText.setLineWrap(true);
        pointText.setEditable(false);
        pointText.setVisible(true);
        pointText.setSize(100, 25);
        pointText.setLocation(120, 30);

        stateLabel = new JLabel("STATE:");
        stateLabel.setSize(100, 45);
        stateLabel.setLocation(10, 0);

        stateText = new JTextArea();
        stateText.setLineWrap(true);
        stateText.setEditable(false);
        stateText.setVisible(true);
        stateText.setSize(100, 25);
        stateText.setLocation(10, 30);

        phaseLabel = new JLabel("PHASE:");
        phaseLabel.setSize(100, 45);
        phaseLabel.setLocation(10, 50);

        phaseText = new JTextArea();
        phaseText.setLineWrap(true);
        phaseText.setEditable(false);
        phaseText.setVisible(true);
        phaseText.setSize(100, 25);
        phaseText.setLocation(10, 80);

        timeLabel = new JLabel("PHASE TIME:");
        timeLabel.setSize(100, 45);
        timeLabel.setLocation(10, 100);

        timeText = new JTextArea();
        timeText.setLineWrap(true);
        timeText.setEditable(false);
        timeText.setVisible(true);
        timeText.setSize(100, 25);
        timeText.setLocation(10, 130);

        start = new JButton();
        start.setText("START");
        start.setSize(100, 50);
        start.setLocation(10, 340);
        start.addMouseListener(this);

        stop = new JButton();
        stop.setText("STOP");
        stop.setSize(100, 50);
        stop.setLocation(110, 340);
        stop.addMouseListener(this);

        scrollPane = new JScrollPane(logText);
        scrollPane.setSize(370, 350);
        scrollPane.setLocation(400, 50);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);

        logLabel = new JLabel("LOG:");
        logLabel.setSize(100, 45);
        logLabel.setLocation(400, 10);

        add(stop);
        add(pointLabel);
        add(pointText);
        add(phaseLabel);
        add(stateLabel);
        add(timeLabel);
        add(logLabel);
        add(start);
        add(scrollPane, BorderLayout.CENTER);
        add(stateText);
        add(phaseText);
        add(timeText);
        setVisible(true);}

    /**
     *
     * @param in Schreibt die mitgegebene Nachricht in das Log-Fenster
     */</source-code>
          </source-codes>
        </operation>
        <operation id="oc13a55c6538d41b99731965d359500fe705" name="printLog" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="in" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{       
        // Schreibt eine Nachricht in das Log-Fenster
        logText.append(in + "\n");
        scrollDown();}</source-code>
          </source-codes>
        </operation>
        <operation id="o843cafc8deb443a0bc4ff66f3d58914b705" name="scrollDown" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        /*
         int max;
   
         max = scrollPane.getVerticalScrollBar().getMaximum();
         scrollPane.getVerticalScrollBar().setValue( max );
         scrollPane.repaint();
         */}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o4796d6e5f97a47028c582c8dd3d90f21705" name="mouseClicked" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="e" type="MouseEvent" type-id="MouseEvent" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        if (e.getButton() == MouseEvent.BUTTON1){
            if (e.getClickCount() == 1){
                // connect
                if (e.getSource() == start){
                    try{
                        Main.startServer();} catch (InterruptedException ex){
                        Logger.getLogger(InterfacePanel.class.getName()).log(Level.SEVERE, null, ex);} catch (IOException ex){
                        Logger.getLogger(InterfacePanel.class.getName()).log(Level.SEVERE, null, ex);}}

                // disconect
                if (e.getSource() == stop){
                    Main.stopServer();}}}}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o63b2aaaf971e4be0bc8e9a7c55f4fc4f705" name="mousePressed" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="e" type="MouseEvent" type-id="MouseEvent" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o0713648b65004360be2f15a06ec51471705" name="mouseReleased" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="e" type="MouseEvent" type-id="MouseEvent" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="ob3c35aee5497425391d232f941ed338f705" name="mouseEntered" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="e" type="MouseEvent" type-id="MouseEvent" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="ocfee57ede33e4487be4bd3f5fde90261705" name="mouseExited" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="e" type="MouseEvent" type-id="MouseEvent" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="odd5177c56f4c4eaa8f0becbe56bd8330705" name="stateChanged" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="e" type="ChangeEvent" type-id="ChangeEvent" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o02eaf00b9b1646ccbc59471ef341c126705" name="update" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="o" type="Observable" type-id="Observable" default-value="" />
            <parameter id="" name="arg" type="Object" type-id="Uml.Object" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        String[ send = (String[) arg;

        String gamePoints = send[0;
        String gamePhase = send[1;
        String gameState = send[2;
        String gameTime = send[3;
        
        printLog(send[5);

        pointText.setText(gamePoints);
        phaseText.setText(gamePhase);
        stateText.setText(gameState);
        timeText.setText(gameTime);}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di122191716814045261" cid="C009" type="class" name="RefboxFrame" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/30/2014 22:45:43">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a909ff4f83553412d9b341e494aed47a6708" name="sizeX" type="int" type-id="int" visibility="package" abstract="false" virtual="false" default-value="400" />
        <attribute id="ac5bf067db42a4c5fb62c912b0f76c681708" name="sizeY" type="int" type-id="int" visibility="package" abstract="false" virtual="false" default-value="400" />
        <attribute id="a6516bd59017f4d129b21264dc8ed2a27708" name="applikation" type="JFrame" type-id="JFrame" visibility="package" abstract="false" virtual="false" />
        <attribute id="af69719e3c37d46228ed09a201904fcbe708" name="container" type="Container" type-id="Container" visibility="package" abstract="false" virtual="false" />
        <attribute id="a6f1245f6137e4bafbff037573a555da3708" name="panel" type="RefboxPanel" type-id="RefboxPanel" visibility="public" abstract="false" virtual="false" />
      </attributes>
      <operations>
        <operation id="o13c690e63afa45de81e4b98e11a78b5a708" name="RefboxFrame" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="interfacePanel" type="InterfacePanel" type-id="InterfacePanel" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
          applikation = new JFrame("Refbox");
          container = applikation.getContentPane();
          
          panel = new RefboxPanel(sizeX, sizeY, this, interfacePanel);
      
          
          applikation.setSize(sizeX, sizeY);
          applikation.setLocation(100, 100);
          
          applikation.add(panel);
          applikation.setVisible(true);}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oa5aa0e199e354988b73f451684dd4b57708" name="actionPerformed" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="e" type="ActionEvent" type-id="ActionEvent" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di569954485649187275" cid="C010" type="class" name="RefboxPanel" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/30/2014 22:45:43">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a96f2b7c8530a437690ddebeb5a8e9ac6714" name="frame" type="RefboxFrame" type-id="RefboxFrame" visibility="package" abstract="false" virtual="false" />
        <attribute id="aa22c9a98bb4e43a187f9f35e688b8b05714" name="interfacePanel" type="InterfacePanel" type-id="InterfacePanel" visibility="package" abstract="false" virtual="false" />
      </attributes>
      <operations>
        <operation id="oe61d05ff01324a5e88386c3afdc826eb714" name="JTextField" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">
    JTextField port = new</source-code>
          </source-codes>
        </operation>
        <operation id="o18600f9aff0f4113881eb4e82f7efcbb714" name="JTextField" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">
    JTextField roboname = new</source-code>
          </source-codes>
        </operation>
        <operation id="of01fbf7d12fe4b75bfa22ab5e8ae2f33714" name="JTextField" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">

    JButton ok = new</source-code>
          </source-codes>
        </operation>
        <operation id="o85cc6eefab144fc08342c3f5e5312185714" name="JButton" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <source-codes />
        </operation>
        <operation id="o54b9260be4854830850d9625d9b194e7714" name="RefboxPanel" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="sizeX" type="int" type-id="int" default-value="" />
            <parameter id="" name="sizeY" type="int" type-id="int" default-value="" />
            <parameter id="" name="frame" type="RefboxFrame" type-id="RefboxFrame" default-value="" />
            <parameter id="" name="interfacePanel" type="InterfacePanel" type-id="InterfacePanel" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.interfacePanel = interfacePanel;
        this.frame = frame;

        setLayout(null);
        setLocation(0, 0);
        setSize(sizeX, sizeY);
        setBackground(Color.ORANGE);

        ip.setText(Main.refBoxIp);
        ip.setLocation(200, 100);
        ip.setSize(180, 40);

        port.setText(Main.refBoxPortIn + "");
        port.setLocation(200, 150);
        port.setSize(180, 40);

        roboname.setText(Main.name);
        roboname.setLocation(200, 200);
        roboname.setSize(180, 40);

        portLabel.setSize(100, 45);
        portLabel.setLocation(100, 150);

        nameLabel.setSize(100, 45);
        nameLabel.setLocation(100, 200);

        ipLabel.setSize(100, 45);
        ipLabel.setLocation(100, 100);

        ok.setText("OK");
        ok.setSize(100, 50);
        ok.setLocation(10, 320);
        ok.addMouseListener(this);

        add(roboname);
        add(nameLabel);
        add(port);
        add(portLabel);
        add(ipLabel);
        add(ip);
        add(ok);
        setVisible(true);}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o92d67db5d7b6491fad24c117d48daaec714" name="mouseClicked" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="e" type="MouseEvent" type-id="MouseEvent" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{

        if (e.getButton() == MouseEvent.BUTTON1){

            if (e.getClickCount() == 1){

                // Zulaufventil
                if (e.getSource() == ok){
                    try{
                        Main.setIpRefbox(ip.getText());
                        Main.setNameRobo(roboname.getText());
                        frame.applikation.dispose();
                        interfacePanel.printLog("Refbox-IP wurde auf " + Main.refBoxIp + ":" + Main.refBoxPortIn + " geändert!");} catch (IOException ex){}}}}}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="of36439d1db3d4ceb83282beb5f22e1cc714" name="mousePressed" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="e" type="MouseEvent" type-id="MouseEvent" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o38eefce9735547ec8fad66c8bd67d921714" name="mouseReleased" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="e" type="MouseEvent" type-id="MouseEvent" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o0cca3bb2ea1b4df4a42ba85e9c3ba438714" name="mouseEntered" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="e" type="MouseEvent" type-id="MouseEvent" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="oe81a248dd4da4256abe235fa45bc408e714" name="mouseExited" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="e" type="MouseEvent" type-id="MouseEvent" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di247661508823898965" cid="C011" type="class" name="UserFrame" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/30/2014 22:45:43">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="aaa337fff1c7d4fe78036dbd0839d1d7e719" name="sizeX" type="int" type-id="int" visibility="package" abstract="false" virtual="false" default-value="800" />
        <attribute id="a8a06d1e8c703470b80450c4b35a15a3a719" name="sizeY" type="int" type-id="int" visibility="package" abstract="false" virtual="false" default-value="500" />
        <attribute id="a10ca05a32d7e4a8dbeaf1dbb6e8d7e0f719" name="application" type="JFrame" type-id="JFrame" visibility="package" abstract="false" virtual="false" />
        <attribute id="abce23aee3a4f4f5b86813b7f7ac21676719" name="container" type="Container" type-id="Container" visibility="package" abstract="false" virtual="false" />
        <attribute id="a22cb9eca38894f4bba0c3e75e0d488f8719" name="menuBar" type="JMenuBar" type-id="JMenuBar" visibility="package" abstract="false" virtual="false" />
        <attribute id="a7053337c0cbf4632a0274236fa7d2590719" name="opt" type="RefboxFrame" type-id="RefboxFrame" visibility="public" abstract="false" virtual="false" />
        <attribute id="ab942bbddf13f44afa5178b613acbd42e719" name="panel" type="InterfacePanel" type-id="InterfacePanel" visibility="public" abstract="false" virtual="false" />
      </attributes>
      <operations>
        <operation id="o5668897497354451a856e23d861ee4bd719" name="UserFrame" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        application = new JFrame("ServerSolidus");
        container = application.getContentPane();

        // Menüleiste erzeugen
        menuBar = new JMenuBar();

        // Menüelemente erzeugen
        fileMenu = new JMenu("Datei");
        optMenu = new JMenu("Optionen");

        // Untermenüelemente erzeugen
        exitItem = new JMenuItem("Beenden");
        exitItem.addActionListener(this);
        refboxItem = new JMenuItem("Refbox");
        refboxItem.addActionListener(this);
        roboItem = new JMenuItem("Robotino");
        roboItem.addActionListener(this);

        // Menüelemente hinzufügen
        menuBar.add(fileMenu);
        menuBar.add(optMenu);

        // Untermenüelemente hinzufügen
        fileMenu.add(exitItem);
        optMenu.add(refboxItem);
        optMenu.add(roboItem);

        // Textfeld erzeugen
        application.add(menuBar, BorderLayout.NORTH);
        application.setSize(sizeX, sizeY);
        application.setLocation(100, 100);
        application.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        panel = new InterfacePanel(sizeX, sizeY);

        application.add(panel);
        application.setVisible(true);}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o0bdfbe5bda044f7bb432ea528cae611f719" name="actionPerformed" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="object" type="ActionEvent" type-id="ActionEvent" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{

        if (object.getSource() == exitItem){
            System.exit(0);}
        if (object.getSource() == refboxItem){
            opt = new RefboxFrame(panel);}
        if (object.getSource() == roboItem){}}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di709321950390303967" cid="C012" type="class" name="Cell" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/30/2014 22:45:43">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="aacd4938f73f6413cbe18f36bb75a015e727" name="free" type="boolean" type-id="boolean" visibility="private" abstract="false" virtual="false" default-value="true" />
        <attribute id="a3f05045d18b8440e9ae433dd102818e2727" name="direction" type="int" type-id="int" visibility="private" abstract="false" virtual="false" default-value="800" />
        <attribute id="abf09479a766c4490beec0d885f9c26fd727" name="x" type="int" type-id="int" visibility="private" abstract="false" virtual="false" default-value="0" />
        <attribute id="ae77e4078b56c405aa74905c44f4ab3ea727" name="y" type="int" type-id="int" visibility="private" abstract="false" virtual="false" default-value="0" />
        <attribute id="adca1666810954d3599ee2cd7159a19da727" name="id" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" />
        <attribute id="aac49bff1a0c74dcea3406a7efc248b74727" name="mTyp" type="String" type-id="Uml.String" visibility="private" abstract="false" virtual="false" default-value="null" />
      </attributes>
      <operations>
        <operation id="o48c5e118bbc74fabbbee19534c9dd3e9727" name="Cell" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="x" type="int" type-id="int" default-value="" />
            <parameter id="" name="y" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.x = x;
        this.y = y;}</source-code>
          </source-codes>
        </operation>
        <operation id="oa6cf6c5b91a944c99fda09202636c01b727" name="isFree" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return free;}</source-code>
          </source-codes>
        </operation>
        <operation id="ob11c18a9fd784b0bac4bb23af1ab32d4727" name="setFree" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="free" type="boolean" type-id="boolean" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.free = free;}</source-code>
          </source-codes>
        </operation>
        <operation id="oe06360085e8542b3bdd631e9652de077727" name="getDirection" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return direction;}</source-code>
          </source-codes>
        </operation>
        <operation id="o7b175b5a8fca4cf488eca9d74fd8567b728" name="getRealY" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return realY;}</source-code>
          </source-codes>
        </operation>
        <operation id="ob3ace4096f5e4d3098d81c5dd5954fa4728" name="setRealY" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="realY" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.realY = realY;}</source-code>
          </source-codes>
        </operation>
        <operation id="o66075488be6c4a1b9094a11e867b95ff728" name="getRealX" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return realX;}</source-code>
          </source-codes>
        </operation>
        <operation id="o176573e3a7644eca9974f25a68b78636728" name="setRealX" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="realX" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.realX = realX;}</source-code>
          </source-codes>
        </operation>
        <operation id="o0f55ced45cf04643baa15986204c0bce728" name="setDirection" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="direction" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.direction = direction;}</source-code>
          </source-codes>
        </operation>
        <operation id="o71d875437aba46bab96e1a3250d6e40a728" name="getX" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return x;}</source-code>
          </source-codes>
        </operation>
        <operation id="o7d5330afe1e849d19f8ada36db8c2555728" name="setX" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="xval" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.x = xval;}</source-code>
          </source-codes>
        </operation>
        <operation id="o83d88292b7ad47fd84f68bbd70386fd3728" name="getY" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return y;}</source-code>
          </source-codes>
        </operation>
        <operation id="o35813cc2d03440dbbdc10078236774be728" name="setY" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="yval" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.y = yval;}</source-code>
          </source-codes>
        </operation>
        <operation id="o6bc0c3f923a94cf892e3197a87546331728" name="getId" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return id;}</source-code>
          </source-codes>
        </operation>
        <operation id="oba895bd3fded4753a3f6af89d57a14fc728" name="setId" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="id" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.id = id;}</source-code>
          </source-codes>
        </operation>
        <operation id="obe0ed506cd15450db83633bb2b2a9990728" name="getMachineNr" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return Integer.parseInt(id.substring(1));  //Cut the first letter}</source-code>
          </source-codes>
        </operation>
        <operation id="of455c34765a74009a5b4afa3e38bc31d728" name="getmTyp" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return mTyp;}</source-code>
          </source-codes>
        </operation>
        <operation id="obb6ac429e8d24c0698011a52a3aca8ab728" name="setmTyp" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="mTyp" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.mTyp = mTyp;}</source-code>
          </source-codes>
        </operation>
        <operation id="o575bd5da542c494398f8552455669431728" name="paint" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="g" type="Graphics" type-id="Graphics" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        if (free == true){
            g.setColor(Color.LIGHT_GRAY);} else{
            g.setColor(Color.red);}
        g.fillRect(0, 0, 50, 50);

        if (free == false &amp;&amp; direction == WEST){
            g.setColor(Color.BLACK);
            g.drawLine(15, 25, 35, 25); // start x,y ende x,y
            g.drawLine(25, 15, 25, 25);}
        if (free == false &amp;&amp; direction == EAST){
            g.setColor(Color.BLACK);
            g.drawLine(15, 25, 35, 25); // ---
            g.drawLine(25, 25, 25, 35);   // |}

        if (free == false &amp;&amp; direction == NORTH){
            g.setColor(Color.BLACK);
            g.drawLine(25, 25, 35, 25); // ---
            g.drawLine(25, 15, 25, 35);   // |}

        if (free == false &amp;&amp; direction == SOUTH){
            g.setColor(Color.BLACK);
            g.drawLine(15, 25, 25, 25); // ---
            g.drawLine(25, 15, 25, 35);   // |}
        if (!free){
            g.drawString(getDirLetter(), 35, 48);}
        g.setColor(Color.black);
        g.drawString(x + "/" + this.y, 5, 13);
        g.drawString(this.id, 5, 48);}</source-code>
          </source-codes>
        </operation>
        <operation id="o5545f8b82b6a4c418707c71348d09d98728" name="getDirLetter" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return getDirLetterFromPhi(direction);}</source-code>
          </source-codes>
        </operation>
        <operation id="of6a06c8928d540c8a2f387a51ae7ccd7728" name="getDirLetterFromPhi" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="direction" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        switch (direction){
            case 0:
                return "W";
            case 90:
                return "N";
            case 180:
                return "E";
            case 270:
                return "S";
            default:
                return null;}}</source-code>
          </source-codes>
        </operation>
        <operation id="o1e81d7af2acf4be8ba2092ee222614f1728" name="getPhiFromDirLetter" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="letter" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        switch (letter){
            case "W":
                return 0;
            case "N":
                return 90;
            case "E":
                return 180;
            case "S":
                return 270;
            default:
                return -1;}}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di270481333287799639" cid="C013" type="class" name="FieldCommander" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/30/2014 22:45:43">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="a4fcacd03da8a4f0abdb691e56afb216a740" name="county" type="int" type-id="int" visibility="package" abstract="false" virtual="false" default-value="0" />
        <attribute id="ac961ac58108f4ce6a25f00927045fb90740" name="countx" type="int" type-id="int" visibility="package" abstract="false" virtual="false" default-value="0" />
      </attributes>
      <operations>
        <operation id="o9444623bb59c454fa9548f88f5ce6b6d740" name="HashMap" type="" type-id="" visibility="package" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">    //Map for Machine-ID-Access

    /**
    * Singleton Pattern Constructor
    * @return the only instance to FieldCommander 
    */</source-code>
          </source-codes>
        </operation>
        <operation id="o1bc36b6f901f4656990f2e6322e19602740" name="getInstance" type="FieldCommander" type-id="FieldCommander" visibility="public" abstract="false" virtual="false" static="true">
          <source-codes>
            <source-code language="Undefined">{
      if(instance==null){
        instance=new FieldCommander();}
      return instance;}</source-code>
          </source-codes>
        </operation>
        <operation id="o7ae647f631874f0ea4acad75aa761bbb740" name="FieldCommander" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        initFieldModel();
        initFieldGraphic();}</source-code>
          </source-codes>
        </operation>
        <operation id="o53483a47bac640bead50ae54802d4068740" name="initFieldGraphic" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        this.setLayout(null);
        this.setSize(1250, 700);
        this.addWindowListener(new WindowAdapter(){
            @Override
            public void windowClosing(WindowEvent e){
                System.exit(0);}});}</source-code>
          </source-codes>
        </operation>
        <operation id="of908bf1d7ff74541a98f93c832415928740" name="initFieldModel" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        //&lt;editor-fold defaultstate="collapsed" desc="free cell definitions"&gt;
        for (int y = starty + 31; y &lt; 563; y = y + 56) // 50 von oben weg und dann in 56er schritten weiter{
            for (int x = 50 + 34; x &lt; 563 + startx - 50; x = x + 56) // 50 von der Seite weg und dann in 56er schritten{
                cell[countx[county = new Cell(countx, county);
                cell[countx[county.setLayout(null);
               // cell[countx][county].setX(x);
               // cell[countx][county].setY(y);
                cell[countx[county.setRealX(-(x + 25 - startx) * 10); // effektiver x wert setzten
                cell[countx[county.setRealY((y + 25 - starty) * 10); // effektiver y wert setzen
                cell[countx[county.setLocation(x, y); // hier gibst du lediglich den Offset von der Seite aus an
                cell[countx[county.setSize(50, 50); // hier die grösse des Panels ( da eine Zelle 0,5 m gross ist 50
                cell[countx[county.setId("");
                this.add(cell[countx[county);
                countx++;}
            countx = 0;
            county++;}
//&lt;/editor-fold&gt;

        //&lt;editor-fold defaultstate="collapsed" desc="Machine Definitions"&gt;
        setCell(10, 2, "M13", false, WEST);
        machineMap.put("M13", cell[10[2);

        setCell(10, 4, "M14", false, EAST);
        machineMap.put("M14", cell[10[4);

        setCell(10, 8, "R2", false, NORTH);
        machineMap.put("R2", cell[10[8);

        setCell(12, 2, "M15", false, NORTH);
        machineMap.put("M15", cell[12[2);

        setCell(12, 4, "M16", false, SOUTH);
        machineMap.put("M16", cell[12[4);
        setCell(12, 6, "M17", false, SOUTH);
        machineMap.put("M17", cell[12[6);

        setCell(14, 2, "M18", false, EAST);
        machineMap.put("M18", cell[14[2);

        setCell(14, 6, "M19", false, WEST);
        machineMap.put("M19", cell[14[6);

        setCell(14, 8, "M20", false, SOUTH);
        machineMap.put("M20", cell[14[8);
        setCell(16, 2, "M21", false, NORTH);
        machineMap.put("M21", cell[16[2);

        setCell(16, 4, "M22", false, EAST);
        machineMap.put("M22", cell[16[4);

        setCell(16, 8, "M23", false, WEST);
        machineMap.put("M23", cell[16[8);

        setCell(18, 8, "M24", false, WEST);
        machineMap.put("M15", cell[18[8);

        setCell(8, 2, "M1", false, WEST);
        machineMap.put("M1", cell[8[2);

        setCell(8, 4, "M2", false, EAST);
        machineMap.put("M2", cell[8[4);

        setCell(8, 8, "R1", false, SOUTH);
        machineMap.put("R1", cell[8[8);

        setCell(6, 2, "M3", false, SOUTH);
        machineMap.put("M3", cell[6[2);

        setCell(6, 4, "M4", false, NORTH);
        machineMap.put("M4", cell[6[4);

        setCell(6, 6, "M5", false, NORTH);
        machineMap.put("M5", cell[6[6);

        setCell(4, 2, "M6", false, EAST);
        machineMap.put("M6", cell[4[2);

        setCell(4, 6, "M7", false, WEST);
        machineMap.put("M7", cell[4[6);

        setCell(4, 8, "M8", false, NORTH);
        machineMap.put("M8", cell[4[8);

        setCell(0, 8, "M12", false, WEST);
        machineMap.put("M12", cell[0[8);

        setCell(2, 2, "M9", false, SOUTH);
        machineMap.put("M9", cell[2[2);

        setCell(2, 4, "M10", false, EAST);
        machineMap.put("M10", cell[2[4);

        setCell(2, 8, "M11", false, WEST);
        machineMap.put("M11", cell[2[8);
        
        
        setCell(6,0,"P1",true,EAST);
        setCell(12,0,"P2",true,EAST);// Puck cells
//&lt;/editor-fold&gt;}</source-code>
          </source-codes>
        </operation>
        <operation id="oc0d1199a9f4b45ecac46cfde824643cf741" name="setCell" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="x" type="int" type-id="int" default-value="" />
            <parameter id="" name="y" type="int" type-id="int" default-value="" />
            <parameter id="" name="id" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="free" type="boolean" type-id="boolean" default-value="" />
            <parameter id="" name="dir" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        cell[x[y.setId(id);
        cell[x[y.setFree(free);
        cell[x[y.setDirection(dir);}</source-code>
          </source-codes>
        </operation>
        <operation id="o45c9787f7cd140cea5ad825bf72fd908741" name="paint" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="g" type="Graphics" type-id="Graphics" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        g.setColor(Color.red);
        // Field Frame
        g.drawRect(startx, starty, 563, 563);
        g.drawRect(50, 50, 563, 563);

        // Pucks symbolisch
        g.fillOval(395 + 50 - 10, 50 + 10, 20, 20);
        g.fillOval(50 + 731 - 10, 50 + 10, 20, 20);
        
        //&lt;editor-fold defaultstate="collapsed" desc="Delivery Gates"&gt;
        g.setColor(Color.black);
        g.drawLine(50 + 20, 50 + 280, 50 + 35, 50 + 280);
        g.drawLine(50 + 20, 50 + 270, 50 + 20, 50 + 290);
        g.drawString("D1", 50 + 2, 50 + 250);

        g.drawLine(50 + 20, 50 + 245, 50 + 35, 50 + 245);
        g.drawLine(50 + 20, 50 + 235, 50 + 20, 50 + 255);
        g.drawString("D2", 50 + 2, 50 + 285);

        g.drawLine(50 + 20, 50 + 315, 50 + 35, 50 + 315);
        g.drawLine(50 + 20, 50 + 305, 50 + 20, 50 + 325);
        g.drawString("D3", 50 + 2, 50 + 320);

        g.drawLine(50 + 1125 - 20, 50 + 280, 50 + 1125 - 35, 50 + 280);
        g.drawLine(50 + 1125 - 20, 50 + 270, 50 + 1125 - 20, 50 + 290);
        g.drawString("D4", 50 + 1108, 50 + 250);

        g.drawLine(50 + 1125 - 20, 50 + 245, 50 + 1125 - 35, 50 + 245);
        g.drawLine(50 + 1125 - 20, 50 + 235, 50 + 1125 - 20, 50 + 255);
        g.drawString("D5", 50 + 1108, 50 + 285);

        g.drawLine(50 + 1125 - 20, 50 + 315, 50 + 1125 - 35, 50 + 315);
        g.drawLine(50 + 1125 - 20, 50 + 305, 50 + 1125 - 20, 50 + 325);
        g.drawString("D6", 50 + 1108, 50 + 320);
//&lt;/editor-fold&gt;}</source-code>
          </source-codes>
        </operation>
        <operation id="oeeaf096eff974af28c8bb929ac03d7ac741" name="main" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        FieldCommander f = new FieldCommander();

        f.setVisible(true);
        System.out.println(f.cell[5[1.getRealX());
            System.out.println(f.cell[5[1.getRealY());
// hier kann die Mittelpunktkoordianten des Panels abgefragt werden ( evtl brauchen wir noch eine Variable mehr mit dem Effektivwert )
        System.out.println(f.cell[5[4.getRealX());
            System.out.println(f.cell[5[4.getRealY());
       // System.out.println(f.cell[0][0].getRealY());
        //System.out.println(f.cell[0][0].getRealX());}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di787343906157236523" cid="C014" type="class" name="ComView" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/30/2014 22:45:43">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes>
        <attribute id="aa1b5d81a9b0f45e0b8aa7bed96ea1463750" name="counter" type="int" type-id="int" visibility="package" abstract="false" virtual="false" default-value="0" />
        <attribute id="a46973f0f56b2492b8ddefe965f25bd8b750" name="com" type="UDPServer" type-id="UDPServer" visibility="package" abstract="false" virtual="false" />
        <attribute id="a4253b47f939c4b18af648261819ac11b750" name="serverSocket" type="DatagramSocket" type-id="DatagramSocket" visibility="package" abstract="false" virtual="false" />
        <attribute id="a901d13abd6464e9ca3f8a0e672e73c42750" name="x" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="a7849f014c2ab4b019d42523720cd9e7d750" name="y" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="aa915920d06ca4980a0ebc1ad642c10ac750" name="phi" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="ae436cb9e06444d01aef282cba3b80eb4750" name="check" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="a2336b07a47d444ad81cbafc766b9e55d750" name="station" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="a02cdefd6843941258316bb69fb04a568750" name="go" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="a1f4a9e9c4c0640c59c1729a6912cfd2c750" name="phase" type="int" type-id="int" visibility="private" abstract="false" virtual="false" />
        <attribute id="a901c24c482a64eb38107c9bf3c280b30750" name="ready" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="a3c8d2395e5204d79b571063f5bb0d348750" name="red" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="ad6c652d1d0d04cbca053afc6d61ef6a9750" name="orange" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="a94a296dfd09e470092df3646ffdcf12a750" name="green" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="aa704c3268873421ab8ba036c33ed4776750" name="ende" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="a620b9f46343743ef9f1501a62c15efce750" name="xAktuell" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="a35956f9df6364edc9daa2a1c6a853790750" name="yAktuell" type="int" type-id="int" visibility="package" abstract="false" virtual="false" />
        <attribute id="a0e0b969d0cba4cc998e4913d0fdfc9a9750" name="run" type="boolean" type-id="boolean" visibility="public" abstract="false" virtual="false" default-value="true" />
      </attributes>
      <operations>
        <operation id="o263794d4dcb443e5a752126505d3252c750" name="getInstance" type="ComView" type-id="ComView" visibility="public" abstract="false" virtual="false" static="true">
          <source-codes>
            <source-code language="Undefined">{
        if (instance == null){
            instance = new ComView();}
        return instance;}</source-code>
          </source-codes>
        </operation>
        <operation id="od26e71fa30d14d78af6b7fcbd63ce58e750" name="ComView" type="" type-id="" visibility="private" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        // this.laser = laser;
        // Reverentieren
        com = new UDPServer();
        breaking = LaserControlledBreaking.getInstance();

        // msg = new int[10];
        x = 0;
        y = 0;
        phi = 0;
        check = 0;
        station = 0;
        go = 0;
        phase = 0;

        ready = 0;
        red = 0;
        orange = 0;
        green = 0;
        ende = 0;
        xAktuell = 0;
        yAktuell = 0;}

    @Override</source-code>
          </source-codes>
        </operation>
        <operation id="o263cb6d10d27499abc6e2c77a0b41cf9750" name="run" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        while (run == true){
            try{
                serverSocket = new DatagramSocket(5000);
                int[ sendKoor ={
                    x, y, phi, station, phase, go, breaking.getBremsfaktor(), 0};

                com.sendViewMessage(sendKoor, "127.0.0.1", 5001);

                int[ msg = com.getViewMessagr(serverSocket);
                ready = msg[0;
                red = msg[1;
                orange = msg[2;
                green = msg[3;
                ende = msg[4;
                xAktuell = msg[5;
                yAktuell = msg[6;
                serverSocket.close();} catch (Exception ex){
                Logger.getLogger(ComView.class.getName()).log(Level.SEVERE, null, ex);}
            try{
                Thread.sleep(100);} catch (InterruptedException ex){
                Logger.getLogger(ComView.class.getName()).log(Level.SEVERE, null, ex);}}}</source-code>
          </source-codes>
        </operation>
        <operation id="o1f73708e8fc64048878b9bdc93a0f65c750" name="setGo" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="go" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.go = go;}

    /**
     * Gibt die zuletzt gelesenen Lampenfarben zurück: rot,orange,grün 0 = aus,
     * 1 = leuchtet, 2 = blinkt
     *
     * @return
     */</source-code>
          </source-codes>
        </operation>
        <operation id="of5f4d1d75c3d4ffe86a34aeab640c608750" name="getLamp" type="int[]" type-id="int[]" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        int[ lamp ={
            red, orange, green};
        return lamp;}</source-code>
          </source-codes>
        </operation>
        <operation id="o0de516bf6f764473b25a28e942d0b9b8750" name="getReady" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        // System.out.println("&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; GET NOW READY &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;");
        return ready;}</source-code>
          </source-codes>
        </operation>
        <operation id="o269c8e115519438eb62ec6e73b6d9912750" name="getEnde" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{

        //  System.out.println("Ende wurde empfagnen: " + ende);
        return ende;}

    /**
     * Gibt befehl die Station anzufahren 1/0
     *
     * @return
     */</source-code>
          </source-codes>
        </operation>
        <operation id="ob19e6df2a3e44cf48fa18998534ea018750" name="setStation" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="go" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{

        station = go;
        System.out.println(station);}</source-code>
          </source-codes>
        </operation>
        <operation id="o2c1f71c74670453fab47cbfc2a89a8ed750" name="setKoords" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="x" type="int" type-id="int" default-value="" />
            <parameter id="" name="y" type="int" type-id="int" default-value="" />
            <parameter id="" name="phi" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{

        this.x = x;

        this.y = y;

        this.phi = phi;}</source-code>
          </source-codes>
        </operation>
        <operation id="o8d70f078a64c463c9a99d940a964e876750" name="getPhase" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return phase;}</source-code>
          </source-codes>
        </operation>
        <operation id="o86025bd5d3a940f5960e4c49dfa5fa4a750" name="setPhase" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="phase" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        this.phase = phase;}</source-code>
          </source-codes>
        </operation>
        <operation id="o8a0cc6447bab4f66aed3fc769d30384f751" name="getxAktuell" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return xAktuell;}</source-code>
          </source-codes>
        </operation>
        <operation id="od771b715fdea49bca5d4eddea1d5372c751" name="getyAktuell" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{
        return yAktuell;}</source-code>
          </source-codes>
        </operation>
        <operation id="oedef7c66b30045428362956953df73c9751" name="main" type="" type-id="" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="args" type="String" type-id="Uml.String" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws IOException{
        // TiM55x_Solidus laser = new TiM55x_Solidus();
        ComView com = new ComView();
        com.start();}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di955089112361553320" cid="C015" type="class" name="FileIO" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/30/2014 22:45:43">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="o78b92f07d72e47aeb2bf4d9602879b4d759" name="FileIO" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <source-codes>
            <source-code language="Undefined">{}
    
    //**********************************************************************************************************
    //******                                        READ                                                   *****
    //**********************************************************************************************************</source-code>
          </source-codes>
        </operation>
        <operation id="o133f2382af7c4fd6bc85d55315747a60759" name="getText" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="file" type="File" type-id="File" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws FileNotFoundException, IOException, InterruptedException{
        

        FileReader leser = new FileReader(file);
        int length =(int) file.length();
        char[ temp = new char[length;
        
        while (file.exists() == false);{
            //Thread.sleep(50);}
        
        leser.read(temp);
        leser.close();
        String out = String.valueOf(temp);

        return out;}</source-code>
          </source-codes>
        </operation>
        <operation id="o233f2fee209f40c090b36fcc63bd1323759" name="getLastChar" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="file" type="File" type-id="File" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws FileNotFoundException, IOException, InterruptedException{
        
        
        FileReader leser = new FileReader(file);
        int length =(int) file.length();
        char[ temp = new char[length;
        
        while (file.exists() == false);{
            //Thread.sleep(50);}
        
        leser.read(temp);
        leser.close();
        char temp2 = temp[length-1;
        String out = String.valueOf(temp2);

        return out;}
     
     /**
      * 
      * @param file
      * @return
      * @throws FileNotFoundException
      * @throws IOException 
      * Gibt den zweit letzten char[] platz zurück.
      * Da das Programm RoboView beim schreiben in ein Textdokument immer noch
      * einen Zeilenumbruch anfügt, muss der zweitletzte char[] gelesen werden
      * um das letzte Zeichen zu bekommen.
      */</source-code>
          </source-codes>
        </operation>
        <operation id="o2041176dfa3a42e091c2c898b1e3b980759" name="getSecendLastChar" type="String" type-id="Uml.String" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="file" type="File" type-id="File" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws FileNotFoundException, IOException, InterruptedException{
        
        
        FileReader leser = new FileReader(file);
        int length =(int) file.length();
        char[ temp = new char[length;
        
        while (file.exists() == false);{
            //Thread.sleep(50);}
        leser.read(temp);
        leser.close();
        char temp2 = temp[length-3;
        String out = String.valueOf(temp2);

        return out;}
    
   
    
    
    
    
    //**********************************************************************************************************
    //******                                        WRITH                                                  *****
    //**********************************************************************************************************

    
    
    // Dokument schreiben mit String</source-code>
          </source-codes>
        </operation>
        <operation id="o5d50aa3552b74f2d82b62065fa759153759" name="setText" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="temp" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="file" type="File" type-id="File" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws FileNotFoundException, IOException, InterruptedException{

        FileWriter schreiber = new FileWriter(file);
        
        while (file.exists() == false);{
            //Thread.sleep(50);}
        schreiber.write(temp);
        schreiber.flush();
        schreiber.close();}</source-code>
          </source-codes>
        </operation>
        <operation id="o561e1745b06a4af5b59a07bf54a37b03759" name="setOnlyNumber" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="temp" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="file" type="File" type-id="File" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws FileNotFoundException, IOException, InterruptedException{
            String chnge1 = ",";
            String chnge2 = "[";
            String chnge3 = "]";
        
// --------------------------   entfernt ","   ---------------------------------
            
            char[ stringArray1 = temp.toCharArray();
            String temp1 = "";
        
            for(int i = 0; i &lt; stringArray1.length; i++){
            
                if(String.valueOf(stringArray1[i).equals(chnge1) == false){
                    temp1 += String.valueOf(stringArray1[i).toString();}}
            
// --------------------------   entfernt "["   ---------------------------------
            
            char[ stringArray2 = temp1.toCharArray();
            String temp2 = "";
        
            for(int i = 0; i &lt; stringArray2.length; i++){
            
                if(String.valueOf(stringArray2[i).equals(chnge2) == false){
                    temp2 += String.valueOf(stringArray2[i).toString();}}
            
// --------------------------   entfernt "]"   ---------------------------------
            
            char[ stringArray3 = temp2.toCharArray();
            String out = "";
        
            for(int i = 0; i &lt; stringArray3.length; i++){
            
                if(String.valueOf(stringArray3[i).equals(chnge3) == false){
                    out += String.valueOf(stringArray3[i).toString();}}
            
            setText(out, file);}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
    <item id="di263390875607009427" cid="C016" type="class" name="UDPServer" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/30/2014 22:45:43">
      <stereotypes />
      <tagged-values />
      <associated-diagrams />
      <owned-items />
      <style class="default" />
      <attributes />
      <operations>
        <operation id="o2a2b2b1031d448dcbc2c69fc1cbc39d1775" name="getViewMessagr" type="int[]" type-id="int[]" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="serverSocket" type="DatagramSocket" type-id="DatagramSocket" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws Exception{
          
          
        
         
        byte[ receiveData = new byte[36; //
        byte[ in = new byte[36;

// bytes[] der seperaten Komponenten der zu lesenden Nachricht.
        
        byte[ id = new byte[1;
        byte[ length = new byte[2;
        byte[ check = new byte[1;

        byte[ in0 = new byte[4;
        byte[ in1 = new byte[4;
        byte[ in2 = new byte[4;
        byte[ in3 = new byte[4;
        byte[ in4 = new byte[4;
        byte[ in5 = new byte[4;
        byte[ in6 = new byte[4;
        byte[ in7 = new byte[4;
            
        DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
        serverSocket.receive(receivePacket);
                 
                 
       /* for (int i=0; i &lt; 36; i++ )
        {
            System.out.println("INPUT " + i + ": "+Array.getByte(receiveData, i));
        }*/
   
                  //String sentence = new String( receivePacket.getData());
                  in = receivePacket.getData();
                  
                  
                  
                  id[0 = in[0;
                  
                  length[1 = in[1;
                  length[0 = in[2;
                  
                  check[0 = in[3;
                  
                  // Nachricht 0
                  
                  in0[3 = in[4;
                  in0[2 = in[5;
                  in0[1 = in[6;
                  in0[0 = in[7;
                  
                  // Nachricht 1
                  
                  in1[3 = in[8;
                  in1[2 = in[9;
                  in1[1 = in[10;
                  in1[0 = in[11;
                  
                  // Nachricht 2
                  
                  in2[3 = in[12;
                  in2[2 = in[13;
                  in2[1 = in[14;
                  in2[0 = in[15;
                  
                  // Nachricht 3
                  
                  in3[3 = in[16;
                  in3[2 = in[17;
                  in3[1 = in[18;
                  in3[0 = in[19;
                  
                  // Nachricht 4
                  
                  in4[3 = in[20;
                  in4[2 = in[21;
                  in4[1 = in[22;
                  in4[0 = in[23;
                  
                  // Nachricht 5
                  
                  in5[3 = in[24;
                  in5[2 = in[25;
                  in5[1 = in[26;
                  in5[0 = in[27;
                  
                  // Nachricht 6
                  
                  in6[3 = in[28;
                  in6[2 = in[29;
                  in6[1 = in[30;
                  in6[0 = in[31;
                  
                  // Nachricht 7
                  
                  in7[3 = in[32;
                  in7[2 = in[33;
                  in7[1 = in[34;
                  in7[0 = in[35;
                  
                  int[ out = new int[8;
                  
                  
                 
                 out[0 = byteToInt(in0);
                 out[1 = byteToInt(in1);
                 out[2 = byteToInt(in2);
                 out[3 = byteToInt(in3);
                 out[4 = byteToInt(in4);
                 out[5 = byteToInt(in5);
                 out[6 = byteToInt(in6);
                 out[7 = byteToInt(in7);
                 
                /* 
                 System.out.println("Nachricht ist bereit zum senden");
                 
                   System.out.println("ID: " + byteToInt(id));
                   System.out.println("Length: " + byteToInt(length));
                   System.out.println("Check Number: " + byteToInt(check));
                   System.out.println("In 0: " + out[0]);
                   System.out.println("In 1: " + out[1]);
                   System.out.println("In 2: " + out[2]);
                   System.out.println("In 3: " + out[3]);
                   System.out.println("In 4: " + out[4]);
                   System.out.println("In 5: " + out[5]);
                   System.out.println("In 6: " + out[6]);
                   System.out.println("In 7: " + out[7]);
                   */
                   
                   return out;}
      
   
/**
 * 
 * Sendet das mitgegebene byte[] über den Port port an die Ip ip
 * @param sendData
 * @throws SocketException
 * @throws UnknownHostException
 * @throws IOException 
 */</source-code>
          </source-codes>
        </operation>
        <operation id="o039830ec364c48138998dd6a756a6296776" name="sendViewMessage" type="" type-id="" visibility="public" abstract="false" virtual="false" static="false">
          <parameters>
            <parameter id="" name="out" type="int" type-id="int" default-value="" />
            <parameter id="" name="ip" type="String" type-id="Uml.String" default-value="" />
            <parameter id="" name="port" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined"> throws SocketException, UnknownHostException, IOException, InterruptedException{
   /*
       System.out.println("SENDEN Nachricht 0: " + out[0]);
       System.out.println("SENDEN Nachricht 1: " + out[1]);
       System.out.println("SENDEN Nachricht 2: " + out[2]);
       System.out.println("SENDEN Nachricht 3: " + out[3]);
       System.out.println("SENDEN Nachricht 4: " + out[4]);
       System.out.println("SENDEN Nachricht 5: " + out[5]);
       System.out.println("SENDEN Nachricht 6: " + out[6]);
       System.out.println("SENDEN Nachricht 7: " + out[7]);
       */
       
       byte[ sendData = new byte[36;
       
       byte[ id = new byte[1;
       byte[ length = new byte[2;
       byte[ check = new byte[1;

       byte[ out0 = new byte[4;
       byte[ out1 = new byte[4;
       byte[ out2 = new byte[4;
       byte[ out3 = new byte[4;
       byte[ out4 = new byte[4;
       byte[ out5 = new byte[4;
       byte[ out6 = new byte[4;
       byte[ out7 = new byte[4;
       
      
       length = intToByte(2, 36);
       
       out0 = intToByte(4, out[0);
       out1 = intToByte(4, out[1);
       out2 = intToByte(4, out[2);
       out3 = intToByte(4, out[3);
       out4 = intToByte(4, out[4);
       out5 = intToByte(4, out[5);
       out6 = intToByte(4, out[6);
       out7 = intToByte(4, out[7);
       
        //Nachricht id
       
        sendData[0 = 0;
        
        //Nachricht länge ( ist immer 36 Byte)
        
        sendData[1 = length[1;
        sendData[2 = 0; // length[0] ergibt 9, sollte aber 0 ergeben???
        
        // senData[3] steht weiter unten und kann erst nach erstellen der restlichen
        // Nachricht erstellt werden.
        
        //Nachricht 0
        
        sendData[4 = out0[3;
        sendData[5 = out0[2;
        sendData[6 = out0[1;
        sendData[7 = out0[0;
        
        //Nachricht 1
        
        sendData[8 = out1[3;
        sendData[9 = out1[2;
        sendData[10 = out1[1;
        sendData[11 = out1[0;
        
        //Nachricht 2
        
        sendData[12 = out2[3;
        sendData[13 = out2[2;
        sendData[14 = out2[1;
        sendData[15 = out2[0;
        
        //Nachricht 3
        
        sendData[16 = out3[3;
        sendData[17 = out3[2;
        sendData[18 = out3[1;
        sendData[19 = out3[0;
        
        //Nachricht 4
        
        sendData[20 = out4[3;
        sendData[21 = out4[2;
        sendData[22 = out4[1;
        sendData[23 = out4[0;
        
        //Nachricht 5
        
        sendData[24 = out5[3;
        sendData[25 = out5[2;
        sendData[26 = out5[1;
        sendData[27 = out5[0;
        
        //Nachricht 6
        
        sendData[28 = out6[3;
        sendData[29 = out6[2;
        sendData[30 = out6[1;
        sendData[31 = out6[0;
        
        //Nachricht 7
        
        sendData[32 = out7[3;
        sendData[33 = out7[2;
        sendData[34 = out7[1;
        sendData[35 = out7[0;
        
        byte[ nutzdaten = new byte[32;
        
        // Stellt die, für dei Prüfsumme relevanten Bytes zusammen
        
        for (int i = 0; i &lt; 32 ; i++){
            if (i != 2){
               // System.out.println(i);
                nutzdaten[i = sendData[i;}}
        
        // Berechnet die Prüfsumme
        
        byte[ temp = intToByte(1, checksum(nutzdaten, nutzdaten.length));
        
        // Nachricht Prüfsumme
        
       sendData[3 = temp[0;
       
       // Konsolenausgabe
       /*
        for (int i=0; i &lt; 36; i++ )
        {
       
       if ( i == 4 || i == 8 || i == 12 || i == 16 || i == 20 || i == 24 || i == 28 || i == 32)
       {
           System.out.println("-- Nachricht " + ((i/4) - 1) + " --");
       }
       
       System.out.println("OUTPUT " + i + ": "+ Array.getByte(sendData, i));
        }
        */
   // ------------------------------- SENDEN -----------------------------------
        
        DatagramSocket send = new DatagramSocket();
        InetAddress ipadress = InetAddress.getByName( ip );
        send.connect(ipadress, port);
        
        send.send(new DatagramPacket(sendData, sendData.length));
       
        send.disconnect();
        Thread.sleep(100);}
   
// ----------------------- Byte[] zu Integer -----------------------------------
   
/**
 * Wandelt ein byte[] in einen Interger um, es muss ds zu umwandelnde byte[] mitgegeben werden
 * @param in
 * @return 
 */</source-code>
          </source-codes>
        </operation>
        <operation id="oc0b62a7aa24b498b86a3aafaeeaa4c83776" name="byteToInt" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="in" type="byte" type-id="byte" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
// byte[] -&gt; int
        int lenght = in.length;
        int number = 0;     
        for (int i = 0; i &lt; lenght; ++i){
            number |= (in[lenght-1-i &amp; 0xff) &lt;&lt; (i &lt;&lt; lenght-1);}

        return number;}
   
// ----------------------- Integer zu Byte[] -----------------------------------
 
   
   
/**
 * Wandelt einen Integer in einen byte[] um, es muss der zu umwandelnde Interger und die gewüscht bytelänge mitgegeben werden.
 * @param length
 * @param in
 * @return 
 */</source-code>
          </source-codes>
        </operation>
        <operation id="oaf4f5cf7c3af48699fe3bcb62a59bbcd776" name="intToByte" type="byte[]" type-id="byte[]" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="length" type="int" type-id="int" default-value="" />
            <parameter id="" name="in" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{
        byte[ data = new byte[length;

        // int -&gt; byte[]
        for (int i = 0; i &lt; length; ++i){
            int shift = i &lt;&lt; length-1; // i * 8
            data[length-1-i = (byte)((in &amp; (0xff &lt;&lt; shift)) &gt;&gt;&gt; shift);}
        return data;}
  
    
    
/**
 * Berechnet die Prüfsumme für das zu sendende byte[] (byte[3])
 * @param nutzdaten
 * @param nutzdatenLänge
 * @return 
 */</source-code>
          </source-codes>
        </operation>
        <operation id="o72615f86c33845e39e09a6fd546e1cce776" name="checksum" type="int" type-id="int" visibility="public" abstract="false" virtual="false" static="true">
          <parameters>
            <parameter id="" name="nutzdaten" type="byte" type-id="byte" default-value="" />
            <parameter id="" name="nutzdatenLänge" type="int" type-id="int" default-value="" />
          </parameters>
          <source-codes>
            <source-code language="Undefined">{  
 
    int s0 = 0;
    
    for(int i = 0; i &lt; nutzdatenLänge; ++i){
      s0 = ( s0 + nutzdaten[i )%256;}  
    return ( 0xFF-s0 );}</source-code>
          </source-codes>
        </operation>
      </operations>
      <template-parameters>
        <source-codes />
      </template-parameters>
    </item>
  </items>
  <models>
    <model id="p889815695475432417" name="Model 3" type="model" namespace="" order-index="1">
      <meta>
        <authors>
          <author> </author>
        </authors>
        <description />
        <creation-date>03/30/2014 22:43:36</creation-date>
        <change-date>01/01/0001 00:00:00</change-date>
        <revision-count>0</revision-count>
        <version />
      </meta>
      <tagged-values />
      <abstract-items />
      <sub-models />
      <diagram type="uml-class" id="p786068707403798673" name="ClassDiagram2" order-index="1" show-id="false" show-name="true" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" show-template-parameters="true" show-attributes="true" show-attribute-visibility="true" show-operations="true" show-operation-parameters="true" show-operation-visibility="true" show-nullability="true" show-sequence-number="false" show-extension-points="true" show-relationship-texts="true" auto-routed-paths="false">
        <style>
          <background-color index="1" color="#FFFFFFFF" />
          <background-color index="2" color="#FFFFFFFF" />
          <background-type type="solid" />
        </style>
        <meta>
          <authors>
            <author> </author>
          </authors>
          <description />
          <creation-date>03/30/2014 22:43:36</creation-date>
          <change-date>03/30/2014 22:43:36</change-date>
          <revision-count>0</revision-count>
          <version />
        </meta>
        <tagged-values />
        <abstract-items />
        <layer name="Default" visible="true" enabled="true" locked="false" />
      </diagram>
    </model>
    <model id="p666395824778476496" name="Model 4" type="model" namespace="" order-index="2">
      <meta>
        <authors>
          <author> </author>
        </authors>
        <description />
        <creation-date>03/30/2014 22:45:43</creation-date>
        <change-date>01/01/0001 00:00:00</change-date>
        <revision-count>0</revision-count>
        <version />
      </meta>
      <tagged-values />
      <abstract-items />
      <sub-models />
      <diagram type="uml-class" id="p155534908397046796" name="ClassDiagram3" order-index="1" show-id="false" show-name="true" show-parent-name="false" show-stereotypes="true" show-tagged-values="false" show-template-parameters="true" show-attributes="true" show-attribute-visibility="true" show-operations="true" show-operation-parameters="true" show-operation-visibility="true" show-nullability="true" show-sequence-number="false" show-extension-points="true" show-relationship-texts="true" auto-routed-paths="false">
        <style>
          <background-color index="1" color="#FFFFFFFF" />
          <background-color index="2" color="#FFFFFFFF" />
          <background-type type="vertical-linear" />
        </style>
        <meta>
          <authors>
            <author> </author>
          </authors>
          <description />
          <creation-date>03/30/2014 22:45:43</creation-date>
          <change-date>03/30/2014 22:57:22</change-date>
          <revision-count>0</revision-count>
          <version />
        </meta>
        <tagged-values />
        <abstract-items>
          <item id="di418829823786449070" cid="REL002" type="relationship" name="" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/30/2014 22:53:39">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <relation from="di270481333287799639" to="di709321950390303967">
              <start-role id="" name="" navigability="" association-type="composition" visibility="private" />
              <end-role id="" name="" navigability="" association-type="association" visibility="private" />
            </relation>
          </item>
          <item id="di746806355366717312" cid="PKG001" type="package" name="ComView" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/30/2014 22:55:19">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <nestedItems />
          </item>
          <item id="di230492395498192094" cid="PKG002" type="package" name="Refbox" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/30/2014 22:56:26">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <nestedItems />
          </item>
          <item id="di745802804895700409" cid="PKG003" type="package" name="Interface" style-class="default" is-abstract="false" is-root="false" is-leaf="false" is-active="false" creation-date="03/30/2014 22:57:22">
            <stereotypes />
            <tagged-values />
            <associated-diagrams />
            <owned-items />
            <style class="default" />
            <nestedItems />
          </item>
        </abstract-items>
        <layer name="Default" visible="true" enabled="true" locked="false">
          <item id="di291162450766602793" iid="33efee329dc14ac592163d547790ed50" creation-date="03/30/2014 22:45:43" order-index="1" type="entity">
            <layout ax="1153" ay="434" awidth="273" aheight="202" x="1153" y="434" width="273" height="202" angle="0" />
            <class />
          </item>
          <item id="di496661953338594605" iid="e130a30cfa4c40768b471277e9abde73" creation-date="03/30/2014 22:45:43" order-index="2" type="entity">
            <layout ax="277" ay="5" awidth="366" aheight="375" x="277" y="5" width="366" height="375" angle="0" />
            <class />
          </item>
          <item id="di418157854680675789" iid="6c363fc52aae41acbdbdeab8faaaad1c" creation-date="03/30/2014 22:45:43" order-index="3" type="entity">
            <layout ax="2" ay="2" awidth="224" aheight="458" x="2" y="2" width="224" height="458" angle="0" />
            <class />
          </item>
          <item id="di142105050129845236" iid="cb70d84907e44fecb4aff79f1c4c48d6" creation-date="03/30/2014 22:45:43" order-index="6" type="entity">
            <layout ax="1438" ay="434" awidth="314" aheight="255" x="1438" y="434" width="314" height="255" angle="0" />
            <class />
          </item>
          <item id="di709321950390303967" iid="4a8ef3c8c6584f728b65981ce123cf73" creation-date="03/30/2014 22:45:43" order-index="11" type="entity">
            <layout ax="19" ay="494" awidth="340" aheight="502" x="19" y="494" width="340" height="502" angle="0" />
            <class />
          </item>
          <item id="di270481333287799639" iid="4df3db13685145368fc43be40a8bc22d" creation-date="03/30/2014 22:45:43" order-index="12" type="entity">
            <layout ax="440" ay="636" awidth="231" aheight="216" x="440" y="636" width="231" height="216" angle="0" />
            <class />
          </item>
          <item id="di418829823786449070" iid="981fa06a45bd46c78b6b93546cd9ee0b" creation-date="03/30/2014 22:53:39" order-index="16" type="relation">
            <layout line-style="oblique" lock-start-point="false" lock-end-point="false" name-position="10,-10" auto-path="" x1="440" y1="744" x2="359" y2="745" start-border-pos="0.87463414227521" end-border-pos="0.374769324800408">
              <points>
                <point x="440" y="744" />
                <point x="359" y="745" />
              </points>
            </layout>
            <relation from="di270481333287799639" from-iid="4df3db13685145368fc43be40a8bc22d" to="di709321950390303967" to-iid="4a8ef3c8c6584f728b65981ce123cf73" />
            <role-positions start-role="25,15" end-role="25,-15" start-multiplicity="25,-15" end-multiplicity="25,15" />
          </item>
          <item id="di746806355366717312" iid="f9d8fe0bce374ebf96e408d3c38792fe" creation-date="03/30/2014 22:55:19" order-index="17" type="entity">
            <layout ax="1153" ay="190" awidth="502" aheight="227" x="1153" y="190" width="502" height="227" angle="0" />
          </item>
          <item id="di344620390970239043" iid="ce77921455b44117b8c675227d8aabe7" creation-date="03/30/2014 22:45:43" order-index="0" type="entity">
            <layout ax="756" ay="1" awidth="316" aheight="899" x="756" y="1" width="316" height="899" angle="0" />
            <class />
          </item>
          <item id="di787343906157236523" iid="f84979b0511749b88ba1b568aeb18401" container="di746806355366717312" container-iid="f9d8fe0bce374ebf96e408d3c38792fe" creation-date="03/30/2014 22:45:43" order-index="13" type="entity">
            <layout ax="1180" ay="239" awidth="140" aheight="160" x="1180" y="239" width="140" height="160" angle="0" />
            <class />
          </item>
          <item id="di955089112361553320" iid="f06aa12713c0431e94d324c2a6624609" container="di746806355366717312" container-iid="f9d8fe0bce374ebf96e408d3c38792fe" creation-date="03/30/2014 22:45:43" order-index="14" type="entity">
            <layout ax="1338" ay="239" awidth="140" aheight="160" x="1338" y="239" width="140" height="160" angle="0" />
            <class />
          </item>
          <item id="di263390875607009427" iid="8867d5c6a6ff44a2acf48d7e35958c90" container="di746806355366717312" container-iid="f9d8fe0bce374ebf96e408d3c38792fe" creation-date="03/30/2014 22:45:43" order-index="15" type="entity">
            <layout ax="1500" ay="239" awidth="140" aheight="160" x="1500" y="239" width="140" height="160" angle="0" />
            <class />
          </item>
          <item id="di230492395498192094" iid="fea98ec4e7f24a36acd3fb32fc8b7755" container="di746806355366717312" container-iid="f9d8fe0bce374ebf96e408d3c38792fe" creation-date="03/30/2014 22:56:26" order-index="18" type="entity">
            <layout ax="1352" ay="-11" awidth="324" aheight="215" x="1352" y="-11" width="324" height="215" angle="0" />
          </item>
          <item id="di120782845618495851" iid="922aab7765774a8384e469c524221c9a" container="di230492395498192094" container-iid="fea98ec4e7f24a36acd3fb32fc8b7755" creation-date="03/30/2014 22:45:43" order-index="5" type="entity">
            <layout ax="1367" ay="28" awidth="140" aheight="160" x="1367" y="28" width="140" height="160" angle="0" />
            <class />
          </item>
          <item id="di212162522139756969" iid="c5c30a4c618841d190f76f43d3e53357" container="di230492395498192094" container-iid="fea98ec4e7f24a36acd3fb32fc8b7755" creation-date="03/30/2014 22:45:43" order-index="4" type="entity">
            <layout ax="1525" ay="28" awidth="140" aheight="160" x="1525" y="28" width="140" height="160" angle="0" />
            <class />
          </item>
          <item id="di745802804895700409" iid="6e7419410ee340b5ad634a2a8772950a" creation-date="03/30/2014 22:57:22" order-index="19" type="entity">
            <layout ax="1153" ay="662" awidth="519" aheight="517" x="1153" y="662" width="519" height="517" angle="0" />
          </item>
          <item id="di247661508823898965" iid="a2ac0df4654c43b7a2fb048f7fddfb4f" container="di745802804895700409" container-iid="6e7419410ee340b5ad634a2a8772950a" creation-date="03/30/2014 22:45:43" order-index="10" type="entity">
            <layout ax="1165" ay="725" awidth="172" aheight="187" x="1165" y="725" width="172" height="187" angle="0" />
            <class />
          </item>
          <item id="di569954485649187275" iid="eac323a081564826ab0effb70f94ee17" container="di745802804895700409" container-iid="6e7419410ee340b5ad634a2a8772950a" creation-date="03/30/2014 22:45:43" order-index="9" type="entity">
            <layout ax="1421" ay="884" awidth="235" aheight="266" x="1421" y="884" width="235" height="266" angle="0" />
            <class />
          </item>
          <item id="di122191716814045261" iid="ab7b2f7836cf4ca88376ed7abce45b6b" container="di745802804895700409" container-iid="6e7419410ee340b5ad634a2a8772950a" creation-date="03/30/2014 22:45:43" order-index="8" type="entity">
            <layout ax="1353" ay="712" awidth="307" aheight="161" x="1353" y="712" width="307" height="161" angle="0" />
            <class />
          </item>
          <item id="di775687013593733444" iid="0ca1c7e7b37a4a788af553853bab00a9" container="di745802804895700409" container-iid="6e7419410ee340b5ad634a2a8772950a" creation-date="03/30/2014 22:45:43" order-index="7" type="entity">
            <layout ax="1197" ay="931" awidth="184" aheight="219" x="1197" y="931" width="184" height="219" angle="0" />
            <class />
          </item>
        </layer>
      </diagram>
    </model>
  </models>
  <documents />
  <document-templates />
</sim-project>